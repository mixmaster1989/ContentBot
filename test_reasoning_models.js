// –¢–µ—Å—Ç reasoning –º–æ–¥–µ–ª–µ–π DeepSeek R1
const { OpenRouterManager } = require('./telegram_parser/dist/ai/openrouter-manager');

const reasoningModels = [
  'deepseek/deepseek-r1-0528-qwen3-8b',
  'deepseek/deepseek-r1-0528'
];

async function testReasoningModel(modelName) {
  const ai = OpenRouterManager.get();
  const prompt = '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ü–û (50 —Å–ª–æ–≤) —Å —ç–º–æ–¥–∑–∏ üöÄüíª';
  
  try {
    console.log(`\nüß† –¢–µ—Å—Ç–∏—Ä—É—é reasoning –º–æ–¥–µ–ª—å: ${modelName}`);
    console.log('='.repeat(60));
    
    const result = await ai.makeRequest([
      { role: 'user', content: prompt }
    ], modelName, {
      max_tokens: 500, // –ë–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è reasoning
      temperature: 0.7
    });
    
    console.log('\nüìã –ü–û–õ–ù–´–ô –°–´–†–û–ô –û–¢–í–ï–¢:');
    console.log('='.repeat(60));
    
    // –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
    const fullResponse = JSON.stringify(result, null, 2);
    console.log(fullResponse);
    
    console.log('\nüìù –¢–û–õ–¨–ö–û –¢–ï–ö–°–¢:');
    console.log('='.repeat(60));
    
    const text = result?.choices?.[0]?.message?.content || result?.text || '–ù–ï–¢ –¢–ï–ö–°–¢–ê';
    console.log(text);
    
    console.log('\nüîç –ê–ù–ê–õ–ò–ó:');
    console.log('='.repeat(60));
    
    if (text.includes('<think>')) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã <think> —Ç–æ–∫–µ–Ω—ã - —ç—Ç–æ reasoning –º–æ–¥–µ–ª—å!');
      const thinkMatch = text.match(/<think>(.*?)<\/think>/s);
      if (thinkMatch) {
        console.log('\nüí≠ REASONING –ü–†–û–¶–ï–°–°:');
        console.log(thinkMatch[1]);
      }
    } else {
      console.log('‚ùå –ù–µ—Ç <think> —Ç–æ–∫–µ–Ω–æ–≤');
    }
    
    if (text && text !== '–ù–ï–¢ –¢–ï–ö–°–¢–ê') {
      console.log(`‚úÖ ${modelName} - –†–ê–ë–û–¢–ê–ï–¢`);
      return { model: modelName, status: 'working', response: text, fullResponse };
    } else {
      console.log(`‚ùå ${modelName} - –ù–ï–¢ –û–¢–í–ï–¢–ê`);
      return { model: modelName, status: 'no_response', fullResponse };
    }
    
  } catch (error) {
    console.log(`‚ùå ${modelName} - –û–®–ò–ë–ö–ê: ${error.message}`);
    return { model: modelName, status: 'error', error: error.message };
  }
}

async function main() {
  console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ reasoning –º–æ–¥–µ–ª–µ–π DeepSeek R1...\n');
  
  for (const model of reasoningModels) {
    await testReasoningModel(model);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log('\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!');
}

main().catch(console.error);

