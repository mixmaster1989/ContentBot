#!/usr/bin/env python3
"""
üîë ContentBot - –≠–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä API –∫–ª—é—á–µ–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ IKAR –∏ telegram_parser –ø—Ä–æ–µ–∫—Ç–æ–≤
"""

import os
import json
import shutil
from pathlib import Path
from datetime import datetime

class KeyExtractor:
    def __init__(self):
        self.home_dir = Path("/home/user1")
        self.ikar_dir = self.home_dir / "IKAR"
        self.parser_dir = self.home_dir / "telegram_parser"
        self.contentbot_dir = self.home_dir / "ContentBot"
        
        self.extracted_keys = {}
        self.session_data = None
        
    def extract_from_ikar(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–∏ –∏–∑ IKAR –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é IKAR –ø—Ä–æ–µ–∫—Ç...")
        
        ikar_env = self.ikar_dir / ".env"
        if ikar_env.exists():
            with open(ikar_env, 'r') as f:
                content = f.read()
                
            print(f"üìÅ –ù–∞–π–¥–µ–Ω IKAR .env —Ñ–∞–π–ª ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–∏
            lines = content.strip().split('\n')
            for line in lines:
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # –ú–∞–ø–∏–º –∫–ª—é—á–∏ IKAR –≤ –Ω—É–∂–Ω—ã–µ –¥–ª—è ContentBot
                    if key.startswith('OPENROUTER_API_KEY'):
                        if key == 'OPENROUTER_API_KEY1' or key == 'OPENROUTER_API_KEY':
                            self.extracted_keys['OPENAI_API_KEY'] = value
                            print(f"‚úÖ OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {value[:20]}...")
                    
                    elif key == 'TELEGRAM_BOT_TOKEN':
                        self.extracted_keys['TELEGRAM_BOT_TOKEN'] = value
                        print(f"‚úÖ Telegram Bot Token –Ω–∞–π–¥–µ–Ω: {value[:20]}...")
                    
                    elif key == 'LLM_API':
                        self.extracted_keys['LLM_API'] = value
                        print(f"‚úÖ LLM API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {value[:20]}...")
                    
                    elif key.startswith('ELEVEN_API'):
                        if 'ELEVEN_API_KEYS' not in self.extracted_keys:
                            self.extracted_keys['ELEVEN_API_KEYS'] = []
                        self.extracted_keys['ELEVEN_API_KEYS'].append(value)
                        
        else:
            print("‚ùå IKAR .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def extract_from_telegram_parser(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–∏ –∏ —Å–µ—Å—Å–∏—é –∏–∑ telegram_parser"""
        print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é telegram_parser –ø—Ä–æ–µ–∫—Ç...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º .env
        parser_env = self.parser_dir / ".env"
        if parser_env.exists():
            with open(parser_env, 'r') as f:
                content = f.read()
                
            print(f"üìÅ –ù–∞–π–¥–µ–Ω telegram_parser .env —Ñ–∞–π–ª ({len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            
            lines = content.strip().split('\n')
            for line in lines:
                if '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    if key == 'TG_API_ID':
                        self.extracted_keys['API_ID'] = value
                        print(f"‚úÖ Telegram API_ID –Ω–∞–π–¥–µ–Ω: {value}")
                    
                    elif key == 'TG_API_HASH':
                        self.extracted_keys['API_HASH'] = value
                        print(f"‚úÖ Telegram API_HASH –Ω–∞–π–¥–µ–Ω: {value[:20]}...")
                    
                    elif key.startswith('OPENROUTER_API_KEY') and 'OPENAI_API_KEY' not in self.extracted_keys:
                        self.extracted_keys['OPENAI_API_KEY'] = value
                        print(f"‚úÖ OpenAI API –∫–ª—é—á –∏–∑ parser: {value[:20]}...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Å—Å–∏—é
        session_file = self.parser_dir / ".session.json"
        if session_file.exists():
            with open(session_file, 'r') as f:
                self.session_data = json.load(f)
            print("üîë –†–∞–±–æ—á–∞—è Telegram —Å–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            print(f"üìä –°–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(self.session_data)} –∫–ª—é—á–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        else:
            print("‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def get_owner_id(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å Owner ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        # –ò—â–µ–º –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –≤–æ–∑–º–æ–∂–Ω—ã–µ ID
        possible_ids = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        for project_dir in [self.ikar_dir, self.parser_dir]:
            for config_file in project_dir.rglob("*.json"):
                try:
                    if config_file.stat().st_size < 1024 * 1024:  # –ù–µ –±–æ–ª—å—à–µ 1MB
                        with open(config_file, 'r') as f:
                            data = json.load(f)
                            if isinstance(data, dict):
                                for key, value in data.items():
                                    if 'user' in key.lower() or 'owner' in key.lower() or 'admin' in key.lower():
                                        if isinstance(value, (int, str)) and str(value).isdigit():
                                            possible_ids.append(str(value))
                except:
                    continue
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π ID –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if possible_ids:
            owner_id = possible_ids[0]
            print(f"üéØ Owner ID –Ω–∞–π–¥–µ–Ω: {owner_id}")
        else:
            owner_id = "YOUR_TELEGRAM_ID"
            print("‚ö†Ô∏è Owner ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é")
        
        return owner_id
    
    def create_contentbot_env(self):
        """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –¥–ª—è ContentBot"""
        print("üìù –°–æ–∑–¥–∞—é .env —Ñ–∞–π–ª –¥–ª—è ContentBot...")
        
        owner_id = self.get_owner_id()
        
        env_content = f"""# Telegram API (–∏–∑ telegram_parser)
API_ID={self.extracted_keys.get('API_ID', 'your_api_id')}
API_HASH={self.extracted_keys.get('API_HASH', 'your_api_hash')}
BOT_TOKEN={self.extracted_keys.get('TELEGRAM_BOT_TOKEN', 'your_bot_token')}
ADMIN_BOT_TOKEN=your_admin_bot_token

# OpenAI/LLM (–∏–∑ IKAR/telegram_parser)
OPENAI_API_KEY={self.extracted_keys.get('OPENAI_API_KEY', 'your_openai_key')}
LLM_API={self.extracted_keys.get('LLM_API', 'your_llm_api')}

# Admin (–Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
ADMIN_CHAT_ID={owner_id}
OWNER_ID={owner_id}

# Payment Systems (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
YOOMONEY_TOKEN=your_yoomoney_token
CRYPTO_WALLET=your_crypto_wallet

# Database
DATABASE_URL=./data/contentbot.db

# Pricing
MONTHLY_PRICE=3000
CHANNEL_SETUP_PRICE=10000
PREMIUM_PRICE=15000

# Content Settings
MAX_CHANNELS_PER_USER=5
POSTS_PER_DAY=10
MAX_POST_LENGTH=4000

# Session file (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω)
SESSION_FILE=.session.json
"""
        
        env_file = self.contentbot_dir / ".env"
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print(f"‚úÖ .env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {env_file}")
        return env_file
    
    def copy_session(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏—é –≤ ContentBot"""
        if self.session_data:
            session_file = self.contentbot_dir / ".session.json"
            with open(session_file, 'w') as f:
                json.dump(self.session_data, f, indent=2)
            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {session_file}")
            return session_file
        return None
    
    def create_session_helper(self):
        """–°–æ–∑–¥–∞–µ—Ç helper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π"""
        helper_content = '''"""
üîë Helper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram —Å–µ—Å—Å–∏–µ–π –∏–∑ telegram_parser
"""
import json
from pathlib import Path

class SessionHelper:
    def __init__(self, session_file=".session.json"):
        self.session_file = Path(session_file)
        self.session_data = None
        self.load_session()
    
    def load_session(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.session_file.exists():
            with open(self.session_file, 'r') as f:
                self.session_data = json.load(f)
            print(f"‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.session_file}")
            return True
        else:
            print(f"‚ùå –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.session_file}")
            return False
    
    def get_session_string(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç session string –¥–ª—è MTProto"""
        if not self.session_data:
            return None
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ telegram_parser –≤ —Å—Ç—Ä–æ–∫—É
        return json.dumps(self.session_data)
    
    def is_valid(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        if not self.session_data:
            return False
        
        required_keys = ['timeOffset', '2authKey', '2serverSalt']
        return all(key in self.session_data for key in required_keys)
    
    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏"""
        if not self.session_data:
            return "–°–µ—Å—Å–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        
        auth_keys = [k for k in self.session_data.keys() if 'authKey' in k]
        return f"–°–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç {len(auth_keys)} auth –∫–ª—é—á–µ–π, offset: {self.session_data.get('timeOffset', 'N/A')}"

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    helper = SessionHelper()
    if helper.is_valid():
        print("üîë –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞!")
        print(f"üìä {helper.get_stats()}")
    else:
        print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω–∞")
'''
        
        helper_file = self.contentbot_dir / "session_helper.py"
        with open(helper_file, 'w') as f:
            f.write(helper_content)
        
        print(f"‚úÖ Session helper —Å–æ–∑–¥–∞–Ω: {helper_file}")
        return helper_file
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("\n" + "="*60)
        print("üìä –°–í–û–î–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –î–ê–ù–ù–´–•")
        print("="*60)
        
        print("üîë –ù–∞–π–¥–µ–Ω–Ω—ã–µ API –∫–ª—é—á–∏:")
        for key, value in self.extracted_keys.items():
            if isinstance(value, list):
                print(f"  ‚úÖ {key}: {len(value)} –∫–ª—é—á–µ–π")
            else:
                masked_value = value[:20] + "..." if len(value) > 20 else value
                print(f"  ‚úÖ {key}: {masked_value}")
        
        if self.session_data:
            auth_keys = [k for k in self.session_data.keys() if 'authKey' in k]
            print(f"\nüîê Telegram —Å–µ—Å—Å–∏—è: {len(auth_keys)} auth –∫–ª—é—á–µ–π")
            print("  ‚úÖ –ì–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
        
        print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤: {self.contentbot_dir}")
        print("üìù .env - –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("üîë .session.json - –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram")
        print("üêç session_helper.py - helper –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π")
        
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –°–æ–∑–¥–∞–π –∞–¥–º–∏–Ω-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
        print("2. –£–∫–∞–∂–∏ ADMIN_BOT_TOKEN –≤ .env")
        print("3. –£–∑–Ω–∞–π —Å–≤–æ–π Telegram ID —á–µ—Ä–µ–∑ @userinfobot")
        print("4. –£–∫–∞–∂–∏ OWNER_ID –≤ .env")
        print("5. –ó–∞–ø—É—Å–∫–∞–π: ./start.sh pm2")
        
        print("\nüí° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
        print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram –ë–ï–ó –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!")
        print("‚úÖ –†–∞–±–æ—á–∏–µ API –∫–ª—é—á–∏ –∏–∑ —Ç–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")  
        print("‚úÖ –ì–æ—Ç–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
        print("="*60)
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        print("üöÄ ContentBot Key Extractor")
        print("="*40)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        self.extract_from_ikar()
        print()
        self.extract_from_telegram_parser()
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
        self.create_contentbot_env()
        self.copy_session()
        self.create_session_helper()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
        self.show_summary()

if __name__ == "__main__":
    extractor = KeyExtractor()
    extractor.run() 