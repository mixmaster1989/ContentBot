const { Api } = require('telegram');
const { MTProtoClient } = require('../../telegram_parser/dist/mtproto/client');

class ProfitPotokManager {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    
    // –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –ü–†–û–§–ò–¢–ü–û–¢–û–ö
    this.channelData = {
      id: 2934934414,
      username: 'profitpotoksignal',
      title: '–ü—Ä–æ—Ñ–∏—Ç–ü–æ—Ç–æ–∫ | –ö—Ä–∏–ø—Ç–æ-—Å–∏–≥–Ω–∞–ª—ã üíµ'
    };
    
    this.isInitialized = false;
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProfitPotokManager...');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º MTProto –∫–ª–∏–µ–Ω—Ç
      await this.mt.start();
      console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
      await this.verifyChannelAccess();
      
      this.isInitialized = true;
      console.log('‚úÖ ProfitPotokManager –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProfitPotokManager:', error);
      throw error;
    }
  }

  async verifyChannelAccess() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É –ü–†–û–§–ò–¢–ü–û–¢–û–ö...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID
      const channelByID = await this.getChannelByID(this.channelData.id);
      if (channelByID) {
        console.log(`‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ ID: ${channelByID.title}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ username
      const channelByUsername = await this.getChannelByUsername(this.channelData.username);
      if (channelByUsername) {
        console.log(`‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω –ø–æ username: @${channelByUsername.username}`);
      }
      
      if (!channelByID && !channelByUsername) {
        throw new Error('‚ùå –ö–∞–Ω–∞–ª –ü–†–û–§–ò–¢–ü–û–¢–û–ö –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
      throw error;
    }
  }

  async getChannelByID(channelId) {
    try {
      const channel = await this.client.invoke(
        new Api.channels.GetChannels({
          id: [new Api.InputChannel({
            channelId: channelId,
            accessHash: 0n // –ë—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          })]
        })
      );
      
      if (channel.chats && channel.chats.length > 0) {
        return channel.chats[0];
      }
      
      return null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ ID ${channelId}:`, error.message);
      return null;
    }
  }

  async getChannelByUsername(username) {
    try {
      const resolved = await this.client.invoke(
        new Api.contacts.ResolveUsername({
          username: username.replace('@', '')
        })
      );
      
      if (resolved.chats && resolved.chats.length > 0) {
        return resolved.chats[0];
      }
      
      return null;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ username @${username}:`, error.message);
      return null;
    }
  }

  async sendTestPost() {
    try {
      if (!this.isInitialized) {
        throw new Error('Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      console.log('üìù –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª –ü–†–û–§–ò–¢–ü–û–¢–û–ö...');
      
      const testMessage = `üß™ –¢–ï–°–¢–û–í–´–ô –ü–û–°–¢
üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
ü§ñ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ ProfitPotokManager
‚è∞ –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥`;

      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
      const channel = await this.getChannelByID(this.channelData.id);
      if (!channel) {
        throw new Error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.client.invoke(
        new Api.messages.SendMessage({
          peer: new Api.InputPeerChannel({
            channelId: channel.id,
            accessHash: channel.accessHash
          }),
          message: testMessage,
          randomId: BigInt(Math.floor(Math.random() * 1000000000))
        })
      );

      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
      console.log(`üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${sentMessage.id}`);
      
      return {
        messageId: sentMessage.id,
        channelId: channel.id,
        accessHash: channel.accessHash
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞:', error);
      throw error;
    }
  }

  async deleteMessage(messageId, channelId, accessHash) {
    try {
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}...`);
      
      await this.client.invoke(
        new Api.channels.DeleteMessages({
          channel: new Api.InputChannel({
            channelId: channelId,
            accessHash: accessHash
          }),
          id: [messageId]
        })
      );

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async testPostAndDelete() {
    try {
      console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞');
      console.log('==========================================');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
      const postData = await this.sendTestPost();
      
      // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
      console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥...');
      await this.delay(10000);
      
      // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
      await this.deleteMessage(postData.messageId, postData.channelId, postData.accessHash);
      
      console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
      throw error;
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async stop() {
    try {
      await this.client.disconnect();
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    }
  }
}

module.exports = { ProfitPotokManager };

  /**
   * –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê
   */
  async viewCryptoFolder() {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤
      const dialogFilters = await this.client.invoke(
        new Api.messages.GetDialogFilters()
      );
      
      // –ò—â–µ–º –ø–∞–ø–∫—É –ö–†–ò–ü–¢–ê
      const cryptoFilter = dialogFilters.filters.find(filter => 
        filter.title === '–ö–†–ò–ü–¢–ê' || 
        filter.title === '–ö–†–ò–ü–¢–û' ||
        filter.title === 'CRYPTO' ||
        filter.title === 'Crypto'
      );
      
      if (!cryptoFilter) {
        console.log('‚ùå –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö');
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:');
        dialogFilters.filters.forEach((filter, index) => {
          console.log(`   ${index + 1}. ${filter.title} (ID: ${filter.id})`);
        });
        return null;
      }
      
      console.log(`‚úÖ –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–∞–π–¥–µ–Ω–∞: "${cryptoFilter.title}" (ID: ${cryptoFilter.id})`);
      console.log(`üìä –ö–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${cryptoFilter.includePeers?.length || 0}`);
      
      if (!cryptoFilter.includePeers || cryptoFilter.includePeers.length === 0) {
        console.log('‚ö†Ô∏è –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –ø—É—Å—Ç–∞');
        return { filter: cryptoFilter, channels: [] };
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
      const channels = [];
      console.log('\nüì∫ –ö–∞–Ω–∞–ª—ã –≤ –ø–∞–ø–∫–µ –ö–†–ò–ü–¢–ê:');
      console.log('='.repeat(50));
      
      for (let i = 0; i < cryptoFilter.includePeers.length; i++) {
        const peer = cryptoFilter.includePeers[i];
        
        try {
          let channelEntity = null;
          let channelInfo = null;
          
          if (peer.className === 'InputPeerChannel') {
            // –ö–∞–Ω–∞–ª
            const inputPeer = new Api.InputPeerChannel({
              channelId: peer.channelId,
              accessHash: peer.accessHash
            });
            
            channelEntity = await this.client.getEntity(inputPeer);
            channelInfo = {
              type: '–ö–∞–Ω–∞–ª',
              id: channelEntity.id,
              title: channelEntity.title,
              username: channelEntity.username ? `@${channelEntity.username}` : '–ù–µ—Ç username',
              participantsCount: channelEntity.participantsCount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
              isChannel: true
            };
            
          } else if (peer.className === 'InputPeerChat') {
            // –ì—Ä—É–ø–ø–∞
            const inputPeer = new Api.InputPeerChat({
              chatId: peer.chatId
            });
            
            channelEntity = await this.client.getEntity(inputPeer);
            channelInfo = {
              type: '–ì—Ä—É–ø–ø–∞',
              id: channelEntity.id,
              title: channelEntity.title,
              username: channelEntity.username ? `@${channelEntity.username}` : '–ù–µ—Ç username',
              participantsCount: channelEntity.participantsCount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
              isChannel: false
            };
          }
          
          if (channelInfo) {
            channels.push(channelInfo);
            console.log(`${i + 1}. ${channelInfo.type}: ${channelInfo.title}`);
            console.log(`   ID: ${channelInfo.id}`);
            console.log(`   Username: ${channelInfo.username}`);
            console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${channelInfo.participantsCount}`);
            console.log(`   –°—Å—ã–ª–∫–∞: https://t.me/${channelInfo.username.replace('@', '') || 'channel'}`);
            console.log('');
          }
          
        } catch (error) {
          console.log(`${i + 1}. ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${error.message}`);
        }
      }
      
      console.log(`üìä –ò—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ –ö–†–ò–ü–¢–ê: ${channels.length}`);
      
      return {
        filter: cryptoFilter,
        channels: channels
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê
   */
  async testCryptoFolderView() {
    try {
      console.log('üß™ –¢–ï–°–¢ –ü–†–û–°–ú–û–¢–†–ê –ü–ê–ü–ö–ò –ö–†–ò–ü–¢–ê');
      console.log('===============================');
      
      const result = await this.viewCryptoFolder();
      
      if (result) {
        console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${result.channels.length}`);
        
        if (result.channels.length > 0) {
          console.log('\nüéØ –ü–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤:');
          result.channels.slice(0, 5).forEach((channel, index) => {
            console.log(`${index + 1}. ${channel.title} (${channel.type})`);
          });
        }
      } else {
        console.log('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª - –ø–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê:', error);
      throw error;
    }
  }

