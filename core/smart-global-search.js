/**
 * –£–ú–ù–´–ô –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –° AI –ê–ù–ê–õ–ò–ó–û–ú
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç RealGlobalSearch —Å AIChannelAnalyzer
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–º–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–Ω–∞–ª–æ–≤ —Å AI –≤–µ—Ä–¥–∏–∫—Ç–∞–º–∏
 */

const RealGlobalSearch = require('./real-global-search');
const AIChannelAnalyzer = require('./ai-channel-analyzer');

class SmartGlobalSearch extends RealGlobalSearch {
  constructor() {
    super();
    this.aiAnalyzer = new AIChannelAnalyzer();
    this.analysisCache = new Map(); // –ö—ç—à AI –∞–Ω–∞–ª–∏–∑–æ–≤
  }

  async init(mtClient) {
    try {
      await super.init(mtClient);
      await this.aiAnalyzer.init(mtClient);
      console.log('‚úÖ SmartGlobalSearch —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SmartGlobalSearch:', error);
      throw error;
    }
  }

  /**
   * –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –∫–∞–Ω–∞–ª–æ–≤ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
   */
  async smartSearch(query, options = {}) {
    try {
      console.log(`üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º: "${query}"`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π –ø–æ–∏—Å–∫
      const basicResults = await this.searchChannels(query, options);
      
      if (basicResults.length === 0) {
        return [];
      }
      
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${basicResults.length} –∫–∞–Ω–∞–ª–æ–≤, –∑–∞–ø—É—Å–∫–∞—é AI –∞–Ω–∞–ª–∏–∑...`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —Å AI (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
      const channelsToAnalyze = basicResults.slice(0, options.aiAnalysisLimit || 10);
      const analyzedChannels = await this.analyzeChannelsWithAI(channelsToAnalyze, options);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ AI —Ä–µ–π—Ç–∏–Ω–≥—É
      const sortedChannels = this.sortByAIRating(analyzedChannels);
      
      console.log(`‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${sortedChannels.length} –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`);
      return sortedChannels;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞
      return await this.searchChannels(query, options);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã —Å –ø–æ–º–æ—â—å—é AI
   */
  async analyzeChannelsWithAI(channels, options = {}) {
    const analyzedChannels = [];
    
    for (const channel of channels) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cacheKey = `${channel.id}_${channel.title}`;
        if (this.analysisCache.has(cacheKey)) {
          console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à AI –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è: ${channel.title}`);
          analyzedChannels.push(this.analysisCache.get(cacheKey));
          continue;
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        const analyzedChannel = await this.aiAnalyzer.analyzeChannel(channel);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        this.analysisCache.set(cacheKey, analyzedChannel);
        
        analyzedChannels.push(analyzedChannel);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
        if (options.analysisDelay !== false) {
          await this.delay(options.analysisDelay || 1500);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ ${channel.title}:`, error);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        analyzedChannels.push({
          ...channel,
          aiAnalysis: {
            error: error.message,
            qualityScore: 0,
            verdict: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
          }
        });
      }
    }
    
    return analyzedChannels;
  }

  /**
   * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ AI —Ä–µ–π—Ç–∏–Ω–≥—É
   */
  sortByAIRating(channels) {
    return channels.sort((a, b) => {
      const scoreA = a.aiAnalysis?.qualityScore || 0;
      const scoreB = b.aiAnalysis?.qualityScore || 0;
      
      // –ü–µ—Ä–≤–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ AI —Ä–µ–π—Ç–∏–Ω–≥—É
      if (scoreA !== scoreB) {
        return scoreB - scoreA;
      }
      
      // –í—Ç–æ—Ä–∏—á–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      const subsA = a.participantsCount || 0;
      const subsB = b.participantsCount || 0;
      return subsB - subsA;
    });
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞
   */
  async quickSearch(query, options = {}) {
    console.log(`‚ö° –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫: "${query}"`);
    return await this.searchChannels(query, options);
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç (–ö–ê–ö –í –¢–ï–°–¢–ï!)
   */
  formatResultsForChat(channels, query) {
    if (!channels || channels.length === 0) {
      return `‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –ü–æ–∏—Å–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ`;
    }

    let message = `üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n\n`;
    
    channels.forEach((channel, index) => {
      message += `${index + 1}. üì∫ ${channel.title}\n`;
      message += `   üë• ${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–ö–ê–ö –í –¢–ï–°–¢–ï!)
      const metrics = channel.metrics;
      if (metrics) {
        message += `   üìä –ú–ï–¢–†–ò–ö–ò:\n`;
        message += `      üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${metrics.subscribersCount?.toLocaleString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        message += `      üìù –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${metrics.postsAnalyzed || 0}\n`;
        message += `      üìà –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${metrics.avgPostsPerDay?.toFixed(1) || 0}\n`;
        message += `      üëÄ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${metrics.avgViewsPerPost || 0}\n`;
        message += `      ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: ${metrics.avgReactionsPerPost || 0}\n`;
        message += `      üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: ${metrics.avgPostLength || 0} —Å–∏–º–≤–æ–ª–æ–≤\n`;
        message += `      üñºÔ∏è –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: ${metrics.mediaPercentage || 0}%\n`;
        message += `      üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: ${metrics.forwardPercentage || 0}%\n`;
        if (metrics.lastPostDate) {
          message += `      üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${new Date(metrics.lastPostDate).toLocaleDateString()}\n`;
        }
        message += `\n`;
      }

      // AI –∞–Ω–∞–ª–∏–∑ (–ö–ê–ö –í –¢–ï–°–¢–ï!)
      const analysis = channel.aiAnalysis;
      if (analysis && !analysis.error) {
        const scoreEmoji = analysis.qualityScore >= 8 ? 'üåü' : 
                          analysis.qualityScore >= 6 ? '‚≠ê' : 
                          analysis.qualityScore >= 4 ? 'üî∂' : 'üî∏';
        
        message += `   ${scoreEmoji} AI –†–µ–π—Ç–∏–Ω–≥: ${analysis.qualityScore}/10\n`;
        message += `   üéØ –í–µ—Ä–¥–∏–∫—Ç: ${analysis.verdict}\n`;
        message += `   üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.educationalValue}/10\n`;
        message += `   üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: ${analysis.commercialIndex}/10\n`;
        message += `   üìù –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${analysis.contentType}\n`;
        message += `   üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${analysis.targetAudience}\n`;
        message += `   üí≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${analysis.recommendation}\n`;
        
        if (analysis.warnings && analysis.warnings.length > 0) {
          message += `   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${analysis.warnings.join(', ')}\n`;
        }
      } else {
        message += `   ‚ùå AI –∞–Ω–∞–ª–∏–∑: ${analysis?.error || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n`;
      }
      
      if (channel.username) message += `   üîó @${channel.username}\n`;
      message += `\n`;
    });

    return message;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
   */
  formatSmartResultsForChat(channels, query) {
    if (!channels || channels.length === 0) {
      return `‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –ü–æ–∏—Å–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ`;
    }

    let message = `üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n\n`;
    
    channels.slice(0, 8).forEach((channel, index) => {
      const analysis = channel.aiAnalysis;
      
      message += `${index + 1}. üì∫ **${channel.title}**\n`;
      
      if (channel.username) {
        message += `   üîó @${channel.username}\n`;
      }
      
      message += `   üë• ${channel.participantsCount.toLocaleString()} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
      
      // AI –∞–Ω–∞–ª–∏–∑
      if (analysis && !analysis.error) {
        const scoreEmoji = analysis.qualityScore >= 8 ? 'üåü' : 
                          analysis.qualityScore >= 6 ? '‚≠ê' : 
                          analysis.qualityScore >= 4 ? 'üî∂' : 'üî∏';
        
        message += `   ${scoreEmoji} **AI –†–µ–π—Ç–∏–Ω–≥: ${analysis.qualityScore}/10**\n`;
        message += `   üéØ ${analysis.verdict}\n`;
        
        if (analysis.categories && analysis.categories.length > 0) {
          message += `   üè∑Ô∏è ${analysis.categories.slice(0, 2).join(', ')}\n`;
        }
        
        if (analysis.educationalValue > 7) {
          message += `   üìö –í—ã—Å–æ–∫–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å\n`;
        }
        
        if (analysis.commercialIndex > 7) {
          message += `   üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç\n`;
        }
        
        if (analysis.warnings && analysis.warnings.length > 0) {
          message += `   ‚ö†Ô∏è ${analysis.warnings[0]}\n`;
        }
        
        message += `   üí≠ *${analysis.recommendation}*\n`;
        
      } else {
        message += `   üè∑Ô∏è ${channel.category}\n`;
        if (analysis?.error) {
          message += `   ‚ö†Ô∏è AI –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n`;
        }
      }
      
      message += `\n`;
    });

    if (channels.length > 8) {
      message += `\n... –∏ –µ—â–µ ${channels.length - 8} –∫–∞–Ω–∞–ª–æ–≤`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É AI –∞–Ω–∞–ª–∏–∑–∞
    const analyzed = channels.filter(c => c.aiAnalysis && !c.aiAnalysis.error);
    if (analyzed.length > 0) {
      const avgScore = analyzed.reduce((sum, c) => sum + c.aiAnalysis.qualityScore, 0) / analyzed.length;
      message += `\n\nüìä **AI –°–≤–æ–¥–∫–∞:**\n`;
      message += `üéØ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${analyzed.length} –∫–∞–Ω–∞–ª–æ–≤\n`;
      message += `‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${avgScore.toFixed(1)}/10\n`;
      
      const highQuality = analyzed.filter(c => c.aiAnalysis.qualityScore >= 7).length;
      if (highQuality > 0) {
        message += `üåü –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${highQuality} –∫–∞–Ω–∞–ª–æ–≤\n`;
      }
    }

    return message;
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ AI –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   */
  filterByAICriteria(channels, criteria = {}) {
    return channels.filter(channel => {
      const analysis = channel.aiAnalysis;
      if (!analysis || analysis.error) return true; // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
      if (criteria.minQualityScore && analysis.qualityScore < criteria.minQualityScore) {
        return false;
      }
      
      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
      if (criteria.maxCommercialIndex && analysis.commercialIndex > criteria.maxCommercialIndex) {
        return false;
      }
      
      // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å
      if (criteria.minEducationalValue && analysis.educationalValue < criteria.minEducationalValue) {
        return false;
      }
      
      // –ò—Å–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª—ã —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
      if (criteria.excludeWarnings && analysis.warnings && analysis.warnings.length > 0) {
        return false;
      }
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      if (criteria.contentTypes && !criteria.contentTypes.includes(analysis.contentType)) {
        return false;
      }
      
      return true;
    });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É AI –∞–Ω–∞–ª–∏–∑–∞
   */
  getAIAnalysisStats(channels) {
    const analyzed = channels.filter(c => c.aiAnalysis && !c.aiAnalysis.error);
    
    if (analyzed.length === 0) {
      return { analyzed: 0, avgScore: 0 };
    }
    
    const scores = analyzed.map(c => c.aiAnalysis.qualityScore);
    const avgScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;
    
    const stats = {
      total: channels.length,
      analyzed: analyzed.length,
      avgScore: Math.round(avgScore * 10) / 10,
      highQuality: analyzed.filter(c => c.aiAnalysis.qualityScore >= 7).length,
      educational: analyzed.filter(c => c.aiAnalysis.educationalValue >= 7).length,
      commercial: analyzed.filter(c => c.aiAnalysis.commercialIndex >= 7).length,
      withWarnings: analyzed.filter(c => c.aiAnalysis.warnings && c.aiAnalysis.warnings.length > 0).length
    };
    
    return stats;
  }
}

module.exports = SmartGlobalSearch;
