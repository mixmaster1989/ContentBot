const { GlobalChannelFinder } = require('./global-channel-finder');

class SearchBotIntegration {
  constructor(bot, mtClient) {
    this.bot = bot;
    this.searchEngine = new GlobalChannelFinder();
    this.userSessions = new Map(); // –°–µ—Å—Å–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.searchHistory = new Map(); // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    
    console.log('üîç SearchBotIntegration –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async init(mtClient) {
    try {
      await this.searchEngine.init(mtClient);
      this.setupCommands();
      this.setupCallbacks();
      console.log('‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –º–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–æ—Ç—É');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞:', error);
    }
  }

  setupCommands() {
    // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    this.bot.command('search', async (ctx) => {
      const args = ctx.message.text.split(' ').slice(1);
      if (args.length === 0) {
        await ctx.reply(`
üîç *–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø*

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
\`/search –∑–∞–ø—Ä–æ—Å\` - –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
\`/search_advanced\` - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
\`/search_trends\` - –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
\`/search_history\` - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞

–ü—Ä–∏–º–µ—Ä—ã:
\`/search –∫—Ä–∏–ø—Ç–æ\`
\`/search –Ω–æ–≤–æ—Å—Ç–∏ —Å–ø–æ—Ä—Ç\`
\`/search —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\`
        `, { parse_mode: 'Markdown' });
        return;
      }

      const query = args.join(' ');
      await this.performQuickSearch(ctx, query);
    });

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
    this.bot.command('search_advanced', async (ctx) => {
      await this.startAdvancedSearch(ctx);
    });

    // –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
    this.bot.command('search_trends', async (ctx) => {
      await this.showTrendingChannels(ctx);
    });

    // –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
    this.bot.command('search_history', async (ctx) => {
      await this.showSearchHistory(ctx);
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.bot.command('search_recommend', async (ctx) => {
      await this.showRecommendations(ctx);
    });

    // –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    this.bot.command('search_category', async (ctx) => {
      await this.showCategorySearch(ctx);
    });
  }

  setupCallbacks() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞
    this.bot.on('callback_query', async (ctx) => {
      const data = ctx.callbackQuery.data;
      
      if (data.startsWith('search_')) {
        await this.handleSearchCallback(ctx, data);
      }
      
      await ctx.answerCallbackQuery();
    });
  }

  // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
  async performQuickSearch(ctx, query) {
    try {
      const userId = ctx.from.id;
      await ctx.reply('üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫...');

      const results = await this.searchEngine.comprehensiveSearch(query, {
        maxResults: 20,
        deepSearch: true,
        timeout: 20000
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
      await this.saveSearchToHistory(userId, query, results.length);

      if (results.length === 0) {
        await ctx.reply(`‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –ü–æ–∏—Å–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ`);
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.sendSearchResults(ctx, query, results);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  async sendSearchResults(ctx, query, results, page = 0) {
    try {
      const pageSize = 5;
      const totalPages = Math.ceil(results.length / pageSize);
      const startIndex = page * pageSize;
      const endIndex = Math.min(startIndex + pageSize, results.length);
      const pageResults = results.slice(startIndex, endIndex);

      let message = `üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"*\n`;
      message += `–ù–∞–π–¥–µ–Ω–æ: ${results.length} –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø\n`;
      message += `–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${page + 1}/${totalPages}\n\n`;

      for (let i = 0; i < pageResults.length; i++) {
        const result = pageResults[i];
        const number = startIndex + i + 1;
        
        message += `${number}. *${result.title}*\n`;
        message += `${result.type === 'channel' ? 'üì∫' : 'üë•'} ${result.type === 'channel' ? '–ö–∞–Ω–∞–ª' : '–ì—Ä—É–ø–ø–∞'}`;
        
        if (result.verified) message += ' ‚úÖ';
        message += `\n`;
        
        if (result.participantsCount) {
          message += `üë• ${result.participantsCount.toLocaleString('ru-RU')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
        }
        
        message += `üè∑Ô∏è ${result.category}\n`;
        
        if (result.description) {
          const desc = result.description.length > 100 
            ? result.description.substring(0, 100) + '...'
            : result.description;
          message += `üìù ${desc}\n`;
        }
        
        if (result.link) {
          message += `üîó ${result.link}\n`;
        }
        
        message += `\n`;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = this.createSearchKeyboard(query, results, page, totalPages);

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
        disable_web_page_preview: true
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  createSearchKeyboard(query, results, currentPage, totalPages) {
    const keyboard = [];
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if (totalPages > 1) {
      const navRow = [];
      
      if (currentPage > 0) {
        navRow.push({
          text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
          callback_data: `search_page_${currentPage - 1}_${Buffer.from(query).toString('base64')}`
        });
      }
      
      navRow.push({
        text: `${currentPage + 1}/${totalPages}`,
        callback_data: 'search_noop'
      });
      
      if (currentPage < totalPages - 1) {
        navRow.push({
          text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
          callback_data: `search_page_${currentPage + 1}_${Buffer.from(query).toString('base64')}`
        });
      }
      
      keyboard.push(navRow);
    }

    // –î–µ–π—Å—Ç–≤–∏—è
    const actionRow = [
      { text: 'üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_new' },
      { text: 'üìä –§–∏–ª—å—Ç—Ä—ã', callback_data: `search_filter_${Buffer.from(query).toString('base64')}` }
    ];
    keyboard.push(actionRow);

    const utilsRow = [
      { text: 'üìà –¢—Ä–µ–Ω–¥—ã', callback_data: 'search_trends' },
      { text: 'üíæ –≠–∫—Å–ø–æ—Ä—Ç', callback_data: `search_export_${Buffer.from(query).toString('base64')}` }
    ];
    keyboard.push(utilsRow);

    return { inline_keyboard: keyboard };
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
  async handleSearchCallback(ctx, data) {
    try {
      const parts = data.split('_');
      const action = parts[1];

      switch (action) {
        case 'page':
          await this.handlePageNavigation(ctx, parts);
          break;
          
        case 'filter':
          await this.handleFilterRequest(ctx, parts);
          break;
          
        case 'export':
          await this.handleExportRequest(ctx, parts);
          break;
          
        case 'new':
          await this.handleNewSearchRequest(ctx);
          break;
          
        case 'trends':
          await this.showTrendingChannels(ctx);
          break;
          
        case 'category':
          await this.handleCategorySelection(ctx, parts);
          break;
          
        case 'advanced':
          await this.handleAdvancedSearchStep(ctx, parts);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:', error);
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
  async handlePageNavigation(ctx, parts) {
    try {
      const page = parseInt(parts[2]);
      const queryBase64 = parts[3];
      const query = Buffer.from(queryBase64, 'base64').toString();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∏—Å–∫
      const results = await this.searchEngine.comprehensiveSearch(query, {
        maxResults: 20,
        useCache: true
      });
      
      await ctx.editMessageText('üîç –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      await this.sendSearchResults(ctx, query, results, page);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    }
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  async startAdvancedSearch(ctx) {
    try {
      const userId = ctx.from.id;
      
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
      this.userSessions.set(userId, {
        type: 'advanced_search',
        step: 'query',
        data: {}
      });

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîç –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_advanced_normal' }],
          [{ text: 'üéØ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'search_advanced_category' }],
          [{ text: 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤', callback_data: 'search_advanced_filters' }],
          [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'search_cancel' }]
        ]
      };

      await ctx.reply(`
üîç *–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤*

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:
‚Ä¢ *–û–±—ã—á–Ω—ã–π* - –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
‚Ä¢ *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏* - –ø–æ–∏—Å–∫ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ  
‚Ä¢ *–° —Ñ–∏–ª—å—Ç—Ä–∞–º–∏* - –¥–µ—Ç–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
      `, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
    }
  }

  // –ü–æ–∫–∞–∑ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
  async showTrendingChannels(ctx) {
    try {
      await ctx.reply('üìà –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã...');
      
      const trends = await this.searchEngine.getTrendingChannels(null, '24h');
      
      if (trends.length === 0) {
        await ctx.reply('üì≠ –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
      }

      let message = 'üìà *–¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∑–∞ 24 —á–∞—Å–∞*\n\n';
      
      for (let i = 0; i < Math.min(trends.length, 10); i++) {
        const trend = trends[i];
        message += `${i + 1}. *${trend.channel_title}*\n`;
        if (trend.channel_username) {
          message += `üîó @${trend.channel_username}\n`;
        }
        message += `üë• ${trend.participants_count?.toLocaleString('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
        message += `üî• ${trend.search_frequency} –ø–æ–∏—Å–∫–æ–≤\n`;
        message += `üè∑Ô∏è ${trend.category}\n\n`;
      }

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìä –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'search_trends_7d' },
            { text: 'üìà –ó–∞ –º–µ—Å—è—Ü', callback_data: 'search_trends_30d' }
          ],
          [{ text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_new' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤');
    }
  }

  // –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  async showSearchHistory(ctx) {
    try {
      const userId = ctx.from.id;
      const history = await this.searchEngine.getUserSearchHistory(userId, 10);
      
      if (history.length === 0) {
        await ctx.reply('üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞');
        return;
      }

      let message = 'üìã *–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞*\n\n';
      
      for (let i = 0; i < history.length; i++) {
        const item = history[i];
        const date = new Date(item.created_at * 1000).toLocaleDateString('ru-RU');
        message += `${i + 1}. "${item.query}"\n`;
        message += `üìÖ ${date} | üìä ${item.results_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
      }

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data: 'search_new' }],
          [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é', callback_data: 'search_clear_history' }]
        ]
      };

      await ctx.reply(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
    }
  }

  // –ü–æ–∫–∞–∑ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  async showCategorySearch(ctx) {
    try {
      const categories = Object.keys(this.searchEngine.categories);
      const keyboard = [];
      
      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
      for (let i = 0; i < categories.length; i += 2) {
        const row = [];
        row.push({
          text: `üè∑Ô∏è ${categories[i]}`,
          callback_data: `search_category_${categories[i]}`
        });
        
        if (i + 1 < categories.length) {
          row.push({
            text: `üè∑Ô∏è ${categories[i + 1]}`,
            callback_data: `search_category_${categories[i + 1]}`
          });
        }
        
        keyboard.push(row);
      }

      await ctx.reply('üè∑Ô∏è *–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º–∞—Ç–∏–∫—É:', {
        parse_mode: 'Markdown',
        reply_markup: { inline_keyboard: keyboard }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
  async saveSearchToHistory(userId, query, resultsCount) {
    try {
      await this.searchEngine.saveSearchHistory(userId, query, resultsCount);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
      if (!this.searchHistory.has(userId)) {
        this.searchHistory.set(userId, []);
      }
      
      const userHistory = this.searchHistory.get(userId);
      userHistory.unshift({ query, resultsCount, timestamp: Date.now() });
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
      if (userHistory.length > 50) {
        userHistory.splice(50);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async handleExportRequest(ctx, parts) {
    try {
      const queryBase64 = parts[2];
      const query = Buffer.from(queryBase64, 'base64').toString();
      
      await ctx.reply('üì§ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–∫—Å–ø–æ—Ä—Ç...');
      
      const exportData = await this.searchEngine.exportResults(query, 'json', {
        maxResults: 100
      });
      
      if (!exportData) {
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö');
        return;
      }

      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
      const filename = `search_${query.replace(/[^a-z–∞-—è0-9]/gi, '_')}_${Date.now()}.json`;
      const content = JSON.stringify(exportData, null, 2);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è —Ñ–∞–π–ª
      await ctx.reply(`üìÑ *–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤*\n\n–ó–∞–ø—Ä–æ—Å: "${query}"\n–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${exportData.total}\n–§–æ—Ä–º–∞—Ç: JSON\n\n_–§–∞–π–ª: ${filename}_`, {
        parse_mode: 'Markdown'
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ');
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
  getSearchStats() {
    return {
      activeSearchSessions: this.userSessions.size,
      totalHistoryEntries: Array.from(this.searchHistory.values()).reduce((sum, hist) => sum + hist.length, 0),
      searchEngineStats: this.searchEngine.getSearchStats()
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup() {
    this.userSessions.clear();
    this.searchEngine.clearCache();
    console.log('üßπ SearchBotIntegration –æ—á–∏—â–µ–Ω');
  }
}

module.exports = { SearchBotIntegration };


