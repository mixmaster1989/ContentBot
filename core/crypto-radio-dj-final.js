require('dotenv').config();
const { MTProtoClient } = require('../../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const axios = require('axios');
const fs = require('fs');

class CryptoRadioDJ {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.targetChannels = [];
    this.cloudRuConfig = {
      apiKey: process.env.LLM_API,
      baseUrl: 'https://foundation-models.api.cloud.ru/v1',
      model: 'openai/gpt-oss-120b',
      maxTokens: 200000,
      temperature: 0.6
    };
  }

  async init() {
    await this.mt.start();
    console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    await this.loadTargetChannels();
  }

  async loadTargetChannels() {
    try {
      const data = fs.readFileSync('/home/user1/telegram_parser/target_crypto_channels.json', 'utf8');
      const channels = JSON.parse(data);
      this.targetChannels = channels.targetChannels.filter(ch => ch.status === '–ù–ê–ô–î–ï–ù');
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.targetChannels.length} —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error.message);
    }
  }

  async getCryptoChannelsFromFolder() {
    try {
      console.log('üîç –ü–æ–ª—É—á–∞—é –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê...');
      const dialogFilters = await this.client.invoke(new Api.messages.GetDialogFilters());
      const cryptoFilter = dialogFilters.filters.find(filter => filter.title === '–ö–†–ò–ü–¢–ê');
      
      if (!cryptoFilter) {
        console.log('‚ùå –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return [];
      }

      console.log(`‚úÖ –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–∞–π–¥–µ–Ω–∞: "${cryptoFilter.title}" (ID: ${cryptoFilter.id})`);
      
      const allChannels = [];
      for (const peer of cryptoFilter.includePeers) {
        try {
          const channelEntity = await this.client.getEntity(peer);
          allChannels.push({
            id: channelEntity.id,
            title: channelEntity.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            username: channelEntity.username || null,
            accessHash: channelEntity.accessHash,
            entity: channelEntity
          });
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: ${error.message}`);
        }
      }
      
      console.log(`üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${allChannels.length}`);
      return allChannels;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê:', error.message);
      return [];
    }
  }

  async getChannelMessages(channelEntity, limit = 10) {
    try {
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: channelEntity,
          limit: limit,
          offsetDate: 0,
          offsetId: 0,
          minId: 0,
          maxId: 0,
          addOffset: 0
        })
      );

      return messages.messages.map(msg => ({
        id: msg.id,
        text: msg.message || '',
        date: new Date(msg.date * 1000),
        timestamp: msg.date,
        channelTitle: channelEntity.title || 'Unknown'
      }));
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${channelEntity.title}:`, error.message);
      return [];
    }
  }

  async collectAllMessages() {
    console.log('üîç –°–æ–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...');
    const allMessages = [];

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê
    const cryptoChannels = await this.getCryptoChannelsFromFolder();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
    const targetChannels = cryptoChannels.filter(channel => 
      this.targetChannels.some(target => 
        channel.title.toLowerCase().includes(target.searchName.toLowerCase())
      )
    );

    console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${targetChannels.length} —Ü–µ–ª–µ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ ${cryptoChannels.length} –æ–±—â–∏—Ö`);

    for (const channel of targetChannels) {
      try {
        const messages = await this.getChannelMessages(channel.entity, 10);
        allMessages.push(...messages);
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${channel.title}`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–∞–Ω–∞–ª–æ–º ${channel.title}:`, error.message);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
    allMessages.sort((a, b) => b.timestamp - a.timestamp);

    return allMessages;
  }

  async generatePodcast(messages) {
    const prompt = `–¢—ã - –ø–µ—Ä–≤—ã–π –≤ –º–∏—Ä–µ –¥–∏–¥–∂–µ–π –∫—Ä–∏–ø—Ç–æ—Ä–∞–¥–∏–æ "–ü–†–û–§–ò–¢-–ü–†–û–í–û–î–ù–ò–ö" üéß‚ö°

–¢–≤–æ—è –∑–∞–¥–∞—á–∞: —Å–æ–∑–¥–∞—Ç—å –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –ø–æ–¥–∫–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞.

–°–¢–ò–õ–¨ –ü–û–î–ê–ß–ò:
- –ì–æ–≤–æ—Ä–∏ –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —Ä–∞–¥–∏–æ–≤–µ–¥—É—â–∏–π - —ç–Ω–µ—Ä–≥–∏—á–Ω–æ, —Å –¥—Ä–∞–π–≤–æ–º
- –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∏–ø—Ç–æ-—Å–ª–µ–Ω–≥ –∏ –º–µ–º—ã (HODL, TO THE MOON, DIAMOND HANDS)
- –î–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
- –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç—Ä–∏–≥—É –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ
- –ë—É–¥—å –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–º, –Ω–æ –Ω–µ —Ç–æ–∫—Å–∏—á–Ω—ã–º
- –ú–ê–¢: –∏—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç —Ä–µ–¥–∫–æ, –Ω–æ –æ—á–µ–Ω—å –∫—Ä–∞—Å–∏–≤–æ –∏ –≤ —Ç–µ–º—É! –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∏–ª–∏ —ç–º–æ—Ü–∏—é

–°–¢–†–£–ö–¢–£–†–ê –ü–û–î–ö–ê–°–¢–ê:
1. üéµ INTRO: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ü–†–û–§–ò–¢-–ü–†–û–í–û–î–ù–ò–ö! –ì–¥–µ —Å–ª–∏–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–º–∏—Ä–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å –≤–∞—à–∏–º–∏ —É—à–∞–º–∏!"
2. üìä –°–ò–ì–ù–ê–õ–´: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã, –æ–±—ä—è—Å–Ω—è–π –ª–æ–≥–∏–∫—É
3. üî• –ù–û–í–û–°–¢–ò: –°–∞–º—ã–µ –≥–æ—Ä—è—á–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
4. üöÄ –ü–†–û–ì–ù–û–ó–´: –ö—É–¥–∞ –¥–≤–∏–∂–µ—Ç—Å—è —Ä—ã–Ω–æ–∫
5. üéµ OUTRO: "–≠—Ç–æ –±—ã–ª –ü–†–û–§–ò–¢-–ü–†–û–í–û–î–ù–ò–ö! HODL –∫—Ä–µ–ø—á–µ, —Ç—Ä–µ–π–¥—å —É–º–Ω–µ–µ!"

–í–ê–ñ–ù–û:
- –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ü–æ–¥–∞–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∫ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
- –°–æ–∑–¥–∞–≤–∞–π –æ—â—É—â–µ–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç–∏
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–º–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≥–æ–≤–æ—Ä—è—Ç", "—è –≤–∏–∂—É", "–∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –¥–∞–Ω–Ω—ã–µ"

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï:
- –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å —ç–º–æ–¥–∑–∏
- –í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
- –°–ø–∏—Å–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–∞—á–∞
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã
- –í–†–ï–ú–ï–ù–ù–´–ï –ú–ï–¢–ö–ò: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, [00:15], [02:30])

–°–æ–∑–¥–∞–π –ø–æ–¥–∫–∞—Å—Ç –¥–ª–∏–Ω–æ–π 300-500 —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
${messages.map(msg => `[${msg.date.toISOString()}] ${msg.text}`).join('\n')}`;

    try {
      const response = await axios.post(
        `${this.cloudRuConfig.baseUrl}/chat/completions`,
        {
          model: this.cloudRuConfig.model,
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: this.cloudRuConfig.maxTokens,
          temperature: this.cloudRuConfig.temperature
        },
        {
          headers: {
            'Authorization': `Bearer ${this.cloudRuConfig.apiKey}`,
            'Content-Type': 'application/json'
          }
        }
      );

      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Å—Ç–∞:', error.message);
      return null;
    }
  }

  async createPodcast() {
    try {
      console.log('üéß –°–æ–∑–¥–∞—é –∫—Ä–∏–ø—Ç–æ—Ä–∞–¥–∏–æ –ø–æ–¥–∫–∞—Å—Ç...');
      
      const messages = await this.collectAllMessages();
      console.log(`üìä –°–æ–±—Ä–∞–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

      if (messages.length === 0) {
        console.log('‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
        return;
      }

      const podcast = await this.generatePodcast(messages);
      
      if (podcast) {
        const filename = `podcast_${new Date().toISOString().split('T')[0]}_${Date.now()}.txt`;
        fs.writeFileSync(filename, podcast);
        console.log(`‚úÖ –ü–æ–¥–∫–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filename}`);
        console.log('\nÔøΩÔøΩ –ü–û–î–ö–ê–°–¢:');
        console.log('==========');
        console.log(podcast);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–∞:', error.message);
    }
  }

  async stop() {
    await this.client.disconnect();
    console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

module.exports = { CryptoRadioDJ };
