require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class ChannelFinder {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ username
  async findChannelByUsername(username) {
    try {
      console.log(`üîç –ò—â—É –∫–∞–Ω–∞–ª: ${username}`);
      
      const result = await this.client.invoke(
        new Api.contacts.ResolveUsername({ 
          username: username.replace('@', '') 
        })
      );

      if (result.chats && result.chats.length > 0) {
        const channel = result.chats[0];
        
        console.log('‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!');
        console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:');
        console.log(`   ID: ${channel.id}`);
        console.log(`   Username: @${channel.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`   Title: ${channel.title}`);
        console.log(`   Type: ${channel.className}`);
        console.log(`   Participants: ${channel.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   Description: ${channel.about || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        
        return {
          id: channel.id,
          username: channel.username,
          title: channel.title,
          type: channel.className,
          participants: channel.participantsCount,
          description: channel.about
        };
      } else {
        console.log('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return null;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞:', error);
      return null;
    }
  }

  // –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
  async searchChannelsByKeyword(keyword) {
    try {
      console.log(`üîç –ò—â—É –∫–∞–Ω–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: ${keyword}`);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞
      const searchVariants = [
        'militarist',
        'militarist_ru', 
        'military_news',
        'voennye_novosti',
        'military_channel',
        'army_news',
        'voennye',
        'military_ru',
        'army_ru',
        'defense_news',
        '–≤–æ–µ–Ω–Ω—ã–µ_–Ω–æ–≤–æ—Å—Ç–∏',
        '–∞—Ä–º–∏—è_–Ω–æ–≤–æ—Å—Ç–∏',
        '–æ–±–æ—Ä–æ–Ω–∞_–Ω–æ–≤–æ—Å—Ç–∏'
      ];

      for (let variant of searchVariants) {
        console.log(`   –ü—Ä–æ–±—É—é: ${variant}`);
        const result = await this.findChannelByUsername(variant);
        if (result) {
          return result;
        }
      }

      console.log('‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return null;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
  async getChannelMessages(channelId, limit = 10) {
    try {
      console.log(`üìù –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ ${channelId}`);
      
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: channelId,
          limit: limit,
          offsetDate: 0,
          offsetId: 0,
          maxId: 0,
          minId: 0,
          addOffset: 0,
          hash: 0n
        })
      );

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      const recentMessages = messages.messages
        .filter(msg => msg.message)
        .slice(0, 5)
        .map(msg => ({
          id: msg.id,
          text: msg.message.substring(0, 100) + '...',
          date: new Date(msg.date * 1000).toLocaleString('ru'),
          views: msg.views || 0
        }));

      return recentMessages;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return [];
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
async function findMilitaristChannel() {
  const finder = new ChannelFinder();
  
  try {
    await finder.init();
    
    // –ò—â–µ–º –∫–∞–Ω–∞–ª "–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"
    console.log('üéØ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ "–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"...\n');
    
    const channel = await finder.searchChannelsByKeyword('–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç');
    
    if (channel) {
      console.log('\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
      console.log(JSON.stringify(channel, null, 2));
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await finder.getChannelMessages(channel.id);
      if (messages.length > 0) {
        console.log('\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
        messages.forEach((msg, index) => {
          console.log(`${index + 1}. [${msg.date}] ${msg.text} (–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${msg.views})`);
        });
      }
    } else {
      console.log('\n‚ùå –ö–∞–Ω–∞–ª "–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç" –Ω–µ –Ω–∞–π–¥–µ–Ω');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:');
      console.log('   - @militarist');
      console.log('   - @militarist_ru');
      console.log('   - @military_news');
      console.log('   - @voennye_novosti');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await finder.close();
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
if (require.main === module) {
  findMilitaristChannel();
}

module.exports = { ChannelFinder };
