require('dotenv').config();
const SmartGlobalSearch = require('./core/smart-global-search');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class AntilopaSearchMonitor {
  constructor() {
    this.searchEngine = new SmartGlobalSearch();
    this.client = null;
    this.antilopaGroupId = null;
    this.isRunning = false;
    this.triggerPhrase = '–ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–ì–ï';
    this.lastMessageId = 0;
    this.pollingInterval = null;
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê...');
      
      // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
      process.chdir('/home/user1/telegram_parser');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º MTProto –∫–ª–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ goodnight-message.js
      const mt = MTProtoClient.get();
      this.client = mt.getClient();
      await mt.start();
      console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
      await this.searchEngine.init(this.client); // Pass client to searchEngine
      
      // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –ê–ù–¢–ò–õ–û–ü–ê
      await this.findAntilopaGroup();
      
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async findAntilopaGroup() {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥ ID –∫–∞–∫ –≤ goodnight-message.js
      this.antilopaGroupId = -1002686615681;
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê: ${this.antilopaGroupId}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê:', error);
      throw error;
    }
  }

  async startMonitoring() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    console.log('üëÅÔ∏è –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê...');
    
    try {
      // –ù–ê–•–£–ô –°–û–ë–´–¢–ò–Ø! –î–ï–õ–ê–ï–ú –ü–†–Ø–ú–û–ô POLLING!
      this.lastMessageId = 0;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.client.getMessages(this.antilopaGroupId, { limit: 1 });
      if (messages.length > 0) {
        this.lastMessageId = messages[0].id;
        console.log(`üîÑ –°—Ç–∞—Ä—Ç–æ–≤—ã–π ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${this.lastMessageId}`);
      }
      
      // Polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      this.pollingInterval = setInterval(async () => {
        await this.checkNewMessages();
      }, 5000);
      
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)');
      console.log(`üéØ –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞: "${this.triggerPhrase}"`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      this.isRunning = false;
    }
  }

  async checkNewMessages() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      const messages = await this.client.getMessages(this.antilopaGroupId, { limit: 10 });
      console.log(`üì¨ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${this.lastMessageId}`);
      
      for (const message of messages) {
        if (message.id > this.lastMessageId) {
          console.log(`üÜï –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï #${message.id}: "${(message.message || '').substring(0, 50)}..."`);
          this.lastMessageId = message.id;
          await this.handleNewMessage(message);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }

  async handleNewMessage(message) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê
      if (!this.isFromAntilopaGroup(message)) {
        console.log('‚è≠Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê');
        return;
      }

      // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø! –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–ú –ù–ò–ß–ï–ì–û!
      console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: out=${message.out}, from_self=${message.out ? '–î–ê' : '–ù–ï–¢'}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!message.message) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
        return;
      }

      const messageText = message.message;
      console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ê–ù–¢–ò–õ–û–ü–ê #${message.id}: ${messageText.substring(0, 50)}...`);

      if (messageText.toUpperCase().includes(this.triggerPhrase)) {
        console.log('üéØ –ù–ê–ô–î–ï–ù–ê –¢–†–ò–ì–ì–ï–†–ù–ê–Ø –§–†–ê–ó–ê!');
        await this.processSearchRequest(messageText, message);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  isFromAntilopaGroup(message) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ PeerChannel –∏ PeerChat
    const peerId = message.peerId;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: peerId=${peerId?.className}, channelId=${peerId?.channelId}, chatId=${peerId?.chatId}`);
    console.log(`üéØ –û–∂–∏–¥–∞–µ–º—ã–π ID –≥—Ä—É–ø–ø—ã: ${this.antilopaGroupId}`);
    
    if (!peerId) {
      console.log('‚ùå –ù–µ—Ç peerId');
      return false;
    }
    
    if (peerId.className === 'PeerChannel' || peerId.className === 'PeerChat') {
      const messageGroupId = peerId.channelId || peerId.chatId;
      console.log(`üìä ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageGroupId}, —Ü–µ–ª–µ–≤–æ–π ID: ${this.antilopaGroupId}`);
      
      // –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100 –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      let fullMessageId = messageGroupId;
      if (peerId.className === 'PeerChannel' && messageGroupId > 0) {
        fullMessageId = -1000000000000 - messageGroupId;
        console.log(`üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞: ${fullMessageId}`);
      }
      
      const isMatch = fullMessageId === this.antilopaGroupId;
      console.log(`üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${isMatch}`);
      return isMatch;
    }
    
    console.log(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø peer: ${peerId.className}`);
    return false;
  }

  async processSearchRequest(messageText, originalMessage) {
    try {
      console.log('üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const searchQuery = this.extractSearchQuery(messageText);
      if (!searchQuery) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
        return;
      }
      
      console.log(`üéØ –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${searchQuery}"`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
      await this.sendReplyToGroup(`üîç –í—ã–ø–æ–ª–Ω—è—é –£–ú–ù–´–ô –ø–æ–∏—Å–∫ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchQuery}"\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –£–ú–ù–´–ô –ø–æ–∏—Å–∫ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
      const results = await this.searchEngine.smartSearch(searchQuery, {
        limit: 10
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.sendSearchResults(searchQuery, results);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
      await this.sendReplyToGroup(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }
  }

  extractSearchQuery(messageText) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã
    const triggerIndex = messageText.toUpperCase().indexOf(this.triggerPhrase);
    if (triggerIndex === -1) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã
    const queryStart = triggerIndex + this.triggerPhrase.length;
    const query = messageText.substring(queryStart).trim();
    
    return query || null;
  }

  async sendSearchResults(query, results) {
    try {
      console.log(`üìä –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: –Ω–∞–π–¥–µ–Ω–æ ${results?.length || 0} –∫–∞–Ω–∞–ª–æ–≤`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ SmartGlobalSearch
      const message = this.searchEngine.formatResultsForChat(results, query);
      console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ, –¥–ª–∏–Ω–∞: ${message.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ª–∏–º–∏—Ç Telegram ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
      const MAX_MESSAGE_LENGTH = 4000;
      
      if (message.length <= MAX_MESSAGE_LENGTH) {
        // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
        await this.sendReplyToGroup(message);
        console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É (1 —Å–æ–æ–±—â–µ–Ω–∏–µ)`);
      } else {
        // –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        console.log(`‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${message.length} —Å–∏–º–≤–æ–ª–æ–≤), —Ä–∞–∑–±–∏–≤–∞—é –Ω–∞ —á–∞—Å—Ç–∏...`);
        
        const parts = this.splitMessageIntoParts(results, query, MAX_MESSAGE_LENGTH);
        console.log(`üìù –†–∞–∑–±–∏—Ç–æ –Ω–∞ ${parts.length} —á–∞—Å—Ç–µ–π`);
        
        for (let i = 0; i < parts.length; i++) {
          const partNumber = i + 1;
          const partMessage = `üìÑ –ß–∞—Å—Ç—å ${partNumber}/${parts.length}\n\n${parts[i]}`;
          
          await this.sendReplyToGroup(partMessage);
          console.log(`‚úÖ –ß–∞—Å—Ç—å ${partNumber}/${parts.length} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞`);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
          if (i < parts.length - 1) {
            await this.delay(1000);
          }
        }
        
        console.log(`‚úÖ –í—Å–µ —á–∞—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      await this.sendReplyToGroup(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }
  }

  /**
   * –†–∞–∑–±–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  splitMessageIntoParts(results, query, maxLength) {
    const parts = [];
    let currentPart = `üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª ${results.length} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n\n`;
    let currentLength = currentPart.length;
    
    for (let i = 0; i < results.length; i++) {
      const channel = results[i];
      const channelText = this.formatSingleChannel(channel, i + 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –≤ —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
      if (currentLength + channelText.length > maxLength) {
        // –¢–µ–∫—É—â–∞—è —á–∞—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        parts.push(currentPart.trim());
        currentPart = `üß† –£–º–Ω—ã–π –ø–æ–∏—Å–∫ (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ):\n\n`;
        currentLength = currentPart.length;
      }
      
      currentPart += channelText;
      currentLength += channelText.length;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    if (currentPart.trim().length > 0) {
      parts.push(currentPart.trim());
    }
    
    return parts;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  formatSingleChannel(channel, index) {
    let text = `${index}. üì∫ ${channel.title}\n`;
    text += `   üë• ${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const metrics = channel.metrics;
    if (metrics) {
      text += `   üìä –ú–ï–¢–†–ò–ö–ò:\n`;
      text += `      üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${metrics.subscribersCount?.toLocaleString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
      text += `      üìù –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${metrics.postsAnalyzed || 0}\n`;
      text += `      üìà –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${metrics.avgPostsPerDay?.toFixed(1) || 0}\n`;
      text += `      üëÄ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${metrics.avgViewsPerPost || 0}\n`;
      text += `      ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: ${metrics.avgReactionsPerPost || 0}\n`;
      text += `      üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: ${metrics.avgPostLength || 0} —Å–∏–º–≤–æ–ª–æ–≤\n`;
      text += `      üñºÔ∏è –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: ${metrics.mediaPercentage || 0}%\n`;
      text += `      üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: ${metrics.forwardPercentage || 0}%\n`;
      if (metrics.lastPostDate) {
        text += `      üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${new Date(metrics.lastPostDate).toLocaleDateString()}\n`;
      }
      text += `\n`;
    }

    // AI –∞–Ω–∞–ª–∏–∑
    const analysis = channel.aiAnalysis;
    if (analysis && !analysis.error) {
      const scoreEmoji = analysis.qualityScore >= 8 ? 'üåü' : 
                        analysis.qualityScore >= 6 ? '‚≠ê' : 
                        analysis.qualityScore >= 4 ? 'üî∂' : 'üî∏';
      
      text += `   ${scoreEmoji} AI –†–µ–π—Ç–∏–Ω–≥: ${analysis.qualityScore}/10\n`;
      text += `   üéØ –í–µ—Ä–¥–∏–∫—Ç: ${analysis.verdict}\n`;
      text += `   üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.educationalValue}/10\n`;
      text += `   üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: ${analysis.commercialIndex}/10\n`;
      text += `   üìù –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${analysis.contentType}\n`;
      text += `   üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${analysis.targetAudience}\n`;
      text += `   üí≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${analysis.recommendation}\n`;
      
      if (analysis.warnings && analysis.warnings.length > 0) {
        text += `   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${analysis.warnings.join(', ')}\n`;
      }
    } else {
      text += `   ‚ùå AI –∞–Ω–∞–ª–∏–∑: ${analysis?.error || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n`;
    }
    
    if (channel.username) text += `   üîó @${channel.username}\n`;
    text += `\n`;
    
    return text;
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async sendReplyToGroup(message) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ goodnight-message.js
      await this.client.sendMessage(this.antilopaGroupId, { message });
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –ê–ù–¢–ò–õ–û–ü–ê`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:', error);
    }
  }

  async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.isRunning = false;
    
    try {
      if (this.pollingInterval) {
        clearInterval(this.pollingInterval);
        this.pollingInterval = null;
      }
      
      if (this.client) {
        await this.client.disconnect();
      }
      
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
    }
  }
}

async function main() {
  const monitor = new AntilopaSearchMonitor();
  
  try {
    await monitor.init();
    await monitor.startMonitoring();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ graceful shutdown
    process.on('SIGINT', async () => {
      console.log('\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
      await monitor.stop();
      process.exit(0);
    });
    
    process.on('SIGTERM', async () => {
      console.log('\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      await monitor.stop();
      process.exit(0);
    });
    
    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    setInterval(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
      if (!monitor.isRunning) {
        console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...');
        monitor.startMonitoring();
      }
    }, 30000);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = AntilopaSearchMonitor;
