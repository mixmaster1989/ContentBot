#!/usr/bin/env node
/**
 * üéØ ContentBot - –ü–†–û–°–¢–û–ô –ü–û–°–¢ –í –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª
 */

require('dotenv').config();
const axios = require('axios');
const fs = require('fs');
const path = require('path');

console.log('üéØ ContentBot - –ü–†–û–°–¢–û–ô –ü–û–°–¢ –í –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ');
console.log('='*60);

const LLM_API_KEY = process.env.LLM_API;
const BOT_TOKEN = process.env.BOT_TOKEN;
const TARGET_CHANNEL_NAME = "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫";

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞
async function generateTradingContent() {
    try {
        console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...');
        
        const response = await axios.post(
            'https://foundation-models.api.cloud.ru/v1/chat/completions',
            {
                model: 'openai/gpt-oss-120b',
                messages: [
                    {
                        role: "system",
                        content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∏ –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤."
                    },
                    {
                        role: "user",
                        content: `–°–æ–∑–¥–∞–π –ú–û–©–ù–´–ô –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.

–ö–û–ù–¢–ï–ö–°–¢: –ö–∞–Ω–∞–ª "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫" - –º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 400-600 —Å–∏–º–≤–æ–ª–æ–≤  
- –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä
- –¢–µ–º–∞: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ AI
- –£–ø–æ–º—è–Ω–∏ ContentBot –∫–∞–∫ —Ä–µ—à–µ–Ω–∏–µ
- –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é –≤ –∫–æ–Ω—Ü–µ
- 2-3 —ç–º–æ–¥–∑–∏

–ü–û–°–¢:`
                    }
                ],
                max_tokens: 800,
                temperature: 0.8
            },
            {
                headers: {
                    'Authorization': `Bearer ${LLM_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            }
        );

        return response.data.choices[0].message.content.trim();
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
        return `ü§ñ ContentBot - –†–µ–≤–æ–ª—é—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤!

–£—Å—Ç–∞–ª –≤—Ä—É—á–Ω—É—é –ø–æ—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç? –í—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!

‚ú® –ß—Ç–æ —É–º–µ–µ—Ç ContentBot:
‚Ä¢ –ü–∞—Ä—Å–∏—Ç —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –¢–û–ü-–∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Cloud.ru
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é  
‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:
+500% –æ—Ö–≤–∞—Ç–æ–≤ | -90% –≤—Ä–µ–º–µ–Ω–∏ | +300% –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 3000‚ÇΩ/–º–µ—Å –∑–∞ –∫–∞–Ω–∞–ª
‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞: 5000‚ÇΩ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ

üöÄ –ì–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª?

#ContentBot #–ù–µ–π—Ä–æ–ö–æ–Ω—Ç–µ–Ω—Ç #–¢—Ä–µ–π–¥–∏–Ω–≥–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è`;
    }
}

// –ü–æ–∏—Å–∫ ID –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Bot API
async function findChannelId() {
    try {
        console.log('üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Bot API...');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ ID –∫–∞–Ω–∞–ª–∞
        const response = await axios.get(
            `https://api.telegram.org/bot${BOT_TOKEN}/getUpdates`
        );

        if (response.data.ok && response.data.result.length > 0) {
            console.log('üìã –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—â–µ–º –∫–∞–Ω–∞–ª...');
            
            for (const update of response.data.result) {
                if (update.message && update.message.chat) {
                    const chat = update.message.chat;
                    if (chat.title && chat.title.includes(TARGET_CHANNEL_NAME)) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: ${chat.title} (ID: ${chat.id})`);
                        return chat.id;
                    }
                }
                
                if (update.channel_post && update.channel_post.chat) {
                    const chat = update.channel_post.chat;
                    if (chat.title && chat.title.includes(TARGET_CHANNEL_NAME)) {
                        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: ${chat.title} (ID: ${chat.id})`);
                        return chat.id;
                    }
                }
            }
        }
        
        console.log('‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö');
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞:', error.message);
        return null;
    }
}

// –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–∑–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã
async function tryPostToKnownChannels(content) {
    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö ID –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testChannels = [
        process.env.TARGET_CHANNEL_ID,
        process.env.OWNER_ID,
        '@ContentBotTest', // –ï—Å–ª–∏ —Å–æ–∑–¥–∞—à—å –∫–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º username
        // –î–æ–±–∞–≤—å —Å—é–¥–∞ ID —Å–≤–æ–∏—Ö –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ];

    for (const channelId of testChannels) {
        if (!channelId) continue;
        
        try {
            console.log(`üì§ –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤: ${channelId}...`);
            
            const response = await axios.post(
                `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
                {
                    chat_id: channelId,
                    text: content,
                    parse_mode: 'Markdown'
                }
            );

            if (response.data.ok) {
                console.log(`‚úÖ –£–°–ü–ï–•! –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${channelId}`);
                console.log(`üì± Message ID: ${response.data.result.message_id}`);
                return true;
            }

        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${channelId}: ${error.response?.data?.description || error.message}`);
        }
    }
    
    return false;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞
function createManualInstructions(content) {
    console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –ü–û–°–¢–ò–ù–ì–ê:');
    console.log('='*60);
    console.log('1. –ù–∞–π–¥–∏ –≤ Telegram –∫–∞–Ω–∞–ª "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫"');
    console.log('2. –ï—Å–ª–∏ —Ç—ã –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞ - –∑–∞–ø–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∏–∂–µ');
    console.log('3. –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ - —Å–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª');
    console.log('4. –î–æ–±–∞–≤—å ContentBot –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∞ –∫–∞–Ω–∞–ª–∞');
    console.log('');
    
    console.log('üìù –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('‚îå' + '‚îÄ'.repeat(70) + '‚îê');
    content.split('\n').forEach(line => {
        console.log('‚îÇ ' + line.padEnd(69).substring(0, 69) + '‚îÇ');
    });
    console.log('‚îî' + '‚îÄ'.repeat(70) + '‚îò');
    console.log('');
    
    console.log('üí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('üöÄ ./start.sh pm2        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
    console.log('ü§ñ /demo                 # –¢–µ—Å—Ç –≤ –±–æ—Ç–µ');
    console.log('üí∞ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∂–∞–º!    # –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª
function saveContentToFile(content) {
    try {
        const filename = `generated_content_${Date.now()}.txt`;
        fs.writeFileSync(filename, content, 'utf8');
        console.log(`üíæ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${filename}`);
        return filename;
    } catch (error) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:', error.message);
        return null;
    }
}

async function main() {
    try {
        console.log('üìä –ù–ê–°–¢–†–û–ô–ö–ò:');
        console.log(`ü§ñ LLM API: ${LLM_API_KEY ? '‚úÖ' : '‚ùå'}`);
        console.log(`ü§ñ BOT TOKEN: ${BOT_TOKEN ? '‚úÖ' : '‚ùå'}`);
        console.log(`üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: "${TARGET_CHANNEL_NAME}"`);
        console.log('');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const content = await generateTradingContent();
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const filename = saveContentToFile(content);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª
        const channelId = await findChannelId();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        let posted = false;
        if (channelId) {
            posted = await tryPostToKnownChannels(content);
        } else {
            posted = await tryPostToKnownChannels(content);
        }
        
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if (!posted) {
            createManualInstructions(content);
        }
        
        console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('='*50);
        
        if (posted) {
            console.log('üéâ –ö–û–ù–¢–ï–ù–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!');
            console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!');
        } else {
            console.log('üìã –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            console.log('üí° –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å');
        }
        
        console.log('\nüí∞ –ì–û–¢–û–í–û –ö –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–ò:');
        console.log('üí≥ 3000‚ÇΩ/–º–µ—Å—è—Ü –∑–∞ –∫–∞–Ω–∞–ª');
        console.log('‚ö° 5000‚ÇΩ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞');
        console.log('üî• ROI –∑–∞ 1-2 –Ω–µ–¥–µ–ª–∏!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }
}

main().catch(console.error); 