const axios = require('axios');
const crypto = require('crypto');
const { Database } = require('../core/database');

class PaymentSystem {
  constructor() {
    this.db = new Database();
    this.yoomoneyToken = process.env.YOOMONEY_TOKEN;
    this.cryptoWallet = process.env.CRYPTO_WALLET;
    
    // –¢–∞—Ä–∏—Ñ—ã
    this.prices = {
      monthly: parseInt(process.env.MONTHLY_PRICE) || 3000,
      setup: parseInt(process.env.CHANNEL_SETUP_PRICE) || 10000,
      premium: parseInt(process.env.PREMIUM_PRICE) || 15000
    };
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆMoney
  async createYooMoneyPayment(userId, amount, serviceType = 'monthly') {
    try {
      const paymentId = this.generatePaymentId();
      const label = `contentbot_${userId}_${Date.now()}`;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
      await this.db.createPayment(userId, amount, 'yoomoney', serviceType, paymentId);

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
      const paymentUrl = `https://yoomoney.ru/quickpay/shop-widget?targets=ContentBot%20${serviceType}&default-sum=${amount}&button-text=11&any-card-payment-type=on&button-size=m&button-color=orange&successURL=https://t.me/your_contentbot&label=${label}`;

      console.log(`üí∞ –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –ÆMoney: ${paymentId} –Ω–∞ —Å—É–º–º—É ${amount}‚ÇΩ`);
      
      return {
        paymentId,
        paymentUrl,
        amount,
        label
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆMoney:', error);
      throw error;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
  async createCryptoPayment(userId, amount, serviceType = 'monthly') {
    try {
      const paymentId = this.generatePaymentId();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
      await this.db.createPayment(userId, amount, 'crypto', serviceType, paymentId);

      const cryptoAmount = this.convertToCrypto(amount);

      console.log(`‚Çø –°–æ–∑–¥–∞–Ω –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂: ${paymentId} –Ω–∞ —Å—É–º–º—É ${amount}‚ÇΩ`);

      return {
        paymentId,
        wallet: this.cryptoWallet,
        amount: cryptoAmount,
        instructions: `–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${cryptoAmount} USDT –Ω–∞ –∫–æ—à–µ–ª–µ–∫:\n${this.cryptoWallet}\n\n–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: ${paymentId}\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∞–¥–º–∏–Ω—É.`
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ÆMoney —á–µ—Ä–µ–∑ webhook/API
  async checkYooMoneyPayments() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
      const pendingPayments = await this.db.getPendingPayments();
      const yoomoneyPayments = pendingPayments.filter(p => p.payment_method === 'yoomoney');

      for (let payment of yoomoneyPayments) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ÆMoney
        // –ü–æ–∫–∞ –¥–µ–ª–∞–µ–º mock –ø—Ä–æ–≤–µ—Ä–∫—É
        const isConfirmed = await this.mockYooMoneyCheck(payment.payment_id);
        
        if (isConfirmed) {
          await this.confirmPayment(payment.user_id, payment.payment_id, payment.service_type);
        }
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ÆMoney:', error);
    }
  }

  // Mock –ø—Ä–æ–≤–µ—Ä–∫–∞ –ÆMoney (–∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
  async mockYooMoneyCheck(paymentId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –∑–∞–ø—Ä–æ—Å –∫ API –ÆMoney
    return Math.random() > 0.8; // 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
  async confirmPayment(userId, paymentId, serviceType) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      await this.db.updatePaymentStatus(paymentId, 'completed');

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      await this.activateSubscription(userId, serviceType);

      console.log(`‚úÖ –ü–ª–∞—Ç–µ–∂ ${paymentId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
      return false;
    }
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  async activateSubscription(userId, serviceType) {
    try {
      let expiresAt = null;
      let status = 'free';

      switch (serviceType) {
        case 'monthly':
          expiresAt = Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60); // 30 –¥–Ω–µ–π
          status = 'premium';
          break;
        case 'premium':
          expiresAt = Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60); // 30 –¥–Ω–µ–π
          status = 'vip';
          break;
        case 'setup':
          // –†–∞–∑–æ–≤–∞—è —É—Å–ª—É–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          status = 'setup_paid';
          break;
      }

      await this.db.updateUserSubscription(userId, status, expiresAt);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notifyPaymentSuccess(userId, serviceType);

      console.log(`üéâ –ü–æ–¥–ø–∏—Å–∫–∞ ${serviceType} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
    }
  }

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
  async notifyPaymentSuccess(userId, serviceType) {
    try {
      // –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
      const messages = {
        monthly: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!',
        premium: 'üéâ VIP –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –î–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!',
        setup: 'üéâ –û–ø–ª–∞—Ç–∞ –∑–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.'
      };

      const message = messages[serviceType] || '–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!';
      
      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      console.log(`üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${userId}: ${message}`);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
  async checkSubscription(userId) {
    try {
      const user = await this.db.getUser(userId);
      
      if (!user) return { valid: false, status: 'not_found' };

      const now = Math.floor(Date.now() / 1000);
      
      if (user.subscription_expires && user.subscription_expires < now) {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
        await this.db.updateUserSubscription(userId, 'expired', null);
        return { valid: false, status: 'expired' };
      }

      return { 
        valid: user.subscription_status !== 'free',
        status: user.subscription_status,
        expiresAt: user.subscription_expires
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return { valid: false, status: 'error' };
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø–ª–∞—Ç–µ–∂–∞
  generatePaymentId() {
    return 'cb_' + crypto.randomBytes(8).toString('hex');
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä—É–±–ª–µ–π –≤ –∫—Ä–∏–ø—Ç—É (USDT)
  convertToCrypto(rubAmount) {
    const usdtRate = 92; // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å —Ä—É–±–ª—å/USDT
    return Math.round((rubAmount / usdtRate) * 100) / 100;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
  async generatePaymentQR(paymentData) {
    try {
      const QRCode = require('qrcode');
      const qrData = JSON.stringify(paymentData);
      const qrCode = await QRCode.toDataURL(qrData);
      
      return qrCode;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞:', error);
      return null;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
  async getPaymentStats(days = 30) {
    try {
      const stats = await this.db.allQuery(`
        SELECT 
          payment_method,
          service_type,
          COUNT(*) as count,
          SUM(amount) as total_amount,
          AVG(amount) as avg_amount
        FROM payments 
        WHERE status = 'completed' 
          AND created_at > strftime('%s', 'now', '-${days} days')
        GROUP BY payment_method, service_type
      `);

      const totalRevenue = await this.db.getQuery(`
        SELECT SUM(amount) as total
        FROM payments 
        WHERE status = 'completed'
          AND created_at > strftime('%s', 'now', '-${days} days')
      `);

      return {
        stats,
        totalRevenue: totalRevenue?.total || 0,
        period: `${days} –¥–Ω–µ–π`
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
      return null;
    }
  }

  // –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞
  async refundPayment(paymentId, reason = '') {
    try {
      await this.db.runQuery(
        `UPDATE payments SET status = 'refunded' WHERE payment_id = ?`,
        [paymentId]
      );

      console.log(`üí∏ –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ ${paymentId}: ${reason}`);
      return true;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞:', error);
      return false;
    }
  }

  // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  async applyPromoCode(userId, promoCode) {
    const promoCodes = {
      'FIRST50': { discount: 50, type: 'percent' },
      'START1000': { discount: 1000, type: 'fixed' },
      'PREMIUM30': { discount: 30, type: 'percent' }
    };

    const promo = promoCodes[promoCode.toUpperCase()];
    
    if (!promo) {
      return { success: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
    const used = await this.db.getQuery(
      `SELECT id FROM payments WHERE user_id = ? AND payment_id LIKE '%promo%'`,
      [userId]
    );

    if (used) {
      return { success: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω' };
    }

    return { 
      success: true, 
      discount: promo.discount,
      type: promo.type,
      message: `–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! –°–∫–∏–¥–∫–∞: ${promo.discount}${promo.type === 'percent' ? '%' : '‚ÇΩ'}`
    };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∑–∞–ø—É—Å–∫ –ø–æ –∫—Ä–æ–Ω—É)
  async checkPayments() {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π...');
    
    await this.checkYooMoneyPayments();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    await this.checkExpiredSubscriptions();
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
  async checkExpiredSubscriptions() {
    try {
      const now = Math.floor(Date.now() / 1000);
      
      await this.db.runQuery(`
        UPDATE users 
        SET subscription_status = 'expired' 
        WHERE subscription_expires < ? AND subscription_status != 'expired'
      `, [now]);

      console.log('üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã
  getPrices() {
    return this.prices;
  }
}

module.exports = { PaymentSystem }; 