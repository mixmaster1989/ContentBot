require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class TelegramAnalyticsLocal {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    
    // –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    this.politicalKeywords = {
      pro_russian: [
        '—Ä–æ—Å—Å–∏—è', '–ø—É—Ç–∏–Ω', '—Ä—Ñ', '—Ä–æ—Å—Å–∏–π—Å–∫–∏–π', '–¥–æ–Ω–±–∞—Å—Å', '–ª–¥–Ω—Ä', '–Ω–æ–≤–æ—Ä–æ—Å—Å–∏—è',
        '–¥–µ–Ω–∞—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', '–¥–µ–º–∏–ª–∏—Ç–∞—Ä–∏–∑–∞—Ü–∏—è', '—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è', '–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ',
        '–±—Ä–∞—Ç—Å–∫–∏–π –Ω–∞—Ä–æ–¥', '—Ä—É—Å—Å–∫–∏–π –º–∏—Ä', '–∞–Ω—Ç–∏—Ñ–∞—à–∏–∑–º', '–ø–æ–±–µ–¥–∞'
      ],
      pro_western: [
        '—É–∫—Ä–∞–∏–Ω–∞', '–∑–µ–ª–µ–Ω—Å–∫–∏–π', '–Ω–∞—Ç–æ', '–µ–≤—Ä–æ—Å–æ—é–∑', '–¥–µ–º–æ–∫—Ä–∞—Ç–∏—è', '—Å–≤–æ–±–æ–¥–∞',
        '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏', '–ø—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞', '–∞–≥—Ä–µ—Å—Å–∏—è', '–æ–∫–∫—É–ø–∞—Ü–∏—è',
        '–≤–æ–π–Ω–∞', '–≤—Ç–æ—Ä–∂–µ–Ω–∏–µ', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∞–≤–æ', '—Å–∞–Ω–∫—Ü–∏–∏'
      ],
      neutral: [
        '–º–∏—Ä', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', '–¥–∏–ø–ª–æ–º–∞—Ç–∏—è', '—É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
        '–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π', '–±–µ–∂–µ–Ω—Ü—ã', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π', '–æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ'
      ]
    };

    this.militaryTopics = {
      '–≤–æ–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–∞–Ω–∫', '—Å–∞–º–æ–ª–µ—Ç', '—Ä–∞–∫–µ—Ç–∞', '–¥—Ä–æ–Ω', '–≤–µ—Ä—Ç–æ–ª–µ—Ç', '–∫–æ—Ä–∞–±–ª—å', '–æ—Ä—É–∂–∏–µ', '–±—Ä–æ–Ω—è'],
      '–≤–æ–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏': ['–æ–ø–µ—Ä–∞—Ü–∏—è', '–Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–æ–±–æ—Ä–æ–Ω–∞', '–∞—Ç–∞–∫–∞', '—à—Ç—É—Ä–º', '–±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞'],
      '–∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã': ['–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–≤–æ–π–Ω–∞', '—Å—Ä–∞–∂–µ–Ω–∏–µ', '–±–æ–∏', '—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ', '–ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–µ'],
      '—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º': ['—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç', '—Ç–µ—Ä–∞–∫—Ç', '–≤–∑—Ä—ã–≤', '–¥–∂–∏—Ö–∞–¥', '—ç–∫—Å—Ç—Ä–µ–º–∏–∑–º'],
      '—Ä–∞–∑–≤–µ–¥–∫–∞': ['—Ä–∞–∑–≤–µ–¥–∫–∞', '—à–ø–∏–æ–Ω', '–∞–≥–µ–Ω—Ç', '–¥–∞–Ω–Ω—ã–µ', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Å–µ–∫—Ä–µ—Ç–Ω–æ'],
      '–æ–±–æ—Ä–æ–Ω–∞': ['–ø–≤–æ', '–∑–∞—â–∏—Ç–∞', '–æ–±–æ—Ä–æ–Ω–∞', '—É–∫—Ä–µ–ø–ª–µ–Ω–∏—è', '–±–∞–∑–∞']
    };

    this.entities = {
      countries: ['—Ä–æ—Å—Å–∏—è', '—É–∫—Ä–∞–∏–Ω–∞', '—Å—à–∞', '–∫–∏—Ç–∞–π', '–≥–µ—Ä–º–∞–Ω–∏—è', '—Ñ—Ä–∞–Ω—Ü–∏—è', '–∏–∑—Ä–∞–∏–ª—å', '–∏—Ä–∞–Ω', '—Ç—É—Ä—Ü–∏—è', '–ø–æ–ª—å—à–∞'],
      organizations: ['–Ω–∞—Ç–æ', '—Ü–∞—Ö–∞–ª', '—Ñ—Å–±', '—Ü—Ä—É', '–≤—Å—É', '—Ä—Ñ', '–µ–≤—Ä–æ—Å–æ—é–∑'],
      politicians: ['–ø—É—Ç–∏–Ω', '–∑–µ–ª–µ–Ω—Å–∫–∏–π', '–±–∞–π–¥–µ–Ω', '—Ç—Ä–∞–º–ø', '–º–∞–∫—Ä–æ–Ω', '—à–æ–ª—å—Ü', '–Ω–µ—Ç–∞–Ω—å—è—Ö—É']
    };
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ Local Analytics Platform –∑–∞–ø—É—â–µ–Ω–∞!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // 1. SENTIMENT ANALYSIS - –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
  analyzeSentimentLocal(messages) {
    console.log('üéØ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏...');
    
    let proRussianScore = 0;
    let proWesternScore = 0;
    let neutralScore = 0;
    
    const detectedKeywords = {
      pro_russian: [],
      pro_western: [],
      neutral: []
    };

    const allText = messages.map(m => m.text.toLowerCase()).join(' ');
    
    // –ü–æ–¥—Å—á–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    for (let [category, keywords] of Object.entries(this.politicalKeywords)) {
      for (let keyword of keywords) {
        const matches = (allText.match(new RegExp(keyword, 'g')) || []).length;
        if (matches > 0) {
          detectedKeywords[category].push({ keyword, count: matches });
          
          if (category === 'pro_russian') proRussianScore += matches;
          else if (category === 'pro_western') proWesternScore += matches;
          else neutralScore += matches;
        }
      }
    }

    const totalScore = proRussianScore + proWesternScore + neutralScore;
    let sentimentScore = 0;
    let orientation = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
    
    if (totalScore > 0) {
      sentimentScore = Math.round(((proWesternScore - proRussianScore) / totalScore) * 100);
      
      if (sentimentScore > 20) orientation = '–ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π';
      else if (sentimentScore < -20) orientation = '–ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π';
    }

    const confidence = totalScore > 10 ? '–≤—ã—Å–æ–∫–∞—è' : totalScore > 5 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è';

    return {
      sentiment_score: sentimentScore,
      orientation: orientation,
      confidence: confidence,
      pro_russian_mentions: proRussianScore,
      pro_western_mentions: proWesternScore,
      neutral_mentions: neutralScore,
      detected_keywords: detectedKeywords,
      total_political_keywords: totalScore,
      analysis_method: 'local_keyword_analysis'
    };
  }

  // 2. UNIQUENESS CALCULATOR - –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  calculateUniquenessLocal(channelMessages, competitorMessages = []) {
    console.log('üîç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
    
    const channelText = channelMessages.map(m => m.text.toLowerCase()).join(' ');
    const competitorText = competitorMessages.map(m => m.text.toLowerCase()).join(' ');
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
    const channelTopics = {};
    const competitorTopics = {};
    
    for (let [topic, keywords] of Object.entries(this.militaryTopics)) {
      channelTopics[topic] = 0;
      competitorTopics[topic] = 0;
      
      for (let keyword of keywords) {
        channelTopics[topic] += (channelText.match(new RegExp(keyword, 'g')) || []).length;
        if (competitorText) {
          competitorTopics[topic] += (competitorText.match(new RegExp(keyword, 'g')) || []).length;
        }
      }
    }

    // –†–∞—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–º–∞—Ç–∏–∫
    let uniqueTopics = 0;
    let totalTopics = 0;
    
    for (let topic of Object.keys(channelTopics)) {
      if (channelTopics[topic] > 0) {
        totalTopics++;
        if (competitorTopics[topic] === 0 || channelTopics[topic] > competitorTopics[topic] * 2) {
          uniqueTopics++;
        }
      }
    }

    const uniquenessScore = totalTopics > 0 ? Math.round((uniqueTopics / totalTopics) * 100) : 50;
    
    // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–æ—Ç—ã –ø–æ—Å—Ç–∏–Ω–≥–∞
    const timeSpread = this.analyzePostingPattern(channelMessages);
    const contentFreshness = timeSpread.consistency_score;

    // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    const avgLength = channelMessages.reduce((sum, m) => sum + m.text.length, 0) / channelMessages.length;
    const detailScore = Math.min(Math.round((avgLength / 500) * 100), 100);

    return {
      uniqueness_score: uniquenessScore,
      content_freshness: contentFreshness,
      detail_score: detailScore,
      topics_covered: totalTopics,
      unique_topics: uniqueTopics,
      channel_topics: channelTopics,
      avg_post_length: Math.round(avgLength),
      posting_pattern: timeSpread,
      analysis_method: 'local_statistical_analysis'
    };
  }

  // 3. ENTITY EXTRACTION - –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
  extractEntitiesLocal(messages) {
    console.log('üè∑Ô∏è –õ–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π...');
    
    const allText = messages.map(m => m.text.toLowerCase()).join(' ');
    const extractedEntities = {
      countries: [],
      organizations: [],
      politicians: []
    };

    // –ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —Å–ª–æ–≤–∞—Ä—è–º
    for (let [category, entityList] of Object.entries(this.entities)) {
      for (let entity of entityList) {
        const matches = (allText.match(new RegExp(entity, 'g')) || []).length;
        if (matches > 0) {
          extractedEntities[category].push({
            name: entity,
            count: matches,
            frequency: Math.round((matches / messages.length) * 100) / 100
          });
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
      extractedEntities[category].sort((a, b) => b.count - a.count);
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º
    const topicDistribution = {};
    for (let [topic, keywords] of Object.entries(this.militaryTopics)) {
      let topicCount = 0;
      for (let keyword of keywords) {
        topicCount += (allText.match(new RegExp(keyword, 'g')) || []).length;
      }
      if (topicCount > 0) {
        topicDistribution[topic] = topicCount;
      }
    }

    return {
      countries: extractedEntities.countries,
      organizations: extractedEntities.organizations,
      politicians: extractedEntities.politicians,
      topic_distribution: topicDistribution,
      most_mentioned_country: extractedEntities.countries[0]?.name || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
      most_mentioned_politician: extractedEntities.politicians[0]?.name || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
      total_entities: extractedEntities.countries.length + extractedEntities.organizations.length + extractedEntities.politicians.length,
      analysis_method: 'local_dictionary_matching'
    };
  }

  // 4. POSTING PATTERN ANALYSIS - –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  analyzePostingPattern(messages) {
    if (messages.length === 0) return { consistency_score: 0 };

    const hourlyDistribution = {};
    const dailyDistribution = {};
    
    messages.forEach(msg => {
      const hour = msg.date.getHours();
      const day = msg.date.toDateString();
      
      hourlyDistribution[hour] = (hourlyDistribution[hour] || 0) + 1;
      dailyDistribution[day] = (dailyDistribution[day] || 0) + 1;
    });

    // –†–∞—Å—á–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    const hourlyValues = Object.values(hourlyDistribution);
    const dailyValues = Object.values(dailyDistribution);
    
    const hourlyStdDev = this.calculateStdDev(hourlyValues);
    const dailyStdDev = this.calculateStdDev(dailyValues);
    
    const consistencyScore = Math.max(0, 100 - (hourlyStdDev + dailyStdDev) * 2);

    return {
      consistency_score: Math.round(consistencyScore),
      peak_hour: Object.keys(hourlyDistribution).reduce((a, b) => 
        hourlyDistribution[a] > hourlyDistribution[b] ? a : b
      ),
      avg_daily_posts: Math.round(messages.length / Object.keys(dailyDistribution).length),
      hourly_distribution: hourlyDistribution,
      posting_frequency: messages.length / Math.max(1, Object.keys(dailyDistribution).length)
    };
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
  calculateStdDev(values) {
    if (values.length === 0) return 0;
    const avg = values.reduce((sum, val) => sum + val, 0) / values.length;
    const variance = values.reduce((sum, val) => sum + Math.pow(val - avg, 2), 0) / values.length;
    return Math.sqrt(variance);
  }

  async getChannelMessages(channelId, limit = 100) {
    try {
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: channelId,
          limit: limit,
          offsetDate: 0,
          offsetId: 0,
          maxId: 0,
          minId: 0,
          addOffset: 0,
          hash: 0n
        })
      );

      return messages.messages
        .filter(msg => msg.message && msg.message.length > 30)
        .map(msg => ({
          id: msg.id,
          text: msg.message,
          date: new Date(msg.date * 1000),
          views: msg.views || 0
        }));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
      return [];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async saveAnalysis(data, filename) {
    try {
      const fs = require('fs').promises;
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fullFilename = `${filename}_${timestamp}.json`;
      
      await fs.writeFile(fullFilename, JSON.stringify(data, null, 2), 'utf8');
      console.log(`üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fullFilename}`);
      
      return fullFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return null;
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë Local Analytics Platform –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }
}

// –ü–æ–ª–Ω—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
async function fullLocalAnalysis(channelId, channelName) {
  const platform = new TelegramAnalyticsLocal();
  
  try {
    await platform.init();
    
    console.log(`üöÄ –ü–û–õ–ù–´–ô –õ–û–ö–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê "${channelName}"`);
    console.log('=' .repeat(70));
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = await platform.getChannelMessages(channelId, 100);
    
    if (messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`üëÄ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${messages.reduce((sum, m) => sum + m.views, 0).toLocaleString()}`);
    
    // 1. –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    console.log('\n1Ô∏è‚É£ –ü–û–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó');
    console.log('=' .repeat(40));
    const sentiment = platform.analyzeSentimentLocal(messages);
    console.log(`üìä –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${sentiment.orientation}`);
    console.log(`üìà Sentiment Score: ${sentiment.sentiment_score}`);
    console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${sentiment.confidence}`);
    console.log(`üî¥ –ü—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${sentiment.pro_russian_mentions}`);
    console.log(`üîµ –ü—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${sentiment.pro_western_mentions}`);
    console.log(`‚ö™ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: ${sentiment.neutral_mentions}`);
    
    // 2. –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò');
    console.log('=' .repeat(40));
    const uniqueness = platform.calculateUniquenessLocal(messages);
    console.log(`‚ú® –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${uniqueness.uniqueness_score}%`);
    console.log(`üîÑ –°–≤–µ–∂–µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${uniqueness.content_freshness}%`);
    console.log(`üìù –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤: ${uniqueness.detail_score}%`);
    console.log(`üìã –ü–æ–∫—Ä—ã—Ç–æ —Ç–µ–º–∞—Ç–∏–∫: ${uniqueness.topics_covered}`);
    console.log(`üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫: ${uniqueness.unique_topics}`);
    console.log(`üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: ${uniqueness.avg_post_length} —Å–∏–º–≤–æ–ª–æ–≤`);
    
    // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
    console.log('\n3Ô∏è‚É£ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô');
    console.log('=' .repeat(40));
    const entities = platform.extractEntitiesLocal(messages);
    console.log(`üåç –£–ø–æ–º—è–Ω—É—Ç–æ —Å—Ç—Ä–∞–Ω: ${entities.countries.length}`);
    console.log(`üè¢ –£–ø–æ–º—è–Ω—É—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${entities.organizations.length}`);
    console.log(`üë§ –£–ø–æ–º—è–Ω—É—Ç–æ –ø–æ–ª–∏—Ç–∏–∫–æ–≤: ${entities.politicians.length}`);
    console.log(`üéØ –°–∞–º–∞—è —É–ø–æ–º–∏–Ω–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∞: ${entities.most_mentioned_country}`);
    console.log(`üëë –°–∞–º—ã–π —É–ø–æ–º–∏–Ω–∞–µ–º—ã–π –ø–æ–ª–∏—Ç–∏–∫: ${entities.most_mentioned_politician}`);
    
    if (entities.countries.length > 0) {
      console.log('\nüåç –¢–û–ü-5 –°–¢–†–ê–ù:');
      entities.countries.slice(0, 5).forEach((country, i) => {
        console.log(`   ${i+1}. ${country.name}: ${country.count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π`);
      });
    }
    
    // 4. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    console.log('\n4Ô∏è‚É£ –ü–ê–¢–¢–ï–†–ù–´ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò');
    console.log('=' .repeat(40));
    const patterns = platform.analyzePostingPattern(messages);
    console.log(`‚è∞ –ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${patterns.peak_hour}:00`);
    console.log(`üìÖ –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${patterns.avg_daily_posts}`);
    console.log(`üîÑ –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: ${patterns.consistency_score}%`);
    console.log(`üìä –ß–∞—Å—Ç–æ—Ç–∞: ${patterns.posting_frequency.toFixed(1)} –ø–æ—Å—Ç–æ–≤/–¥–µ–Ω—å`);
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    const overallScore = Math.round((
      (sentiment.sentiment_score + 50) * 0.2 +
      uniqueness.uniqueness_score * 0.3 +
      uniqueness.content_freshness * 0.2 +
      patterns.consistency_score * 0.2 +
      Math.min(entities.total_entities * 5, 100) * 0.1
    ));
    
    console.log('\n' .repeat(2) + 'üèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê');
    console.log('=' .repeat(50));
    console.log(`üìä –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: ${overallScore}/100`);
    
    let rating = '–ù–∏–∑–∫–∏–π';
    if (overallScore >= 80) rating = '–û—Ç–ª–∏—á–Ω—ã–π';
    else if (overallScore >= 60) rating = '–•–æ—Ä–æ—à–∏–π';
    else if (overallScore >= 40) rating = '–°—Ä–µ–¥–Ω–∏–π';
    
    console.log(`‚≠ê –ö–ª–∞—Å—Å –∫–∞–Ω–∞–ª–∞: ${rating}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const fullAnalysis = {
      channel_name: channelName,
      channel_id: channelId,
      messages_analyzed: messages.length,
      analysis_date: new Date().toISOString(),
      overall_score: overallScore,
      rating: rating,
      sentiment_analysis: sentiment,
      uniqueness_analysis: uniqueness,
      entities_analysis: entities,
      posting_patterns: patterns
    };
    
    await platform.saveAnalysis(fullAnalysis, 'full_local_analysis');
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –ò –°–û–•–†–ê–ù–ï–ù!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  } finally {
    await platform.close();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç
module.exports = { TelegramAnalyticsLocal, fullLocalAnalysis };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"
  fullLocalAnalysis(-1001111348665, "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç");
}
