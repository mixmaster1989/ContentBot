require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class GroupFinder {
  constructor() {
    this.client = null;
  }

  async init() {
    try {
      console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø...');
      
      const mtClient = MTProtoClient.get();
      this.client = mtClient.getClient();
      await this.client.connect();
      
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async findAllGroups() {
    try {
      console.log('üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...');
      
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      const groups = [];
      const channels = [];
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${dialogs.dialogs.length} –¥–∏–∞–ª–æ–≥–æ–≤`);
      console.log('');
      
      for (let dialog of dialogs.dialogs) {
        const peer = dialog.peer;
        
        if (peer.className === 'PeerChannel') {
          const channelId = peer.channelId;
          const channel = dialogs.chats.find(chat => chat.id === channelId);
          
          if (channel) {
            const info = {
              id: channel.id.toString(),
              title: channel.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
              username: channel.username || null,
              type: channel.broadcast ? 'channel' : 'group',
              participantsCount: channel.participantsCount || 0,
              about: channel.about || null
            };
            
            if (channel.broadcast) {
              channels.push(info);
            } else {
              groups.push(info);
            }
          }
        }
      }

      return { groups, channels };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      return { groups: [], channels: [] };
    }
  }

  async searchForAntilopa() {
    try {
      const { groups, channels } = await this.findAllGroups();
      
      console.log('üîç –ü–û–ò–°–ö –ì–†–£–ü–ü–´/–ö–ê–ù–ê–õ–ê –ê–ù–¢–ò–õ–û–ü–ê');
      console.log('=' .repeat(50));
      
      // –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      const antilopaGroups = groups.filter(g => 
        g.title.toLowerCase().includes('–∞–Ω—Ç–∏–ª–æ–ø–∞') ||
        g.title.toLowerCase().includes('antilopa') ||
        (g.username && g.username.toLowerCase().includes('antilopa'))
      );
      
      const antilopaChannels = channels.filter(c => 
        c.title.toLowerCase().includes('–∞–Ω—Ç–∏–ª–æ–ø–∞') ||
        c.title.toLowerCase().includes('antilopa') ||
        (c.username && c.username.toLowerCase().includes('antilopa'))
      );
      
      if (antilopaGroups.length > 0) {
        console.log('üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –ì–†–£–ü–ü–´ –° "–ê–ù–¢–ò–õ–û–ü–ê":');
        console.log('-' .repeat(40));
        antilopaGroups.forEach((group, index) => {
          console.log(`${index + 1}. üë• ${group.title}`);
          console.log(`   ID: ${group.id}`);
          console.log(`   Username: ${group.username ? '@' + group.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${group.participantsCount.toLocaleString('ru-RU')}`);
          if (group.about) {
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${group.about.substring(0, 100)}...`);
          }
          console.log('');
        });
      }
      
      if (antilopaChannels.length > 0) {
        console.log('üéØ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´ –° "–ê–ù–¢–ò–õ–û–ü–ê":');
        console.log('-' .repeat(40));
        antilopaChannels.forEach((channel, index) => {
          console.log(`${index + 1}. üì∫ ${channel.title}`);
          console.log(`   ID: ${channel.id}`);
          console.log(`   Username: ${channel.username ? '@' + channel.username : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${channel.participantsCount.toLocaleString('ru-RU')}`);
          if (channel.about) {
            console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${channel.about.substring(0, 100)}...`);
          }
          console.log('');
        });
      }
      
      if (antilopaGroups.length === 0 && antilopaChannels.length === 0) {
        console.log('‚ùå –ì—Ä—É–ø–ø—ã –∏–ª–∏ –∫–∞–Ω–∞–ª—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ê–ù–¢–ò–õ–û–ü–ê" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('');
        console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
        console.log('  ‚Ä¢ –ì—Ä—É–ø–ø–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É');
        console.log('  ‚Ä¢ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Ç–∞–∫–æ–π –≥—Ä—É–ø–ø–µ');
        console.log('  ‚Ä¢ –ì—Ä—É–ø–ø–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ —Å–∫—Ä—ã—Ç–∞');
        console.log('');
        console.log('üîç –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:');
        this.showAllGroups(groups.slice(0, 20)); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
      }
      
      return { antilopaGroups, antilopaChannels, allGroups: groups, allChannels: channels };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ê–ù–¢–ò–õ–û–ü–ê:', error);
      return null;
    }
  }

  showAllGroups(groups) {
    console.log('');
    console.log('üë• –í–ê–®–ò –ì–†–£–ü–ü–´ (–ø–µ—Ä–≤—ã–µ 20):');
    console.log('=' .repeat(50));
    
    groups.forEach((group, index) => {
      console.log(`${index + 1}. ${group.title}`);
      console.log(`   ID: ${group.id}`);
      if (group.username) {
        console.log(`   Username: @${group.username}`);
      }
      console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${group.participantsCount.toLocaleString('ru-RU')}`);
      console.log('');
    });
  }

  async close() {
    try {
      if (this.client) {
        await this.client.disconnect();
        console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    }
  }
}

async function findAntilopaGroup() {
  const finder = new GroupFinder();
  
  try {
    await finder.init();
    const result = await finder.searchForAntilopa();
    
    if (result && (result.antilopaGroups.length > 0 || result.antilopaChannels.length > 0)) {
      console.log('üéâ –ù–ê–ô–î–ï–ù–´ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ö–ê–ù–î–ò–î–ê–¢–´!');
      console.log('');
      console.log('üìù –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:');
      console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø—ã');
      console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ –≤ antilopa-search-monitor.js —Å—Ç—Ä–æ–∫—É –ø–æ–∏—Å–∫–∞');
      console.log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã');
      console.log('');
      console.log('üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ "–ê–ù–¢–ò–õ–û–ü–ê",');
      console.log('   –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∫–æ–¥–µ –Ω–∞ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await finder.close();
  }
}

if (require.main === module) {
  findAntilopaGroup();
}

module.exports = { GroupFinder };

