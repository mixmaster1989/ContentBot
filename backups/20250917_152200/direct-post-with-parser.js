#!/usr/bin/env node
/**
 * üéØ ContentBot - –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö –ò–ó telegram_parser
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MTProtoClient –Ω–∞–ø—Ä—è–º—É—é –∏–∑ telegram_parser
 */

// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É telegram_parser –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Ç—É–¥–∞
process.chdir('/home/user1/telegram_parser');
require('dotenv').config();

const { MTProtoClient } = require('./dist/mtproto/client');
const axios = require('axios');
const fs = require('fs');

console.log('üéØ ContentBot - –ü–†–Ø–ú–û–ô –ó–ê–ü–£–°–ö –ò–ó telegram_parser');
console.log('='*60);

class DirectContentPoster {
    constructor() {
        this.mt = MTProtoClient.get();
        this.client = this.mt.getClient();
        this.targetChannelName = "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫";
        this.LLM_API_KEY = process.env.LLM_API;
    }

    async init() {
        await this.mt.start();
        console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    }

    async findTargetChannel() {
        try {
            console.log(`üîç –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: "${this.targetChannelName}"...`);
            const dialogs = await this.client.getDialogs();
            
            console.log(`üìã –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${dialogs.length}`);
            
            for (const dialog of dialogs) {
                if (dialog.title && dialog.title.includes(this.targetChannelName)) {
                    console.log(`‚úÖ –ù–ê–ô–î–ï–ù! "${dialog.title}"`);
                    console.log(`üÜî ID: ${dialog.id}`);
                    console.log(`üë• –¢–∏–ø: ${dialog.entity.className}`);
                    return dialog;
                }
            }
            
            console.log(`‚ùå –ö–∞–Ω–∞–ª "${this.targetChannelName}" –ù–ï –ù–ê–ô–î–ï–ù`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('\nüìã –ü–µ—Ä–≤—ã–µ 10 –¥–∏–∞–ª–æ–≥–æ–≤:');
            dialogs.slice(0, 10).forEach((d, i) => {
                if (d.title) {
                    console.log(`${i+1}. ${d.title}`);
                }
            });
            
            return null;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞:', error.message);
            return null;
        }
    }

    async generateContentForTraders() {
        try {
            console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤...');
            
            const response = await axios.post(
                'https://foundation-models.api.cloud.ru/v1/chat/completions',
                {
                    model: 'openai/gpt-oss-120b',
                    messages: [
                        {
                            role: "system",
                            content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –≤ —Å—Ñ–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."
                        },
                        {
                            role: "user",
                            content: `–°–æ–∑–¥–∞–π –í–ó–†–´–í–ù–û–ô –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞ "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫".

–¶–ï–õ–¨: –ü—Ä–æ–¥–∞—Ç—å ContentBot - —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤

–°–¢–ò–õ–¨: –ö–∞–∫ —É—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- 600-800 —Å–∏–º–≤–æ–ª–æ–≤
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã ROI
- –£–ø–æ–º—è–Ω–∏ –ø–∞—Ä—Å–∏–Ω–≥, AI, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
- –°–∏–ª—å–Ω—ã–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
- 3-4 —ç–º–æ–¥–∑–∏
- –•–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ

–ü–†–ò–ú–ï–† –°–¢–†–£–ö–¢–£–†–´:
1. –ë–æ–ª—å/–ø—Ä–æ–±–ª–µ–º–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
2. –†–µ—à–µ–Ω–∏–µ (ContentBot)
3. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
4. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

–ü–û–°–¢:`
                        }
                    ],
                    max_tokens: 1200,
                    temperature: 0.8
                },
                {
                    headers: {
                        'Authorization': `Bearer ${this.LLM_API_KEY}`,
                        'Content-Type': 'application/json'
                    },
                    timeout: 30000
                }
            );

            const content = response.data.choices[0].message.content.trim();
            console.log('‚úÖ –í–ó–†–´–í–ù–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
            return content;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
            return `üî• –¢–†–ï–ô–î–ï–†–´, —Ö–≤–∞—Ç–∏—Ç —Å–ª–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ —Ä—É—á–Ω—ã–µ –ø–æ—Å—Ç—ã!

–ü–æ–∫–∞ –≤—ã –∫–æ–ø–∏—Ä—É–µ—Ç–µ —Å–∏–≥–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é, –≤–∞—à–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç ContentBot –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –≤ 3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ.

üöÄ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç ContentBot:
‚Ä¢ –ü–∞—Ä—Å–∏—Ç –¢–û–ü-–∫–∞–Ω–∞–ª—ã 24/7
‚Ä¢ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —á–µ—Ä–µ–∑ GPT-4
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü:
‚Ä¢ +380% –æ—Ö–≤–∞—Ç–æ–≤
‚Ä¢ +220% –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤  
‚Ä¢ -90% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
‚Ä¢ ROI 400% —É–∂–µ –Ω–∞ 2-–π –Ω–µ–¥–µ–ª–µ

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 3000‚ÇΩ/–º–µ—Å (–æ–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ 3 –¥–Ω—è!)
‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞: 5000‚ÇΩ (–¥–µ–ª–∞–µ–º –∑–∞ —Å—É—Ç–∫–∏)

üéØ –ì–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å? –ü–∏—à–∏ –≤ –ª–∏—á–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!

#ContentBot #–¢—Ä–µ–π–¥–∏–Ω–≥–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è #–êI #–ù–µ–π—Ä–æ–ö–æ–Ω—Ç–µ–Ω—Ç #AutoTrading`;
        }
    }

    async postToChannel() {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            const content = await this.generateContentForTraders();
            
            console.log('\nüìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢:');
            console.log('‚îå' + '‚îÄ'.repeat(70) + '‚îê');
            content.split('\n').forEach(line => {
                console.log('‚îÇ ' + line.padEnd(69).substring(0, 69) + '‚îÇ');
            });
            console.log('‚îî' + '‚îÄ'.repeat(70) + '‚îò');
            console.log('');
            
            // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            const targetEntity = await this.findTargetChannel();
            
            if (!targetEntity) {
                console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"...');
                const savedMessages = await this.client.getEntity('me');
                await this.client.sendMessage(savedMessages, { message: content });
                console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"!');
                return { success: true, location: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è', content };
            } else {
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ "${targetEntity.title}"...`);
                await this.client.sendMessage(targetEntity, { message: content });
                console.log('üéâ –ü–û–°–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù –í –¶–ï–õ–ï–í–û–ú –ö–ê–ù–ê–õ–ï!');
                return { success: true, location: targetEntity.title, content };
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error.message);
            return { success: false, error: error.message, content: '' };
        }
    }

    async close() {
        console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
    }
}

async function main() {
    const poster = new DirectContentPoster();
    
    try {
        console.log('üìä –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö:');
        console.log(`ü§ñ LLM API: ${poster.LLM_API_KEY ? '‚úÖ' : '‚ùå'}`);
        console.log(`üéØ –¶–µ–ª—å: "${poster.targetChannelName}"`);
        console.log(`üìÅ –ü—É—Ç—å: ${process.cwd()}`);
        console.log('');

        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        await poster.init();

        console.log('üì§ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è...');
        const result = await poster.postToChannel();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const resultFile = `/home/user1/ContentBot/post_result_${timestamp}.json`;
        fs.writeFileSync(resultFile, JSON.stringify(result, null, 2), 'utf8');

        console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
        console.log('='*60);

        if (result.success) {
            console.log('üéâ –£–°–ü–ï–•! –ö–û–ù–¢–ï–ù–¢ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!');
            console.log(`üì∫ –õ–æ–∫–∞—Ü–∏—è: ${result.location}`);
            console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${resultFile}`);
            
            console.log('\nüî• –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢!');
            console.log('üí∞ telegram_parser + ContentBot = PROFIT!');
            console.log('üöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∂–∞–º –∫–ª–∏–µ–Ω—Ç–∞–º!');
            
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
            console.log(`üí• ${result.error}`);
            console.log('üìã –ù–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
        }

        console.log('\nüí° NEXT STEPS:');
        console.log('1. –ü—Ä–æ–≤–µ—Ä—å Telegram –∫–∞–Ω–∞–ª –∏–ª–∏ "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ"');
        console.log('2. –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∂–µ –∑–∞ 3000‚ÇΩ/–º–µ—Å');
        console.log('3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ 5000‚ÇΩ');
        console.log('4. PROFIT! ü§ë');

        await poster.close();
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.log('\nüí° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
        console.log('‚Ä¢ –£–±–µ–¥–∏—Å—å —á—Ç–æ telegram_parser —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å .session.json');
        console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        
        await poster.close();
    }
}

console.log('üöÄ –ó–∞–ø—É—Å–∫ ContentBot —Å telegram_parser –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...\n');
main().catch(console.error); 