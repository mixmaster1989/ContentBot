require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class AntilopaEventTest {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.antilopaGroupId = -1002686615681;
  }

  async init() {
    try {
      console.log('üîç –¢–µ—Å—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê...');
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –°–ª—É—à–∞–µ–º –í–°–ï —Å–æ–±—ã—Ç–∏—è
      this.client.addEventHandler(async (update) => {
        try {
          console.log(`üì© –°–û–ë–´–¢–ò–ï: ${update.className}`);
          
          if (update instanceof Api.UpdateNewMessage || update instanceof Api.UpdateNewChannelMessage) {
            const message = update.message;
            console.log(`üìù –°–û–û–ë–©–ï–ù–ò–ï: ID=${message.id}, PeerType=${message.peerId?.className}, ChannelID=${message.peerId?.channelId}, Text="${(message.message || '').substring(0, 50)}..."`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≥—Ä—É–ø–ø—É –ê–ù–¢–ò–õ–û–ü–ê
            if (message.peerId?.className === 'PeerChannel') {
              const channelId = String(message.peerId.channelId?.value ?? message.peerId.channelId);
              const targetId = Math.abs(this.antilopaGroupId).toString();
              
              console.log(`üîç Channel ID: ${channelId}, Target: ${targetId}, Match: ${channelId === targetId}`);
              
              if (channelId === targetId) {
                console.log(`üéØ *** –°–û–û–ë–©–ï–ù–ò–ï –ò–ó –ê–ù–¢–ò–õ–û–ü–ê! *** Text: "${message.message}"`);
              }
            }
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è:', error);
        }
      });
      
      console.log('‚úÖ –°–ª—É—à–∞—é –í–°–ï —Å–æ–±—ã—Ç–∏—è Telegram...');
      console.log('üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ –ª—é–±–æ–º —á–∞—Ç–µ/–≥—Ä—É–ø–ø–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }
}

async function testEvents() {
  const test = new AntilopaEventTest();
  
  try {
    await test.init();
    
    // Graceful shutdown
    process.once('SIGINT', () => {
      console.log('\nüõë –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      process.exit(0);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ê–ù–¢–ò–õ–û–ü–ê
    setTimeout(async () => {
      try {
        await test.client.sendMessage(test.antilopaGroupId, { 
          message: 'üß™ –¢–ï–°–¢ –°–û–ë–´–¢–ò–ô - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
        });
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ê–ù–¢–ò–õ–û–ü–ê');
      } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
      }
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

testEvents();
