require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { GlobalChannelFinder } = require('./core/global-channel-finder');

class GlobalSearchTest {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.searchEngine = new GlobalChannelFinder();
  }

  async init() {
    try {
      console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...');
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
      await this.searchEngine.init(this.client);
      console.log('‚úÖ GlobalChannelFinder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async testGlobalSearch(query) {
    try {
      console.log(`\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê: "${query}"`);
      console.log('='.repeat(60));
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
      const results = await this.searchEngine.performGlobalSearch(query, {
        limit: 10,
        timeout: 30000
      });
      
      console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–õ–û–ë–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê:`);
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ: ${results.length} –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø`);
      
      if (results.length === 0) {
        console.log('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return [];
      }
      
      console.log('\nüìã –°–ü–ò–°–û–ö –ù–ê–ô–î–ï–ù–ù–´–• –ö–ê–ù–ê–õ–û–í:');
      console.log('-'.repeat(60));
      
      results.forEach((result, index) => {
        console.log(`${index + 1}. üì∫ ${result.title}`);
        console.log(`   üÜî ID: ${result.id}`);
        console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${result.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üìä –¢–∏–ø: ${result.type}`);
        console.log(`   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}`);
        if (result.username) console.log(`   üë§ Username: @${result.username}`);
        if (result.description) {
          const desc = result.description.length > 100 
            ? result.description.substring(0, 100) + '...'
            : result.description;
          console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${desc}`);
        }
        console.log('');
      });
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  async testComprewehensiveSearch(query) {
    try {
      console.log(`\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ü–û–ò–°–ö–ê: "${query}"`);
      console.log('='.repeat(60));
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫
      const results = await this.searchEngine.comprehensiveSearch(query, {
        maxResults: 15,
        deepSearch: true,
        timeout: 30000
      });
      
      console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ü–û–ò–°–ö–ê:`);
      console.log(`üìà –ù–∞–π–¥–µ–Ω–æ: ${results.length} –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø`);
      
      if (results.length === 0) {
        console.log('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return [];
      }
      
      console.log('\nüìã –°–ü–ò–°–û–ö –ù–ê–ô–î–ï–ù–ù–´–• –ö–ê–ù–ê–õ–û–í:');
      console.log('-'.repeat(60));
      
      results.forEach((result, index) => {
        console.log(`${index + 1}. üì∫ ${result.title}`);
        console.log(`   üÜî ID: ${result.id}`);
        console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${result.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`   üìä –¢–∏–ø: ${result.type}`);
        console.log(`   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.category}`);
        if (result.username) console.log(`   üë§ Username: @${result.username}`);
        console.log('');
      });
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  async runAllTests() {
    const testQueries = [
      'telegram',
      '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 
      'bitcoin',
      '–Ω–æ–≤–æ—Å—Ç–∏',
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
    ];
    
    console.log('üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–ò–°–ö–ê');
    console.log('='.repeat(70));
    
    for (let query of testQueries) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
      const globalResults = await this.testGlobalSearch(query);
      
      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫
      const comprehensiveResults = await this.testComprewehensiveSearch(query);
      
      console.log(`\nüìà –°–í–û–î–ö–ê –î–õ–Ø –ó–ê–ü–†–û–°–ê "${query}":`);
      console.log(`   üåê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: ${globalResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      console.log(`   üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫: ${comprehensiveResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      console.log('');
      
      // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´');
  }
}

async function runSearchTests() {
  const tester = new GlobalSearchTest();
  
  try {
    await tester.init();
    
    // –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
    if (process.argv[2]) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const query = process.argv.slice(2).join(' ');
      await tester.testGlobalSearch(query);
      await tester.testComprewehensiveSearch(query);
    } else {
      // –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
      await tester.runAllTests();
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

runSearchTests();
