require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const axios = require('axios');

class MilitaristDetailedSummarizer {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.militaristChannelId = -1001111348665; // ID –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
  async getMessages() {
    try {
      console.log('üìÖ –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"...');
      
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: this.militaristChannelId,
          limit: 100,
          offsetDate: 0,
          offsetId: 0,
          maxId: 0,
          minId: 0,
          addOffset: 0,
          hash: 0n
        })
      );

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–∫—Å—Ç–∞
      const filteredMessages = messages.messages
        .filter(msg => 
          msg.message && 
          msg.message.length > 30 // –ú–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤
        )
        .map(msg => ({
          id: msg.id,
          text: msg.message,
          date: new Date(msg.date * 1000),
          views: msg.views || 0,
          timestamp: msg.date * 1000
        }))
        .sort((a, b) => b.timestamp - a.timestamp); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)

      console.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredMessages.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      return filteredMessages;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
  async createDetailedSummary(messages) {
    try {
      console.log('ü§ñ –°–æ–∑–¥–∞—é –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É...');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º
      const topics = this.analyzeTopics(messages);
      
      // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Ç–µ–º–∞–º
      let summary = `üéØ –°–í–û–î–ö–ê –ö–ê–ù–ê–õ–ê "–ú–ò–õ–ò–¢–ê–†–ò–°–¢"\n`;
      summary += `üìÖ –ü–µ—Ä–∏–æ–¥: ${messages[messages.length - 1]?.date.toLocaleString('ru')} - ${messages[0]?.date.toLocaleString('ru')}\n`;
      summary += `üìù –°–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}\n`;
      summary += `üëÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${messages.reduce((sum, msg) => sum + msg.views, 0).toLocaleString()}\n\n`;
      
      summary += `üìä –û–°–ù–û–í–ù–´–ï –¢–ï–ú–´:\n`;
      summary += `================\n\n`;
      
      for (let topic of topics) {
        summary += `üî∏ ${topic.name}: ${topic.count} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
        summary += `   –ü—Ä–∏–º–µ—Ä—ã: ${topic.examples.join(', ')}\n\n`;
      }
      
      summary += `üìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:\n`;
      summary += `===================\n\n`;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ø-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º
      const topMessages = messages
        .sort((a, b) => b.views - a.views)
        .slice(0, 10);
      
      summary += `üî• –¢–û–ü-10 –°–û–û–ë–©–ï–ù–ò–ô –ü–û –ü–†–û–°–ú–û–¢–†–ê–ú:\n`;
      topMessages.forEach((msg, index) => {
        const text = msg.text.length > 100 ? msg.text.substring(0, 100) + '...' : msg.text;
        summary += `${index + 1}. [${msg.views.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤] ${text}\n`;
        summary += `   üìÖ ${msg.date.toLocaleString('ru')}\n\n`;
      });
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      const hourlyActivity = this.analyzeHourlyActivity(messages);
      summary += `‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú:\n`;
      summary += `=====================\n`;
      hourlyActivity.forEach((hour, index) => {
        summary += `${hour.hour}:00 - ${hour.count} —Å–æ–æ–±—â–µ–Ω–∏–π\n`;
      });
      
      summary += `\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`;
      summary += `==============\n`;
      summary += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç: ${Math.round(messages.reduce((sum, msg) => sum + msg.views, 0) / messages.length).toLocaleString()}\n`;
      summary += `‚Ä¢ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –ø–æ—Å—Ç: ${Math.max(...messages.map(m => m.views)).toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n`;
      summary += `‚Ä¢ –û–±—â–∏–π –æ—Ö–≤–∞—Ç: ${messages.reduce((sum, msg) => sum + msg.views, 0).toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n`;
      
      return summary;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
      return `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏: ${error.message}`;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
  analyzeTopics(messages) {
    const topics = {
      '–í–æ–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏': { count: 0, examples: [] },
      '–í–æ–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': { count: 0, examples: [] },
      '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã': { count: 0, examples: [] },
      '–¢–µ—Ä—Ä–æ—Ä–∏–∑–º': { count: 0, examples: [] },
      '–û–±–æ—Ä–æ–Ω–∞': { count: 0, examples: [] },
      '–†–∞–∑–≤–µ–¥–∫–∞': { count: 0, examples: [] }
    };

    const keywords = {
      '–í–æ–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏': ['–æ–ø–µ—Ä–∞—Ü–∏—è', '–Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–∞—Ç–∞–∫–∞', '–æ–±–æ—Ä–æ–Ω–∞', '–ø–æ–∑–∏—Ü–∏–∏', '—Ñ—Ä–æ–Ω—Ç'],
      '–í–æ–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–∞–Ω–∫', '–±—Ä–æ–Ω—è', '—Ä–∞–∫–µ—Ç–∞', '–¥—Ä–æ–Ω', '—Å–∞–º–æ–ª–µ—Ç', '–≤–µ—Ä—Ç–æ–ª–µ—Ç', '–æ—Ä—É–∂–∏–µ'],
      '–ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã': ['–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–≤–æ–π–Ω–∞', '—Å—Ä–∞–∂–µ–Ω–∏–µ', '–±–æ–∏', '—Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ'],
      '–¢–µ—Ä—Ä–æ—Ä–∏–∑–º': ['—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç', '—Ç–µ—Ä—Ä–æ—Ä', '–≤–∑—Ä—ã–≤', '—Ç–µ—Ä–∞–∫—Ç', '–¥–∂–∏—Ö–∞–¥'],
      '–û–±–æ—Ä–æ–Ω–∞': ['–æ–±–æ—Ä–æ–Ω–∞', '–∑–∞—â–∏—Ç–∞', '—É–∫—Ä–µ–ø–ª–µ–Ω–∏—è', '–ø–æ–∑–∏—Ü–∏–∏'],
      '–†–∞–∑–≤–µ–¥–∫–∞': ['—Ä–∞–∑–≤–µ–¥–∫–∞', '—à–ø–∏–æ–Ω', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–¥–∞–Ω–Ω—ã–µ']
    };

    messages.forEach(msg => {
      const text = msg.text.toLowerCase();
      const shortText = msg.text.length > 50 ? msg.text.substring(0, 50) + '...' : msg.text;
      
      for (let [topic, words] of Object.entries(keywords)) {
        if (words.some(word => text.includes(word))) {
          topics[topic].count++;
          if (topics[topic].examples.length < 3) {
            topics[topic].examples.push(shortText);
          }
        }
      }
    });

    return Object.entries(topics)
      .map(([name, data]) => ({ name, count: data.count, examples: data.examples }))
      .filter(topic => topic.count > 0)
      .sort((a, b) => b.count - a.count);
  }

  // –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ —á–∞—Å–∞–º
  analyzeHourlyActivity(messages) {
    const hourly = {};
    
    messages.forEach(msg => {
      const hour = msg.date.getHours();
      hourly[hour] = (hourly[hour] || 0) + 1;
    });

    return Object.entries(hourly)
      .map(([hour, count]) => ({ hour: hour.padStart(2, '0'), count }))
      .sort((a, b) => b.count - a.count);
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–¥–∫—É –≤ —Ñ–∞–π–ª
  async saveSummary(summary) {
    try {
      const fs = require('fs').promises;
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `militarist_detailed_summary_${timestamp}.txt`;
      
      await fs.writeFile(filename, summary, 'utf8');
      console.log(`üíæ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${filename}`);
      
      return filename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function createDetailedSummary() {
  const summarizer = new MilitaristDetailedSummarizer();
  
  try {
    await summarizer.init();
    
    console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"');
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = await summarizer.getMessages();
    
    if (messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
    const summary = await summarizer.createDetailedSummary(messages);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '='.repeat(80));
    console.log(summary);
    console.log('='.repeat(80));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    await summarizer.saveSummary(summary);
    
    console.log('\n‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await summarizer.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏
if (require.main === module) {
  createDetailedSummary();
}

module.exports = { MilitaristDetailedSummarizer };
