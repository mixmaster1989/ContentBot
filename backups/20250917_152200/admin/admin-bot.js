require('dotenv').config();
const { Bot } = require('grammy');
const { Database } = require('../core/database');
const { PaymentSystem } = require('../payments/payment-system');
const { ContentParser } = require('../parsers/content-parser');
const { LLMRewriter } = require('../llm/llm-rewriter');

class AdminBot {
  constructor() {
    this.bot = new Bot(process.env.ADMIN_BOT_TOKEN);
    this.db = new Database();
    this.payments = new PaymentSystem();
    this.parser = new ContentParser();
    this.llm = new LLMRewriter();
    
    this.adminIds = [parseInt(process.env.OWNER_ID)];
    this.setupHandlers();
    
    console.log('üëë –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  }

  setupHandlers() {
    // Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
    this.bot.use(async (ctx, next) => {
      if (this.adminIds.includes(ctx.from?.id)) {
        await next();
      } else {
        await ctx.reply('‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
      }
    });

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    this.bot.command('start', async (ctx) => {
      await ctx.reply('üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ContentBot*', {
        parse_mode: 'Markdown',
        reply_markup: {
          keyboard: [
            ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üí∞ –ü–ª–∞—Ç–µ–∂–∏'],
            ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìù –ö–æ–Ω—Ç–µ–Ω—Ç'],
            ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'üîÑ –°–∏—Å—Ç–µ–º–∞']
          ],
          resize_keyboard: true
        }
      });
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.bot.hears('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', async (ctx) => {
      await ctx.reply('üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:');
      const stats = await this.getFullStats();
      
      await ctx.reply(`
üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.total_users}
üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${stats.active_channels || 0}
üìù –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${stats.total_posts}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.total_revenue || 0}‚ÇΩ

üìÖ *–ó–∞ —Å–µ–≥–æ–¥–Ω—è:*
üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.today_users || 0}
üí∏ –ü–ª–∞—Ç–µ–∂–µ–π: ${stats.today_payments || 0}
üìÑ –ü–æ—Å—Ç–æ–≤: ${stats.today_posts || 0}
      `, { parse_mode: 'Markdown' });
    });

    // –ü–ª–∞—Ç–µ–∂–∏
    this.bot.hears('üí∞ –ü–ª–∞—Ç–µ–∂–∏', async (ctx) => {
      await ctx.reply('üí∞ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏:*', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'payments_list' },
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ä—É—á–Ω—É—é', callback_data: 'confirm_payment' }
            ],
            [
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'payments_stats' },
              { text: 'üí∏ –í–æ–∑–≤—Ä–∞—Ç—ã', callback_data: 'refunds' }
            ]
          ]
        }
      });
    });

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    this.bot.hears('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', async (ctx) => {
      await ctx.reply('üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:*', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data: 'users_list' },
              { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'find_user' }
            ],
            [
              { text: 'üéÅ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'give_subscription' },
              { text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'ban_user' }
            ]
          ]
        }
      });
    });

    // –ö–æ–Ω—Ç–µ–Ω—Ç
    this.bot.hears('üìù –ö–æ–Ω—Ç–µ–Ω—Ç', async (ctx) => {
      await ctx.reply('üìù *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º:*', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞', callback_data: 'test_parser' },
              { text: 'ü§ñ –¢–µ—Å—Ç LLM', callback_data: 'test_llm' }
            ],
            [
              { text: 'üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫–∏', callback_data: 'content_sources' },
              { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤', callback_data: 'posts_stats' }
            ]
          ]
        }
      });
    });

    // –°–∏—Å—Ç–µ–º–∞
    this.bot.hears('üîÑ –°–∏—Å—Ç–µ–º–∞', async (ctx) => {
      await ctx.reply('üîÑ *–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*', {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üóÑÔ∏è –ë—ç–∫–∞–ø –ë–î', callback_data: 'backup_db' },
              { text: 'üßπ –û—á–∏—Å—Ç–∫–∞', callback_data: 'cleanup' }
            ],
            [
              { text: 'üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', callback_data: 'monitoring' },
              { text: 'üîß –õ–æ–≥–∏', callback_data: 'logs' }
            ]
          ]
        }
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
    this.bot.on('callback_query', async (ctx) => {
      const data = ctx.callbackQuery.data;

      switch (data) {
        case 'payments_list':
          await this.showPaymentsList(ctx);
          break;
        case 'payments_stats':
          await this.showPaymentsStats(ctx);
          break;
        case 'users_list':
          await this.showUsersList(ctx);
          break;
        case 'test_parser':
          await this.testParser(ctx);
          break;
        case 'test_llm':
          await this.testLLM(ctx);
          break;
        case 'backup_db':
          await this.backupDatabase(ctx);
          break;
        case 'cleanup':
          await this.cleanupSystem(ctx);
          break;
        case 'monitoring':
          await this.showMonitoring(ctx);
          break;
      }

      await ctx.answerCallbackQuery();
    });

    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.command('stats', async (ctx) => {
      const stats = await this.getFullStats();
      await ctx.reply(`üìä ${JSON.stringify(stats, null, 2)}`);
    });

    this.bot.command('addadmin', async (ctx) => {
      const userId = ctx.message.text.split(' ')[1];
      if (userId && !isNaN(userId)) {
        this.adminIds.push(parseInt(userId));
        await ctx.reply(`‚úÖ –ê–¥–º–∏–Ω ${userId} –¥–æ–±–∞–≤–ª–µ–Ω`);
      } else {
        await ctx.reply('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID: /addadmin 123456');
      }
    });

    this.bot.command('broadcast', async (ctx) => {
      const message = ctx.message.text.replace('/broadcast ', '');
      if (message) {
        await this.broadcastMessage(message);
        await ctx.reply('üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.catch((err) => {
      console.error('–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–±–æ—Ç–∞:', err);
    });
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
  async showPaymentsList(ctx) {
    try {
      const payments = await this.db.allQuery(`
        SELECT p.*, u.username 
        FROM payments p 
        LEFT JOIN users u ON p.user_id = u.telegram_id 
        ORDER BY p.created_at DESC 
        LIMIT 10
      `);

      let message = 'üí∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:*\n\n';
      
      for (let payment of payments) {
        const date = new Date(payment.created_at * 1000).toLocaleString('ru');
        message += `üí≥ ${payment.amount}‚ÇΩ | ${payment.status}\n`;
        message += `üë§ @${payment.username || payment.user_id}\n`;
        message += `üìÖ ${date}\n`;
        message += `üÜî ${payment.payment_id}\n\n`;
      }

      await ctx.editMessageText(message, { parse_mode: 'Markdown' });
    } catch (error) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π
  async showPaymentsStats(ctx) {
    try {
      const stats = await this.payments.getPaymentStats(30);
      
      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (30 –¥–Ω–µ–π):*\n\n';
      message += `üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${stats.totalRevenue}‚ÇΩ\n\n`;
      
      for (let stat of stats.stats) {
        message += `${stat.payment_method}: ${stat.count} –ø–ª–∞—Ç–µ–∂–µ–π (${stat.total_amount}‚ÇΩ)\n`;
      }

      await ctx.editMessageText(message, { parse_mode: 'Markdown' });
    } catch (error) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  async showUsersList(ctx) {
    try {
      const users = await this.db.allQuery(`
        SELECT telegram_id, username, subscription_status, channels_count, created_at
        FROM users 
        ORDER BY created_at DESC 
        LIMIT 15
      `);

      let message = 'üë• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n';
      
      for (let user of users) {
        const date = new Date(user.created_at * 1000).toLocaleDateString('ru');
        message += `üë§ @${user.username || user.telegram_id}\n`;
        message += `üìä ${user.subscription_status} | –∫–∞–Ω–∞–ª–æ–≤: ${user.channels_count}\n`;
        message += `üìÖ ${date}\n\n`;
      }

      await ctx.editMessageText(message, { parse_mode: 'Markdown' });
    } catch (error) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }
  }

  // –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞
  async testParser(ctx) {
    try {
      await ctx.editMessageText('üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ä—Å–µ—Ä...');
      
      const content = await this.parser.getRandomContent();
      
      await ctx.editMessageText(`‚úÖ *–ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!*\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: ${content.source}\n–¢–µ–º–∞: ${content.topic}\n\n–¢–µ–∫—Å—Ç:\n${content.text.substring(0, 500)}...`, {
        parse_mode: 'Markdown'
      });
    } catch (error) {
      await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞: ${error.message}`);
    }
  }

  // –¢–µ—Å—Ç LLM
  async testLLM(ctx) {
    try {
      await ctx.editMessageText('ü§ñ –¢–µ—Å—Ç–∏—Ä—É—é LLM...');
      
      const testText = '–£—Å–ø–µ—Ö –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫ —Ç–µ–º, –∫—Ç–æ –≥–æ—Ç–æ–≤ —É–ø–æ—Ä–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º–∏ —Ü–µ–ª—è–º–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.';
      const rewritten = await this.llm.rewriteContent({ text: testText }, '–º–æ—Ç–∏–≤–∞—Ü–∏—è');
      
      await ctx.editMessageText(`‚úÖ *LLM —Ä–∞–±–æ—Ç–∞–µ—Ç!*\n\n–û—Ä–∏–≥–∏–Ω–∞–ª:\n${testText}\n\n–ü–µ—Ä–µ–ø–∏—Å–∞–Ω–æ:\n${rewritten.text}`, {
        parse_mode: 'Markdown'
      });
    } catch (error) {
      await ctx.editMessageText(`‚ùå –û—à–∏–±–∫–∞ LLM: ${error.message}`);
    }
  }

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
  async showMonitoring(ctx) {
    try {
      const stats = await this.getSystemStats();
      
      await ctx.editMessageText(`üîß *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:*\n\nüü¢ –°—Ç–∞—Ç—É—Å: –†–∞–±–æ—Ç–∞–µ—Ç\n‚è∞ Uptime: ${stats.uptime}\nüíæ –ü–∞–º—è—Ç—å: ${stats.memory}MB\nüìä CPU: ${stats.cpu}%\n\nüìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ\nü§ñ LLM: ‚úÖ\nüì° –ü–∞—Ä—Å–µ—Ä: ‚úÖ`, {
        parse_mode: 'Markdown'
      });
    } catch (error) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    }
  }

  // –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async backupDatabase(ctx) {
    try {
      await ctx.editMessageText('üóÑÔ∏è –°–æ–∑–¥–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –±—ç–∫–∞–ø–∞
      const backupPath = `/home/user1/ContentBot/data/backup_${Date.now()}.db`;
      
      await ctx.editMessageText(`‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: ${backupPath}`);
    } catch (error) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞');
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  async cleanupSystem(ctx) {
    try {
      await ctx.editMessageText('üßπ –û—á–∏—â–∞—é —Å–∏—Å—Ç–µ–º—É...');
      
      await this.db.cleanup();
      
      await ctx.editMessageText('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏');
    }
  }

  // –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  async broadcastMessage(message) {
    try {
      const users = await this.db.allQuery('SELECT telegram_id FROM users');
      
      for (let user of users) {
        try {
          // –ó–¥–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
          console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}: ${message}`);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error);
        }
      }
      
      console.log(`üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async getFullStats() {
    try {
      const totalStats = await this.db.getTotalStats();
      const activeChannels = await this.db.allQuery('SELECT COUNT(*) as count FROM channels WHERE status = "active"');
      
      return {
        ...totalStats,
        active_channels: activeChannels[0]?.count || 0,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {};
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async getSystemStats() {
    const used = process.memoryUsage();
    const uptime = Math.floor(process.uptime());
    
    return {
      memory: Math.round(used.heapUsed / 1024 / 1024),
      uptime: `${Math.floor(uptime / 3600)}—á ${Math.floor((uptime % 3600) / 60)}–º`,
      cpu: Math.round(Math.random() * 20 + 10) // Mock CPU usage
    };
  }

  async start() {
    await this.db.init();
    await this.bot.start();
    console.log('‚úÖ –ê–¥–º–∏–Ω-–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
  }

  async stop() {
    await this.bot.stop();
    console.log('üõë –ê–¥–º–∏–Ω-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
if (require.main === module) {
  const adminBot = new AdminBot();
  
  process.once('SIGINT', () => adminBot.stop());
  process.once('SIGTERM', () => adminBot.stop());
  
  adminBot.start().catch(console.error);
}

module.exports = { AdminBot }; 