/**
 * –ù–ê–°–¢–û–Ø–©–ò–ô –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ü–û TELEGRAM
 * 
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ –∏–∑ telegram_parser/global_channel_search.js
 * –ò—â–µ—Ç –ü–û –í–°–ï–ú–£ –¢–ï–õ–ï–ì–†–ê–ú–£, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –ø–æ–¥–ø–∏—Å–æ–∫!
 */

const { Api } = require('telegram');

class RealGlobalSearch {
  constructor() {
    this.client = null;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    this.config = {
      searchDelay: 1000,        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏ (–º—Å)
      maxResultsPerKeyword: 20, // –ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
      minSubscribers: 100,      // –ú–∏–Ω–∏–º—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤  
      maxSubscribers: 10000000, // –ú–∞–∫—Å–∏–º—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      blacklistWords: ['scam', 'fake', 'spam', 'pump', 'dump']
    };
  }

  async init(mtClient) {
    try {
      this.client = mtClient;
      console.log('‚úÖ RealGlobalSearch –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RealGlobalSearch:', error);
      throw error;
    }
  }

  /**
   * –ù–ê–°–¢–û–Ø–©–ò–ô –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É Telegram
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
   * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
   */
  async searchChannels(query, options = {}) {
    try {
      console.log(`üîç –ù–ê–°–¢–û–Ø–©–ò–ô –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);
      
      const limit = Math.min(options.limit || this.config.maxResultsPerKeyword, 50);
      
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú contacts.Search - –∏—â–µ—Ç –ü–û –í–°–ï–ú–£ –¢–ï–õ–ï–ì–†–ê–ú–£!
      const searchResult = await this.client.invoke(
        new Api.contacts.Search({
          q: query,
          limit
        })
      );
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: ${searchResult.chats?.length || 0}`);
      
      const results = [];
      
      if (searchResult.chats && searchResult.chats.length > 0) {
        for (const chat of searchResult.chats) {
          if (this.isValidChannel(chat, options)) {
            const formatted = this.formatChannelResult(chat, query);
            results.push(formatted);
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: ${formatted.title} (${formatted.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
          }
        }
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
      const filtered = this.filterByMetrics(results);
      console.log(`üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filtered.length} –∫–∞–Ω–∞–ª–æ–≤`);
      
      return filtered;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
   */
  isValidChannel(chat, options = {}) {
    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π
    if (chat.className !== 'Channel' && chat.className !== 'Chat') {
      return false;
    }

    // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º –∏–ª–∏ –∏–º–µ—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (!chat.username && (!chat.participantsCount || chat.participantsCount === 0)) {
      return false;
    }

    // –ù–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω
    if (chat.deactivated || chat.forbidden) {
      return false;
    }

    return true;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–Ω–∞–ª–∞
   */
  formatChannelResult(chat, foundBy) {
    return {
      id: chat.id.toString(),
      title: chat.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      username: chat.username || null,
      participantsCount: chat.participantsCount || 0,
      description: chat.about || '',
      type: chat.className === 'Channel' ? 'channel' : 'group',
      category: this.categorizeChannel(chat.title, chat.about),
      foundBy: foundBy,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
   */
  categorizeChannel(title, description) {
    const text = `${title} ${description}`.toLowerCase();
    
    if (text.match(/–∫—Ä–∏–ø—Ç|crypto|bitcoin|btc|eth|trading|—Å–∏–≥–Ω–∞–ª|signal/)) {
      return '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã';
    }
    if (text.match(/–Ω–æ–≤–æ—Å—Ç–∏|news|—Ä–±–∫|–ª–µ–Ω—Ç–∞|—Ç–∞—Å—Å/)) {
      return '–Ω–æ–≤–æ—Å—Ç–∏';
    }
    if (text.match(/—Ç–µ—Ö–Ω–æ–ª–æ–≥|tech|–ø—Ä–æ–≥—Ä–∞–º–º|ai|it|—Ä–∞–∑—Ä–∞–±–æ—Ç/)) {
      return '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
    }
    if (text.match(/–±–∏–∑–Ω–µ—Å|business|—Å—Ç–∞—Ä—Ç–∞–ø|startup|–∏–Ω–≤–µ—Å—Ç/)) {
      return '–±–∏–∑–Ω–µ—Å';
    }
    if (text.match(/–≥–æ—Ä–æ—Å–∫–æ–ø|–∞—Å—Ç—Ä–æ–ª–æ–≥|–∑–æ–¥–∏–∞–∫|horoscope|astro/)) {
      return '–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è';
    }
    
    return '–æ–±—â–µ–µ';
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
   */
  filterByMetrics(channels) {
    return channels.filter(channel => {
      const participants = channel.participantsCount || 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
      if (participants < this.config.minSubscribers || 
          participants > this.config.maxSubscribers) {
        return false;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
      const titleLower = (channel.title || '').toLowerCase();
      const descLower = (channel.description || '').toLowerCase();
      
      for (const blackWord of this.config.blacklistWords) {
        if (titleLower.includes(blackWord) || descLower.includes(blackWord)) {
          return false;
        }
      }
      
      return true;
    });
  }

  /**
   * –ü–æ–∏—Å–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
   */
  async searchMultipleKeywords(keywords, theme = 'general') {
    console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ "${theme}" —Å ${keywords.length} –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏`);
    
    const allResults = [];
    
    for (const keyword of keywords) {
      try {
        const results = await this.searchChannels(keyword);
        allResults.push(...results);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
        if (keywords.indexOf(keyword) < keywords.length - 1) {
          await this.delay(this.config.searchDelay);
        }
        
      } catch (error) {
        console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ "${keyword}":`, error.message);
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const unique = this.removeDuplicates(allResults);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${unique.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ç–µ–º–µ "${theme}"`);
    
    return unique;
  }

  /**
   * –£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
   */
  removeDuplicates(channels) {
    const seen = new Set();
    return channels.filter(channel => {
      const key = channel.id || channel.username || channel.title;
      if (seen.has(key)) {
        return false;
      }
      seen.add(key);
      return true;
    });
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
   */
  formatResultsForChat(channels, query) {
    if (!channels || channels.length === 0) {
      return `‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –ü–æ–∏—Å–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ`;
    }

    let message = `üîç –ù–∞–π–¥–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}":\n\n`;
    
    channels.slice(0, 10).forEach((channel, index) => {
      message += `${index + 1}. üì∫ **${channel.title}**\n`;
      if (channel.username) {
        message += `   üîó @${channel.username}\n`;
      }
      message += `   üë• ${channel.participantsCount.toLocaleString()} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
      message += `   üè∑Ô∏è ${channel.category}\n`;
      if (channel.description && channel.description.length > 0) {
        const desc = channel.description.length > 100 
          ? channel.description.substring(0, 100) + '...'
          : channel.description;
        message += `   üìù ${desc}\n`;
      }
      message += '\n';
    });

    if (channels.length > 10) {
      message += `\n... –∏ –µ—â–µ ${channels.length - 10} –∫–∞–Ω–∞–ª–æ–≤`;
    }

    return message;
  }
}

module.exports = RealGlobalSearch;
