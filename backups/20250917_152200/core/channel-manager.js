const { Api } = require('telegram');
const { Database } = require('./database');

class ChannelManager {
  constructor() {
    this.db = new Database();
    this.client = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    this.postingQueue = new Map(); // –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–∏–Ω–≥–∞
    this.rateLimits = new Map(); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç–æ—Ç–µ
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
  async init(telegramClient) {
    this.client = telegramClient;
    console.log('üì∫ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  async addChannel(userId, channelId, channelName, topic = '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π', style = '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π') {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
      const hasAccess = await this.checkChannelAccess(channelId);
      
      if (!hasAccess) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –ë–î
      const result = await this.db.createChannel(userId, channelId, channelName, topic, style);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞
      await this.initChannelSettings(channelId);
      
      console.log(`‚úÖ –ö–∞–Ω–∞–ª ${channelName} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      return result;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
  async checkChannelAccess(channelId) {
    try {
      if (!this.client) return false;

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
      const channel = await this.client.invoke(
        new Api.channels.GetChannels({ id: [channelId] })
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const adminRights = await this.client.invoke(
        new Api.channels.GetParticipant({
          channel: channelId,
          participant: 'me'
        })
      );

      return adminRights && adminRights.participant?.adminRights?.postMessages;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É:', error);
      return false;
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞
  async initChannelSettings(channelId) {
    this.rateLimits.set(channelId, {
      lastPost: 0,
      minInterval: 30 * 60 * 1000, // 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
      dailyLimit: 10,
      dailyCount: 0,
      lastResetDate: new Date().toDateString()
    });
  }

  // –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª
  async postToChannel(channelId, content, options = {}) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
      if (!this.checkRateLimits(channelId)) {
        console.log(`‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}`);
        return false;
      }

      if (!this.client) {
        throw new Error('Telegram –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = this.formatMessage(content, options);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
      const result = await this.client.invoke(
        new Api.messages.SendMessage({
          peer: channelId,
          message: message,
          parseMode: 'markdown'
        })
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
      this.updateRateLimits(channelId);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î
      await this.db.savePost(channelId, message, content.originalText || null, content.style || null);

      console.log(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª ${channelId}`);
      return result;

    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª ${channelId}:`, error);
      return false;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ—Å—Ç–∏–Ω–≥–∞
  checkRateLimits(channelId) {
    const limits = this.rateLimits.get(channelId);
    if (!limits) return true;

    const now = Date.now();
    const today = new Date().toDateString();

    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (limits.lastResetDate !== today) {
      limits.dailyCount = 0;
      limits.lastResetDate = today;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
    if (limits.dailyCount >= limits.dailyLimit) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
    if (now - limits.lastPost < limits.minInterval) {
      return false;
    }

    return true;
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç–∞
  updateRateLimits(channelId) {
    const limits = this.rateLimits.get(channelId);
    if (limits) {
      limits.lastPost = Date.now();
      limits.dailyCount += 1;
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  formatMessage(content, options = {}) {
    let message = content.text || content;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –±–æ—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (options.addSignature) {
      message += '\n\nü§ñ _–ê–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç ContentBot_';
    }

    // –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
    if (message.length > 4000) {
      message = message.substring(0, 3950) + '...';
    }

    return message;
  }

  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
  async schedulePost(channelId, content, publishTime) {
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
      if (!this.postingQueue.has(channelId)) {
        this.postingQueue.set(channelId, []);
      }

      this.postingQueue.get(channelId).push({
        content,
        publishTime,
        id: Date.now()
      });

      console.log(`üìÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId} –Ω–∞ ${new Date(publishTime)}`);
      return true;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
      return false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Å—Ç–æ–≤
  async processPostingQueue() {
    const now = Date.now();

    for (let [channelId, queue] of this.postingQueue) {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      const readyPosts = queue.filter(post => post.publishTime <= now);

      for (let post of readyPosts) {
        try {
          await this.postToChannel(channelId, post.content);
          
          // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          const index = queue.findIndex(p => p.id === post.id);
          if (index > -1) {
            queue.splice(index, 1);
          }

        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞:`, error);
        }
      }
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
  async getChannelStats(channelId) {
    try {
      const channel = await this.db.getQuery(
        'SELECT * FROM channels WHERE channel_id = ?',
        [channelId]
      );

      if (!channel) {
        return null;
      }

      const posts = await this.db.getChannelPosts(channelId, 30);
      const limits = this.rateLimits.get(channelId);

      return {
        ...channel,
        recentPosts: posts.length,
        todayPosts: limits?.dailyCount || 0,
        dailyLimit: limits?.dailyLimit || 10,
        lastPost: limits?.lastPost || 0,
        queueSize: this.postingQueue.get(channelId)?.length || 0
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞:', error);
      return null;
    }
  }

  // –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
  async updateChannelSettings(channelId, settings) {
    try {
      const { topic, style, dailyLimit, minInterval } = settings;

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
      if (topic || style) {
        await this.db.runQuery(
          'UPDATE channels SET topic = COALESCE(?, topic), style = COALESCE(?, style) WHERE channel_id = ?',
          [topic, style, channelId]
        );
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã
      const limits = this.rateLimits.get(channelId);
      if (limits) {
        if (dailyLimit) limits.dailyLimit = dailyLimit;
        if (minInterval) limits.minInterval = minInterval * 60 * 1000; // –≤ –º–∏–Ω—É—Ç–∞—Ö
      }

      console.log(`‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channelId} –æ–±–Ω–æ–≤–ª–µ–Ω—ã`);
      return true;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–∞–Ω–∞–ª–∞:', error);
      return false;
    }
  }

  // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª
  async toggleChannelStatus(channelId, status) {
    try {
      await this.db.runQuery(
        'UPDATE channels SET status = ? WHERE channel_id = ?',
        [status, channelId]
      );

      console.log(`üì∫ –ö–∞–Ω–∞–ª ${channelId} ${status === 'active' ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`);
      return true;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–∞–ª–∞:', error);
      return false;
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª
  async removeChannel(channelId, userId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
      const channel = await this.db.getQuery(
        'SELECT user_id FROM channels WHERE channel_id = ?',
        [channelId]
      );

      if (!channel || channel.user_id !== userId) {
        throw new Error('–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞');
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
      await this.db.runQuery('DELETE FROM channels WHERE channel_id = ?', [channelId]);

      // –û—á–∏—â–∞–µ–º –ª–∏–º–∏—Ç—ã –∏ –æ—á–µ—Ä–µ–¥–∏
      this.rateLimits.delete(channelId);
      this.postingQueue.delete(channelId);

      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.db.runQuery(
        'UPDATE users SET channels_count = channels_count - 1 WHERE telegram_id = ?',
        [userId]
      );

      console.log(`üóëÔ∏è –ö–∞–Ω–∞–ª ${channelId} —É–¥–∞–ª–µ–Ω`);
      return true;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:', error);
      return false;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserChannels(userId) {
    try {
      const channels = await this.db.getUserChannels(userId);
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
      for (let channel of channels) {
        const stats = await this.getChannelStats(channel.channel_id);
        Object.assign(channel, stats);
      }

      return channels;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
  async broadcastToChannels(content, channelIds = []) {
    try {
      const results = [];

      for (let channelId of channelIds) {
        try {
          const result = await this.postToChannel(channelId, content);
          results.push({ channelId, success: !!result });
        } catch (error) {
          results.push({ channelId, success: false, error: error.message });
        }
      }

      return results;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
      return [];
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ—Å—Ç–∞
  async getBestPostingTime(channelId) {
    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å—Ç–æ–≤
      const posts = await this.db.allQuery(`
        SELECT posted_at, views, likes 
        FROM posts 
        WHERE channel_id = ? AND posted_at > strftime('%s', 'now', '-30 days')
        ORDER BY (views + likes * 10) DESC
        LIMIT 10
      `, [channelId]);

      if (posts.length < 3) {
        // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        return this.getDefaultPostingTime();
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—ã —Å –ª—É—á—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      const hourStats = {};
      posts.forEach(post => {
        const hour = new Date(post.posted_at * 1000).getHours();
        if (!hourStats[hour]) hourStats[hour] = { count: 0, engagement: 0 };
        hourStats[hour].count++;
        hourStats[hour].engagement += (post.views || 0) + (post.likes || 0) * 10;
      });

      // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —á–∞—Å
      const bestHour = Object.entries(hourStats)
        .sort(([,a], [,b]) => b.engagement - a.engagement)[0][0];

      const now = new Date();
      const nextPost = new Date();
      nextPost.setHours(parseInt(bestHour), 0, 0, 0);
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
      if (nextPost <= now) {
        nextPost.setDate(nextPost.getDate() + 1);
      }

      return nextPost.getTime();

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞:', error);
      return this.getDefaultPostingTime();
    }
  }

  // –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞
  getDefaultPostingTime() {
    const now = new Date();
    const nextHour = new Date(now.getTime() + 60 * 60 * 1000); // +1 —á–∞—Å
    return nextHour.getTime();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  getManagerStats() {
    return {
      totalChannels: this.rateLimits.size,
      activeQueues: Array.from(this.postingQueue.values()).reduce((sum, queue) => sum + queue.length, 0),
      rateLimitsActive: this.rateLimits.size
    };
  }
}

module.exports = { ChannelManager }; 