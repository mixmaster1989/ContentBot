const { Api } = require('telegram');
const { Database } = require('./database');

class TelegramSearchEngine {
  constructor() {
    this.db = new Database();
    this.client = null;
    this.searchCache = new Map();
    this.cacheTimeout = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
    this.categories = {
      '–Ω–æ–≤–æ—Å—Ç–∏': ['news', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–º–∏', '–º–µ–¥–∏–∞', '–ª–µ–Ω—Ç–∞'],
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['tech', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–∏—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'ai', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞'],
      '–±–∏–∑–Ω–µ—Å': ['business', '–±–∏–∑–Ω–µ—Å', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '—Å—Ç–∞—Ä—Ç–∞–ø', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'],
      '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['education', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫—É—Ä—Å—ã', '–æ–±—É—á–µ–Ω–∏–µ', '–∑–Ω–∞–Ω–∏—è'],
      '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': ['entertainment', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '—é–º–æ—Ä', '–º–µ–º—ã', 'fun'],
      '—Å–ø–æ—Ä—Ç': ['sport', '—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π'],
      '–∏–≥—Ä—ã': ['games', '–∏–≥—Ä—ã', 'gaming', '–≥–µ–π–º–µ—Ä', 'game'],
      '–º—É–∑—ã–∫–∞': ['music', '–º—É–∑—ã–∫–∞', '–ø–µ—Å–Ω–∏', '–∞—É–¥–∏–æ', 'sound'],
      '–∫–∏–Ω–æ': ['movies', '–∫–∏–Ω–æ', '—Ñ–∏–ª—å–º—ã', '—Å–µ—Ä–∏–∞–ª—ã', 'cinema'],
      '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['travel', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Ç—É—Ä–∏–∑–º', '—Å—Ç—Ä–∞–Ω—ã', '–≥–æ—Ä–æ–¥–∞'],
      '–∫—É–ª–∏–Ω–∞—Ä–∏—è': ['cooking', '–∫—É–ª–∏–Ω–∞—Ä–∏—è', '—Ä–µ—Ü–µ–ø—Ç—ã', '–µ–¥–∞', 'food'],
      '–º–æ–¥–∞': ['fashion', '–º–æ–¥–∞', '—Å—Ç–∏–ª—å', '–æ–¥–µ–∂–¥–∞', 'beauty'],
      '–∞–≤—Ç–æ': ['auto', '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω—ã', 'cars', '–º–æ—Ç–æ'],
      '—Ñ–∏–Ω–∞–Ω—Å—ã': ['finance', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–¥–µ–Ω—å–≥–∏'],
      '–∑–¥–æ—Ä–æ–≤—å–µ': ['health', '–∑–¥–æ—Ä–æ–≤—å–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞', '—Ñ–∏—Ç–Ω–µ—Å', 'wellness'],
      '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è': ['psychology', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–º–æ—Ç–∏–≤–∞—Ü–∏—è'],
      '–ø–æ–ª–∏—Ç–∏–∫–∞': ['politics', '–ø–æ–ª–∏—Ç–∏–∫–∞', '–≤–ª–∞—Å—Ç—å', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', '–≤—ã–±–æ—Ä—ã'],
      '–Ω–∞—É–∫–∞': ['science', '–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è'],
      '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': ['crypto', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', 'bitcoin', '–±–ª–æ–∫—á–µ–π–Ω', 'defi'],
      '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': ['realestate', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∂–∏–ª—å–µ', '–∏–ø–æ—Ç–µ–∫–∞', '–∫–≤–∞—Ä—Ç–∏—Ä—ã']
    };
    
    console.log('üîç TelegramSearchEngine –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å MTProto –∫–ª–∏–µ–Ω—Ç–æ–º
  async init(mtClient) {
    try {
      this.client = mtClient;
      await this.db.init();
      await this.createSearchTables();
      console.log('‚úÖ TelegramSearchEngine –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞:', error);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è –ø–æ–∏—Å–∫–∞
  async createSearchTables() {
    const queries = [
      // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
      `CREATE TABLE IF NOT EXISTS search_results (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        query TEXT NOT NULL,
        channel_id TEXT NOT NULL,
        channel_title TEXT NOT NULL,
        channel_username TEXT,
        channel_type TEXT NOT NULL,
        participants_count INTEGER DEFAULT 0,
        description TEXT,
        category TEXT,
        verified INTEGER DEFAULT 0,
        created_at INTEGER DEFAULT (strftime('%s', 'now')),
        last_updated INTEGER DEFAULT (strftime('%s', 'now'))
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
      `CREATE TABLE IF NOT EXISTS search_history (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        query TEXT NOT NULL,
        results_count INTEGER DEFAULT 0,
        created_at INTEGER DEFAULT (strftime('%s', 'now'))
      )`,

      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
      `CREATE TABLE IF NOT EXISTS popular_channels (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        channel_id TEXT UNIQUE NOT NULL,
        channel_title TEXT NOT NULL,
        channel_username TEXT,
        participants_count INTEGER DEFAULT 0,
        category TEXT,
        search_frequency INTEGER DEFAULT 0,
        last_active INTEGER DEFAULT (strftime('%s', 'now'))
      )`
    ];

    for (let query of queries) {
      await this.db.runQuery(query);
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
  async searchChannels(query, options = {}) {
    try {
      const {
        type = 'all', // 'channels', 'groups', 'all'
        limit = 50,
        minParticipants = 0,
        category = null,
        verifiedOnly = false,
        useCache = true
      } = options;

      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = this.getCacheKey(query, options);
      if (useCache && this.searchCache.has(cacheKey)) {
        const cached = this.searchCache.get(cacheKey);
        if (Date.now() - cached.timestamp < this.cacheTimeout) {
          console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫—ç—à–∞');
          return cached.results;
        }
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Telegram API
      const results = await this.performTelegramSearch(query, options);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const filteredResults = await this.filterAndEnrichResults(results, options);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.searchCache.set(cacheKey, {
        results: filteredResults,
        timestamp: Date.now()
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ë–î
      await this.saveSearchResults(query, filteredResults);

      return filteredResults;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:', error);
      return [];
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Telegram API
  async performTelegramSearch(query, options) {
    try {
      const results = [];
      
      // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ Telegram
      const searchResult = await this.client.invoke(
        new Api.contacts.Search({
          q: query,
          limit: options.limit || 50
        })
      );

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (searchResult.chats) {
        for (let chat of searchResult.chats) {
          if (this.isValidChannel(chat, options)) {
            results.push(this.formatChannelResult(chat));
          }
        }
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ messages.SearchGlobal –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –æ—Ö–≤–∞—Ç–∞
      try {
        const globalSearch = await this.client.invoke(
          new Api.messages.SearchGlobal({
            q: query,
            offsetRate: 0,
            offsetPeer: new Api.InputPeerEmpty(),
            offsetId: 0,
            limit: Math.min(options.limit || 50, 100)
          })
        );

        if (globalSearch.chats) {
          for (let chat of globalSearch.chats) {
            if (this.isValidChannel(chat, options) && 
                !results.find(r => r.id === chat.id.toString())) {
              results.push(this.formatChannelResult(chat));
            }
          }
        }
      } catch (globalError) {
        console.log('–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', globalError.message);
      }

      return results;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ Telegram:', error);
      return [];
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
  isValidChannel(chat, options) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
    if (options.type === 'channels' && !chat.broadcast) {
      return false;
    }
    if (options.type === 'groups' && chat.broadcast) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    if (options.minParticipants && 
        (!chat.participantsCount || chat.participantsCount < options.minParticipants)) {
      return false;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (options.verifiedOnly && !chat.verified) {
      return false;
    }

    return true;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  formatChannelResult(chat) {
    return {
      id: chat.id.toString(),
      title: chat.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      username: chat.username || null,
      type: chat.broadcast ? 'channel' : 'group',
      participantsCount: chat.participantsCount || 0,
      description: chat.about || null,
      verified: chat.verified || false,
      photo: chat.photo ? this.formatPhoto(chat.photo) : null,
      category: this.detectCategory(chat.title, chat.about),
      link: chat.username ? `https://t.me/${chat.username}` : null,
      date: chat.date || null
    };
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
  formatPhoto(photo) {
    try {
      if (photo && photo.photoId) {
        return {
          id: photo.photoId.toString(),
          hasPhoto: true
        };
      }
      return null;
    } catch (error) {
      return null;
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞–Ω–∞–ª–∞
  detectCategory(title, description) {
    const text = (title + ' ' + (description || '')).toLowerCase();
    
    for (let [category, keywords] of Object.entries(this.categories)) {
      if (keywords.some(keyword => text.includes(keyword))) {
        return category;
      }
    }
    
    return '–æ–±—â–µ–µ';
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async filterAndEnrichResults(results, options) {
    let filtered = [...results];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (options.category) {
      filtered = filtered.filter(result => result.category === options.category);
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    filtered = this.sortByRelevance(filtered, options.query);

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (options.limit) {
      filtered = filtered.slice(0, options.limit);
    }

    return filtered;
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  sortByRelevance(results, query) {
    const queryLower = query.toLowerCase();
    
    return results.sort((a, b) => {
      let scoreA = 0;
      let scoreB = 0;

      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ username
      if (a.username && a.username.toLowerCase().includes(queryLower)) scoreA += 100;
      if (b.username && b.username.toLowerCase().includes(queryLower)) scoreB += 100;

      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      if (a.title && a.title.toLowerCase().startsWith(queryLower)) scoreA += 50;
      if (b.title && b.title.toLowerCase().startsWith(queryLower)) scoreB += 50;

      // –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      if (a.title && a.title.toLowerCase().includes(queryLower)) scoreA += 25;
      if (b.title && b.title.toLowerCase().includes(queryLower)) scoreB += 25;

      // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      scoreA += Math.log10((a.participantsCount || 1) + 1);
      scoreB += Math.log10((b.participantsCount || 1) + 1);

      // –ë–æ–Ω—É—Å –∑–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
      if (a.verified) scoreA += 10;
      if (b.verified) scoreB += 10;

      return scoreB - scoreA;
    });
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  async saveSearchResults(query, results) {
    try {
      for (let result of results) {
        await this.db.runQuery(
          `INSERT OR REPLACE INTO search_results 
           (query, channel_id, channel_title, channel_username, channel_type, 
            participants_count, description, category, verified, last_updated)
           VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, strftime('%s', 'now'))`,
          [query, result.id, result.title, result.username, result.type,
           result.participantsCount, result.description, result.category, result.verified ? 1 : 0]
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
  async saveSearchHistory(userId, query, resultsCount) {
    try {
      await this.db.runQuery(
        `INSERT INTO search_history (user_id, query, results_count) VALUES (?, ?, ?)`,
        [userId, query, resultsCount]
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserSearchHistory(userId, limit = 10) {
    try {
      return await this.db.allQuery(
        `SELECT * FROM search_history WHERE user_id = ? ORDER BY created_at DESC LIMIT ?`,
        [userId, limit]
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  async getPopularQueries(limit = 10) {
    try {
      return await this.db.allQuery(
        `SELECT query, COUNT(*) as count FROM search_history 
         WHERE created_at > strftime('%s', 'now', '-7 days')
         GROUP BY query ORDER BY count DESC LIMIT ?`,
        [limit]
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  async getRecommendedChannels(category, limit = 10) {
    try {
      return await this.db.allQuery(
        `SELECT DISTINCT channel_id, channel_title, channel_username, participants_count, category
         FROM search_results 
         WHERE category = ? AND participants_count > 1000
         ORDER BY participants_count DESC LIMIT ?`,
        [category, limit]
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
  async findSimilarChannels(channelId, limit = 5) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
      const channel = await this.db.getQuery(
        `SELECT * FROM search_results WHERE channel_id = ? LIMIT 1`,
        [channelId]
      );

      if (!channel) return [];

      // –ò—â–µ–º –∫–∞–Ω–∞–ª—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      return await this.db.allQuery(
        `SELECT DISTINCT channel_id, channel_title, channel_username, participants_count, category
         FROM search_results 
         WHERE category = ? AND channel_id != ? AND participants_count > 100
         ORDER BY participants_count DESC LIMIT ?`,
        [channel.category, channelId, limit]
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);
      return [];
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∞
  getCacheKey(query, options) {
    return `${query}_${JSON.stringify(options)}`;
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
  clearCache() {
    this.searchCache.clear();
    console.log('üóëÔ∏è –ö—ç—à –ø–æ–∏—Å–∫–∞ –æ—á–∏—â–µ–Ω');
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞
  getSearchStats() {
    return {
      cacheSize: this.searchCache.size,
      availableCategories: Object.keys(this.categories),
      totalCategories: Object.keys(this.categories).length
    };
  }

  // –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  async advancedSearch(criteria) {
    try {
      const {
        keywords = [],
        categories = [],
        minParticipants = 0,
        maxParticipants = null,
        verifiedOnly = false,
        hasUsername = false,
        type = 'all',
        limit = 50
      } = criteria;

      let results = [];

      // –ü–æ–∏—Å–∫ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
      for (let keyword of keywords) {
        const keywordResults = await this.searchChannels(keyword, {
          type,
          limit: limit * 2, // –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          minParticipants,
          verifiedOnly
        });
        results = results.concat(keywordResults);
      }

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const unique = new Map();
      results.forEach(result => {
        if (!unique.has(result.id)) {
          unique.set(result.id, result);
        }
      });
      results = Array.from(unique.values());

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
      results = results.filter(result => {
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if (categories.length > 0 && !categories.includes(result.category)) {
          return false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (maxParticipants && result.participantsCount > maxParticipants) {
          return false;
        }

        // –§–∏–ª—å—Ç—Ä –Ω–∞–ª–∏—á–∏—è username
        if (hasUsername && !result.username) {
          return false;
        }

        return true;
      });

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return results.slice(0, limit);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  async exportSearchResults(query, format = 'json') {
    try {
      const results = await this.db.allQuery(
        `SELECT * FROM search_results WHERE query = ? ORDER BY participants_count DESC`,
        [query]
      );

      if (format === 'json') {
        return {
          query,
          timestamp: Date.now(),
          total: results.length,
          results: results
        };
      }

      if (format === 'csv') {
        const headers = ['ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'Username', '–¢–∏–ø', '–£—á–∞—Å—Ç–Ω–∏–∫–∏', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–°—Å—ã–ª–∫–∞'];
        const rows = results.map(r => [
          r.channel_id,
          r.channel_title,
          r.channel_username || '',
          r.channel_type,
          r.participants_count,
          r.category,
          r.channel_username ? `https://t.me/${r.channel_username}` : ''
        ]);
        
        return [headers, ...rows];
      }

      return results;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      return null;
    }
  }
}

module.exports = { TelegramSearchEngine };


