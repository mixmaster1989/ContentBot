const { Api } = require('telegram');
const { TelegramSearchEngine } = require('./telegram-search-engine');

class GlobalChannelFinder extends TelegramSearchEngine {
  constructor() {
    super();
    this.searchMethods = [
      'globalSearch',
      'contactsSearch', 
      'messagesSearch',
      'channelDiscovery',
      'relatedChannels'
    ];
    
    // –†–ê–ë–û–¢–ê–Æ–©–ò–ï –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ (—É–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
    this.knownChannelSources = {
      '–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ': ['@durov', '@telegram'],
      '–Ω–æ–≤–æ—Å—Ç–∏': ['@rian_ru', '@rbc_news'],
      '–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ_–∫–∞—Ç–∞–ª–æ–≥–∏': ['@durov'] // –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    };
    
    console.log('üåê GlobalChannelFinder –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ init –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  async init(mtClient) {
    try {
      await super.init(mtClient); // –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π init
      console.log('‚úÖ GlobalChannelFinder –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GlobalChannelFinder:', error);
      throw error;
    }
  }

  // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
  async comprehensiveSearch(query, options = {}) {
    try {
      const {
        deepSearch = true,
        includeRelated = true,
        searchInMessages = false,
        timeout = 30000,
        maxResults = 100
      } = options;

      console.log(`üîç –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: "${query}"`);
      
      const allResults = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      let searchPromises = [];

      // 1. –û—Å–Ω–æ–≤–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
      searchPromises.push(
        this.performGlobalSearch(query, options)
          .then(results => this.addResults(allResults, results, 'global'))
          .catch(err => console.log('Global search error:', err.message))
      );

      // 2. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—ã
      searchPromises.push(
        this.performContactsSearch(query, options)
          .then(results => this.addResults(allResults, results, 'contacts'))
          .catch(err => console.log('Contacts search error:', err.message))
      );

      // 3. –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
      if (searchInMessages) {
        searchPromises.push(
          this.performMessagesSearch(query, options)
            .then(results => this.addResults(allResults, results, 'messages'))
            .catch(err => console.log('Messages search error:', err.message))
        );
      }

      // 4. –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã-–∫–∞—Ç–∞–ª–æ–≥–∏
      if (deepSearch) {
        searchPromises.push(
          this.searchInChannelCatalogs(query, options)
            .then(results => this.addResults(allResults, results, 'catalogs'))
            .catch(err => console.log('Catalog search error:', err.message))
        );
      }

      // 5. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
      if (includeRelated) {
        searchPromises.push(
          this.findRelatedChannels(query, options)
            .then(results => this.addResults(allResults, results, 'related'))
            .catch(err => console.log('Related search error:', err.message))
        );
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø–æ–∏—Å–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await Promise.race([
        Promise.allSettled(searchPromises),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('Search timeout')), timeout)
        )
      ]);

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
      const finalResults = Array.from(allResults.values());
      const sortedResults = this.sortByRelevance(finalResults, query);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const limitedResults = sortedResults.slice(0, maxResults);

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${limitedResults.length} –∫–∞–Ω–∞–ª–æ–≤`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.saveSearchResults(query, limitedResults);
      
      return limitedResults;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ SearchGlobal
  async performGlobalSearch(query, options) {
    try {
      const results = [];
      const limit = Math.min(options.limit || 20, 50);

      console.log(`üîç –ù–ê–°–¢–û–Ø–©–ò–ô –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);

      // –ò–°–ü–û–õ–¨–ó–£–ï–ú contacts.Search - –ù–ê–°–¢–û–Ø–©–ò–ô –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö!
      const searchResult = await this.client.invoke(
        new Api.contacts.Search({
          q: query,
          limit
        })
      );

      console.log(`üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${searchResult.chats?.length || 0} —á–∞—Ç–æ–≤`);

      if (searchResult.chats && searchResult.chats.length > 0) {
        for (let chat of searchResult.chats) {
          if (this.isValidChannel(chat, options)) {
            const formatted = this.formatChannelResult(chat);
            results.push(formatted);
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª: ${formatted.title}`);
          }
        }
      }

      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç—ã
  async performContactsSearch(query, options) {
    try {
      const searchResult = await this.client.invoke(
        new Api.contacts.Search({
          q: query,
          limit: options.limit || 50
        })
      );

      const results = [];
      if (searchResult.chats) {
        for (let chat of searchResult.chats) {
          if (this.isValidChannel(chat, options)) {
            results.push(this.formatChannelResult(chat));
          }
        }
      }

      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–æ–≤
  async performMessagesSearch(query, options) {
    try {
      const results = [];
      const searchResult = await this.client.invoke(
        new Api.messages.SearchGlobal({
          q: query,
          offsetRate: 0,
          offsetPeer: new Api.InputPeerEmpty(), 
          offsetId: 0,
          limit: 100
        })
      );

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      const channelIds = new Set();
      
      if (searchResult.messages) {
        for (let message of searchResult.messages) {
          if (message.peerId && message.peerId.className === 'PeerChannel') {
            channelIds.add(message.peerId.channelId.toString());
          }
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
      if (searchResult.chats) {
        for (let chat of searchResult.chats) {
          if (channelIds.has(chat.id.toString()) && this.isValidChannel(chat, options)) {
            const result = this.formatChannelResult(chat);
            result.foundInMessages = true;
            results.push(result);
          }
        }
      }

      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –≤ –∫–∞–Ω–∞–ª–∞—Ö-–∫–∞—Ç–∞–ª–æ–≥–∞—Ö
  async searchInChannelCatalogs(query, options) {
    try {
      const results = [];
      
      for (let catalogType of Object.keys(this.knownChannelSources)) {
        const catalogs = this.knownChannelSources[catalogType];
        
        for (let catalogUsername of catalogs) {
          try {
            const catalogResults = await this.searchInSpecificCatalog(catalogUsername, query, options);
            results.push(...catalogResults);
          } catch (error) {
            console.log(`–ö–∞—Ç–∞–ª–æ–≥ ${catalogUsername} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, error.message);
            continue;
          }
        }
      }

      return results;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö:', error);
      return [];
    }
  }

  // –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
  async searchInSpecificCatalog(catalogUsername, query, options) {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogUsername}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∫–∞—Ç–∞–ª–æ–≥–∞
      const catalog = await this.client.invoke(
        new Api.contacts.ResolveUsername({ 
          username: catalogUsername.replace('@', '') 
        })
      );

      if (!catalog.chats?.[0]) {
        console.log(`‚ùå –ö–∞—Ç–∞–ª–æ–≥ ${catalogUsername} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return [];
      }

      const catalogEntity = catalog.chats[0];
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞—Ç–∞–ª–æ–≥: ${catalogEntity.title}`);
      
      // –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –Ω–µ –∏—â–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
      // –≠—Ç–æ —É–ø—Ä–æ—â–∞–µ—Ç –ø–æ–∏—Å–∫ –∏ –∏–∑–±–µ–≥–∞–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–∞—Ç–∞–ª–æ–≥–∞ ${catalogUsername}`);
      return [];
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ ${catalogUsername}:`, error);
      return [];
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  extractChannelMentions(text) {
    const mentions = [];
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤
    const patterns = [
      /@([a-zA-Z0-9_]+)/g,           // @username
      /t\.me\/([a-zA-Z0-9_]+)/g,      // t.me/username
      /telegram\.me\/([a-zA-Z0-9_]+)/g // telegram.me/username
    ];

    for (let pattern of patterns) {
      let match;
      while ((match = pattern.exec(text)) !== null) {
        if (match[1] && match[1].length > 3) {
          mentions.push(match[1]);
        }
      }
    }

    return [...new Set(mentions)]; // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –ø–æ username
  async getChannelInfo(username) {
    try {
      const result = await this.client.invoke(
        new Api.contacts.ResolveUsername({ 
          username: username.replace('@', '') 
        })
      );

      return result.chats?.[0] || null;
    } catch (error) {
      return null;
    }
  }

  // –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
  async findRelatedChannels(query, options) {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
      const mainResults = await this.performGlobalSearch(query, { ...options, limit: 10 });
      const relatedResults = [];

      for (let channel of mainResults.slice(0, 5)) { // –ë–µ—Ä–µ–º —Ç–æ–ø-5 –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
        try {
          const related = await this.getChannelRecommendations(channel.id);
          relatedResults.push(...related);
        } catch (error) {
          continue;
        }
      }

      return relatedResults;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞
  async getChannelRecommendations(channelId) {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
      // 1. –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)
      // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      // 3. –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
      
      return await this.findSimilarChannels(channelId, 5);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', error);
      return [];
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
  addResults(allResults, newResults, source) {
    for (let result of newResults) {
      if (!allResults.has(result.id)) {
        result.sources = [source];
        allResults.set(result.id, result);
      } else {
        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        allResults.get(result.id).sources.push(source);
      }
    }
  }

  // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤
  async intelligentSearch(query, options = {}) {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      const searchQueries = this.generateSearchVariations(query);
      const allResults = new Map();

      for (let searchQuery of searchQueries) {
        try {
          const results = await this.comprehensiveSearch(searchQuery, {
            ...options,
            maxResults: 50,
            timeout: 15000
          });
          
          this.addResults(allResults, results, 'variation');
        } catch (error) {
          continue;
        }
      }

      const finalResults = Array.from(allResults.values());
      return this.sortByRelevance(finalResults, query).slice(0, options.maxResults || 100);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  generateSearchVariations(query) {
    const variations = [query];
    
    // –°–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    const synonyms = {
      '–Ω–æ–≤–æ—Å—Ç–∏': ['news', '—Å–º–∏', '–º–µ–¥–∏–∞', '–ª–µ–Ω—Ç–∞'],
      '–∏–≥—Ä—ã': ['games', 'gaming', '–≥–µ–π–º–µ—Ä'],
      '–º—É–∑—ã–∫–∞': ['music', '–ø–µ—Å–Ω–∏', '–∞—É–¥–∏–æ'],
      '—Ñ–∏–ª—å–º—ã': ['movies', '–∫–∏–Ω–æ', 'cinema'],
      '—Å–ø–æ—Ä—Ç': ['sport', 'fitness', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'],
      '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': ['crypto', 'bitcoin', '–±–ª–æ–∫—á–µ–π–Ω'],
      '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ': ['coding', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'dev'],
      '–±–∏–∑–Ω–µ—Å': ['business', '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ'],
      '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ['education', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å—ã']
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
    for (let [word, syns] of Object.entries(synonyms)) {
      if (query.toLowerCase().includes(word)) {
        for (let syn of syns) {
          variations.push(query.toLowerCase().replace(word, syn));
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã (–±–∞–∑–æ–≤—ã–µ)
    const translations = {
      'news': '–Ω–æ–≤–æ—Å—Ç–∏',
      'games': '–∏–≥—Ä—ã', 
      'music': '–º—É–∑—ã–∫–∞',
      'crypto': '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã',
      'business': '–±–∏–∑–Ω–µ—Å',
      'sport': '—Å–ø–æ—Ä—Ç'
    };

    for (let [en, ru] of Object.entries(translations)) {
      if (query.toLowerCase().includes(en)) {
        variations.push(query.toLowerCase().replace(en, ru));
      }
      if (query.toLowerCase().includes(ru)) {
        variations.push(query.toLowerCase().replace(ru, en));
      }
    }

    return [...new Set(variations)]; // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async smartFilter(results, query, userPreferences = {}) {
    try {
      const {
        preferredLanguage = 'ru',
        preferredSize = 'medium', // small, medium, large
        topicInterests = [],
        qualityFilter = true
      } = userPreferences;

      let filtered = [...results];

      // –§–∏–ª—å—Ç—Ä –ø–æ —è–∑—ã–∫—É (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–Ω–∞–ª–∞)
      if (preferredLanguage === 'ru') {
        filtered = filtered.filter(r => 
          /[–∞-—è—ë]/i.test(r.title) || 
          this.detectCategory(r.title, r.description) !== '–æ–±—â–µ–µ'
        );
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–Ω–∞–ª–∞
      if (preferredSize === 'small') {
        filtered = filtered.filter(r => r.participantsCount < 10000);
      } else if (preferredSize === 'medium') {
        filtered = filtered.filter(r => 
          r.participantsCount >= 1000 && r.participantsCount < 100000
        );
      } else if (preferredSize === 'large') {
        filtered = filtered.filter(r => r.participantsCount >= 100000);
      }

      // –§–∏–ª—å—Ç—Ä –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º
      if (topicInterests.length > 0) {
        filtered = filtered.filter(r => 
          topicInterests.includes(r.category)
        );
      }

      // –§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞
      if (qualityFilter) {
        filtered = filtered.filter(r => 
          r.title.length > 3 && 
          !/[0-9]{3,}/.test(r.title) && // –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
          !r.title.toLowerCase().includes('spam')
        );
      }

      return filtered;

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);
      return results;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
  async getTrendingChannels(category = null, period = '24h') {
    try {
      const timeFilter = this.getTimeFilter(period);
      
      let query = `
        SELECT channel_id, channel_title, channel_username, participants_count, 
               category, COUNT(*) as search_frequency
        FROM search_results 
        WHERE last_updated > ?
      `;
      
      const params = [timeFilter];
      
      if (category) {
        query += ` AND category = ?`;
        params.push(category);
      }
      
      query += ` GROUP BY channel_id ORDER BY search_frequency DESC, participants_count DESC LIMIT 20`;
      
      return await this.db.allQuery(query, params);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
  getTimeFilter(period) {
    const now = Math.floor(Date.now() / 1000);
    switch (period) {
      case '1h': return now - 3600;
      case '24h': return now - 86400;
      case '7d': return now - 604800;
      case '30d': return now - 2592000;
      default: return now - 86400;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
  async exportResults(query, format = 'json', options = {}) {
    try {
      const results = await this.comprehensiveSearch(query, options);
      
      switch (format) {
        case 'json':
          return {
            query,
            timestamp: new Date().toISOString(),
            total: results.length,
            results: results.map(r => ({
              ...r,
              exportedAt: new Date().toISOString()
            }))
          };
          
        case 'csv':
          const csvHeaders = [
            'ID', '–ù–∞–∑–≤–∞–Ω–∏–µ', 'Username', '–¢–∏–ø', '–£—á–∞—Å—Ç–Ω–∏–∫–∏', 
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω', '–°—Å—ã–ª–∫–∞', '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'
          ];
          const csvRows = results.map(r => [
            r.id,
            `"${r.title}"`,
            r.username || '',
            r.type,
            r.participantsCount,
            r.category,
            r.verified ? '–î–∞' : '–ù–µ—Ç',
            r.link || '',
            (r.sources || []).join(';')
          ]);
          return [csvHeaders, ...csvRows];
          
        case 'markdown':
          let md = `# –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"\n\n`;
          md += `–î–∞—Ç–∞: ${new Date().toLocaleDateString('ru-RU')}\n`;
          md += `–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${results.length}\n\n`;
          
          for (let r of results) {
            md += `## ${r.title}\n`;
            md += `- **–¢–∏–ø:** ${r.type === 'channel' ? '–ö–∞–Ω–∞–ª' : '–ì—Ä—É–ø–ø–∞'}\n`;
            md += `- **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** ${r.participantsCount?.toLocaleString('ru-RU') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
            md += `- **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** ${r.category}\n`;
            if (r.username) md += `- **–°—Å—ã–ª–∫–∞:** https://t.me/${r.username}\n`;
            if (r.description) md += `- **–û–ø–∏—Å–∞–Ω–∏–µ:** ${r.description}\n`;
            md += `\n`;
          }
          return md;
          
        default:
          return results;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:', error);
      return null;
    }
  }
}

module.exports = { GlobalChannelFinder };


