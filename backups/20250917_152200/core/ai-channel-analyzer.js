/**
 * AI –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ö–ê–ù–ê–õ–û–í TELEGRAM
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM_API –¥–ª—è —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—ã–Ω–µ—Å–µ–Ω–∏—è –≤–µ—Ä–¥–∏–∫—Ç–æ–≤
 * –°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

const axios = require('axios');

class AIChannelAnalyzer {
  constructor() {
    // Cloud.ru API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)
    this.config = {
      apiKey: process.env.LLM_API,
      baseUrl: 'https://foundation-models.api.cloud.ru/v1',
      model: 'openai/gpt-oss-120b',
      maxTokens: 4000,
      temperature: 0.3 // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫
    };
    
    this.client = null;
  }

  async init(telegramClient) {
    try {
      this.client = telegramClient;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM API
      if (!this.config.apiKey) {
        throw new Error('LLM_API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env');
      }
      
      console.log('‚úÖ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞:', error);
      throw error;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é AI –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
   * @param {Object} channel - –û–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–æ–∏—Å–∫–∞
   * @returns {Promise<Object>} –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
   */
  async analyzeChannel(channel) {
    try {
      console.log(`üß† AI –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞: ${channel.title}`);
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      const metrics = await this.collectChannelMetrics(channel);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const recentMessages = await this.getRecentMessages(channel);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é AI
      const aiAnalysis = await this.performAIAnalysis(channel, recentMessages, metrics);
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
      const enrichedChannel = {
        ...channel,
        metrics: metrics,
        aiAnalysis: aiAnalysis,
        analyzedAt: new Date().toISOString()
      };
      
      console.log(`‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: ${channel.title}`);
      return enrichedChannel;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ ${channel.title}:`, error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–Ω–∞–ª —Å –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
      return {
        ...channel,
        metrics: await this.collectBasicMetrics(channel),
        aiAnalysis: {
          error: error.message,
          qualityScore: 0,
          verdict: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
        },
        analyzedAt: new Date().toISOString()
      };
    }
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞
   */
  async collectChannelMetrics(channel) {
    try {
      const metrics = {
        // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        subscribersCount: channel.participantsCount || 0,
        type: channel.type,
        hasUsername: !!channel.username,
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å)
        avgPostsPerDay: 0,
        avgViewsPerPost: 0,
        avgReactionsPerPost: 0,
        lastPostDate: null,
        postsAnalyzed: 0,
        avgPostLength: 0,
        mediaPercentage: 0,
        forwardPercentage: 0,
        
        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        collectedAt: new Date().toISOString()
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É - —Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      if (this.client && channel.username) {
        const detailedMetrics = await this.getDetailedMetrics(channel);
        Object.assign(metrics, detailedMetrics);
      }

      return metrics;
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫:', error);
      return this.collectBasicMetrics(channel);
    }
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
   */
  async collectBasicMetrics(channel) {
    return {
      subscribersCount: channel.participantsCount || 0,
      type: channel.type,
      hasUsername: !!channel.username,
      collectedAt: new Date().toISOString(),
      error: '–î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã'
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Telegram API
   */
  async getDetailedMetrics(channel) {
    try {
      const identifier = channel.username || channel.id;
      console.log(`üìä –°–æ–±–∏—Ä–∞—é –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è ${channel.username ? '@' + channel.username : 'ID:' + channel.id}...`);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const messages = await this.client.getMessages(identifier, { limit: 50 });
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ—Ç—Ä–∏–∫`);
      
      if (!messages || messages.length === 0) {
        console.log(`‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ—Ç—Ä–∏–∫ –≤ @${channel.username}`);
        return { postsAnalyzed: 0 };
      }

      let totalViews = 0;
      let totalReactions = 0;
      let totalLength = 0;
      let mediaCount = 0;
      let forwardCount = 0;
      let validMessages = 0;

      const now = new Date();
      const oldestMessage = messages[messages.length - 1];
      const daysDiff = oldestMessage ? (now - new Date(oldestMessage.date * 1000)) / (1000 * 60 * 60 * 24) : 1;

      for (const message of messages) {
        if (!message.message && !message.media) continue;
        
        validMessages++;
        
        // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
        if (message.views) totalViews += message.views;
        
        // –†–µ–∞–∫—Ü–∏–∏
        if (message.reactions) {
          const reactions = message.reactions.results || [];
          totalReactions += reactions.reduce((sum, r) => sum + r.count, 0);
        }
        
        // –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        if (message.message) totalLength += message.message.length;
        
        // –ú–µ–¥–∏–∞
        if (message.media) mediaCount++;
        
        // –ü–µ—Ä–µ—Å—ã–ª–∫–∏
        if (message.fwdFrom) forwardCount++;
      }

      const metrics = {
        postsAnalyzed: validMessages,
        avgPostsPerDay: validMessages / Math.max(daysDiff, 1),
        avgViewsPerPost: validMessages > 0 ? Math.round(totalViews / validMessages) : 0,
        avgReactionsPerPost: validMessages > 0 ? Math.round(totalReactions / validMessages) : 0,
        avgPostLength: validMessages > 0 ? Math.round(totalLength / validMessages) : 0,
        mediaPercentage: validMessages > 0 ? Math.round((mediaCount / validMessages) * 100) : 0,
        forwardPercentage: validMessages > 0 ? Math.round((forwardCount / validMessages) * 100) : 0,
        lastPostDate: messages[0]?.date ? new Date(messages[0].date * 1000).toISOString() : null
      };

      console.log(`‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã: ${validMessages} –ø–æ—Å—Ç–æ–≤, ${metrics.avgViewsPerPost} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
      return metrics;
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∏–∑ @${channel.username}:`, error.message);
      return { postsAnalyzed: 0, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
   */
  async getRecentMessages(channel) {
    try {
      if (!this.client || (!channel.username && !channel.id)) {
        console.log(`‚ùå –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channel.title}`);
        return [];
      }

      const identifier = channel.username || channel.id;
      console.log(`üì® –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ ${channel.username ? '@' + channel.username : 'ID:' + channel.id}...`);
      const messages = await this.client.getMessages(identifier, { limit: 50 });
      
      console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${channel.username ? '@' + channel.username : 'ID:' + channel.id}`);
      
      if (!messages || messages.length === 0) {
        console.log(`‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ${channel.username ? '@' + channel.username : 'ID:' + channel.id}`);
        return [];
      }
      
      const filteredMessages = messages
        .filter(msg => msg.message && msg.message.length > 20)
        .slice(0, 5)
        .map(msg => ({
          text: msg.message.substring(0, 500), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
          date: msg.date, // Keep as Unix timestamp for now
          views: msg.views || 0,
          reactions: msg.reactions || null,
          media: msg.media ? true : false,
          fwdFrom: msg.fwdFrom ? true : false
        }));
        
      console.log(`‚úÖ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
      return filteredMessages;
        
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ ${channel.username ? '@' + channel.username : 'ID:' + channel.id}:`, error.message);
      return [];
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç AI –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
   */
  async performAIAnalysis(channel, messages, metrics) {
    try {
      const prompt = this.buildAnalysisPrompt(channel, messages, metrics);
      
      const response = await this.callLLMAPI(prompt);
      
      if (!response) {
        throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM API');
      }

      // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
      return this.parseAIResponse(response);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞:', error);
      return {
        error: error.message,
        qualityScore: 0,
        verdict: '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        categories: [],
        warnings: ['–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞']
      };
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
   */
  buildAnalysisPrompt(channel, messages, metrics) {
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π Telegram –∫–∞–Ω–∞–ª –∏ –¥–∞–π –æ—Ü–µ–Ω–∫—É –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–ê–ù–ê–õ–ï:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${channel.title}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${channel.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
- –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${metrics.subscribersCount}
- Username: ${channel.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}
- –¢–∏–ø: ${channel.type}

–ú–ï–¢–†–ò–ö–ò:
- –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${metrics.postsAnalyzed || 0}
- –°—Ä–µ–¥–Ω–∏–π –ø–æ—Å—Ç –≤ –¥–µ–Ω—å: ${metrics.avgPostsPerDay || 0}
- –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${metrics.avgViewsPerPost || 0}
- –ü—Ä–æ—Ü–µ–Ω—Ç –º–µ–¥–∏–∞: ${metrics.mediaPercentage || 0}%
- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ—Å—ã–ª–æ–∫: ${metrics.forwardPercentage || 0}%

–ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:
${messages.map((msg, i) => `${i+1}. ${msg.text.substring(0, 200)}...`).join('\n')}

–ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–Ω–∞–ª –∏ –≤–µ—Ä–Ω–∏ JSON —Å –æ—Ü–µ–Ω–∫–æ–π:

{
  "qualityScore": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10,
  "verdict": "–∫—Ä–∞—Ç–∫–∏–π –≤–µ—Ä–¥–∏–∫—Ç (–ø–æ–ª–µ–∑–Ω—ã–π/—Å–ø–∞–º/—Ä–µ–∫–ª–∞–º–∞/–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π/–Ω–æ–≤–æ—Å—Ç–∏)",
  "categories": ["—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞"],
  "commercialIndex": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10 (–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å),
  "educationalValue": —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 10 (–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å),
  "contentType": "—Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π/—Ä–µ–ø–æ—Å—Ç—ã/—Å–º–µ—à–∞–Ω–Ω—ã–π)",
  "targetAudience": "—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
  "warnings": ["—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å"],
  "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏–ª–∏ –Ω–µ—Ç"
}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

    return prompt;
  }

  /**
   * –í—ã–∑—ã–≤–∞–µ—Ç LLM API
   */
  async callLLMAPI(prompt) {
    try {
      const response = await axios.post(
        `${this.config.baseUrl}/chat/completions`,
        {
          model: this.config.model,
          messages: [
            { role: 'user', content: prompt }
          ],
          max_tokens: this.config.maxTokens,
          temperature: this.config.temperature,
          stream: false
        },
        {
          headers: {
            'Authorization': `Bearer ${this.config.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        }
      );

      return response.data.choices[0].message.content.trim();
      
    } catch (error) {
      console.error('LLM API –æ—à–∏–±–∫–∞:', error.response?.data || error.message);
      throw new Error(`LLM API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    }
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
   */
  parseAIResponse(response) {
    try {
      // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
      const cleanResponse = response.replace(/```json\n?|```\n?/g, '').trim();
      
      const parsed = JSON.parse(cleanResponse);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      return {
        qualityScore: Math.max(0, Math.min(10, parsed.qualityScore || 0)),
        verdict: parsed.verdict || '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        categories: Array.isArray(parsed.categories) ? parsed.categories : [],
        commercialIndex: Math.max(0, Math.min(10, parsed.commercialIndex || 0)),
        educationalValue: Math.max(0, Math.min(10, parsed.educationalValue || 0)),
        contentType: parsed.contentType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        targetAudience: parsed.targetAudience || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
        warnings: Array.isArray(parsed.warnings) ? parsed.warnings : [],
        recommendation: parsed.recommendation || '–¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞'
      };
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      return {
        qualityScore: 5,
        verdict: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞',
        categories: ['–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'],
        commercialIndex: 0,
        educationalValue: 0,
        contentType: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        targetAudience: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞',
        warnings: ['–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ AI –æ—Ç–≤–µ—Ç–∞'],
        recommendation: '–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏',
        rawResponse: response.substring(0, 200)
      };
    }
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
   */
  async analyzeChannelsBatch(channels, options = {}) {
    console.log(`üß† –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤`);
    
    const results = [];
    const delay = options.delay || 2000; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    for (let i = 0; i < channels.length; i++) {
      const channel = channels[i];
      
      try {
        console.log(`üìä –ê–Ω–∞–ª–∏–∑ ${i + 1}/${channels.length}: ${channel.title}`);
        
        const analyzed = await this.analyzeChannel(channel);
        results.push(analyzed);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API
        if (i < channels.length - 1) {
          await this.delay(delay);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ ${channel.title}:`, error);
        results.push({
          ...channel,
          aiAnalysis: { error: error.message, qualityScore: 0 }
        });
      }
    }
    
    console.log(`‚úÖ –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: ${results.length} –∫–∞–Ω–∞–ª–æ–≤`);
    return results;
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  formatAnalysisForDisplay(analysis) {
    if (analysis.error) {
      return `‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`;
    }

    const score = analysis.qualityScore;
    const scoreEmoji = score >= 8 ? 'üåü' : score >= 6 ? '‚≠ê' : score >= 4 ? 'üî∂' : 'üî∏';
    
    return `${scoreEmoji} ${score}/10 | ${analysis.verdict} | ${analysis.recommendation}`;
  }
}

module.exports = AIChannelAnalyzer;
