require('dotenv').config();
const SmartGlobalSearch = require('./core/smart-global-search');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');

class AISearchTester {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.smartSearch = new SmartGlobalSearch();
  }

  async init() {
    try {
      console.log('üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ AI –ø–æ–∏—Å–∫–∞...');
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      await this.smartSearch.init(this.client);
      console.log('‚úÖ SmartGlobalSearch –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ AI
   */
  async testQuickSearch(query) {
    try {
      console.log(`\n‚ö° –¢–ï–°–¢ –ë–´–°–¢–†–û–ì–û –ü–û–ò–°–ö–ê: "${query}"`);
      console.log('='.repeat(60));
      
      const startTime = Date.now();
      const results = await this.smartSearch.quickSearch(query, { limit: 5 });
      const duration = Date.now() - startTime;
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}–º—Å`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${results.length} –∫–∞–Ω–∞–ª–æ–≤`);
      
      if (results.length > 0) {
        console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        results.forEach((channel, index) => {
          console.log(`${index + 1}. üì∫ ${channel.title}`);
          console.log(`   üë• ${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
          console.log(`   üè∑Ô∏è ${channel.category}`);
          if (channel.username) console.log(`   üîó @${channel.username}`);
          console.log('');
        });
      }
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  /**
   * –¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
   */
  async testSmartSearch(query) {
    try {
      console.log(`\nüß† –¢–ï–°–¢ –£–ú–ù–û–ì–û –ü–û–ò–°–ö–ê –° AI: "${query}"`);
      console.log('='.repeat(60));
      
      const startTime = Date.now();
      const results = await this.smartSearch.smartSearch(query, { 
        limit: 8,
        aiAnalysisLimit: 5,
        analysisDelay: 1000 // –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
      });
      const duration = Date.now() - startTime;
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}–º—Å`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ: ${results.length} –∫–∞–Ω–∞–ª–æ–≤`);
      
      if (results.length > 0) {
        console.log('\nüß† –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° AI –ê–ù–ê–õ–ò–ó–û–ú:');
        results.forEach((channel, index) => {
          console.log(`${index + 1}. üì∫ ${channel.title}`);
          console.log(`   üë• ${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
          const metrics = channel.metrics;
          if (metrics) {
            console.log(`   üìä –ú–ï–¢–†–ò–ö–ò:`);
            console.log(`      üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${metrics.subscribersCount?.toLocaleString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`      üìù –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${metrics.postsAnalyzed || 0}`);
            console.log(`      üìà –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${metrics.avgPostsPerDay?.toFixed(1) || 0}`);
            console.log(`      üëÄ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${metrics.avgViewsPerPost || 0}`);
            console.log(`      ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: ${metrics.avgReactionsPerPost || 0}`);
            console.log(`      üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: ${metrics.avgPostLength || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
            console.log(`      üñºÔ∏è –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: ${metrics.mediaPercentage || 0}%`);
            console.log(`      üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: ${metrics.forwardPercentage || 0}%`);
            if (metrics.lastPostDate) {
              console.log(`      üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${new Date(metrics.lastPostDate).toLocaleDateString()}`);
            }
            console.log('');
          }

          const analysis = channel.aiAnalysis;
          if (analysis && !analysis.error) {
            const scoreEmoji = analysis.qualityScore >= 8 ? 'üåü' : 
                              analysis.qualityScore >= 6 ? '‚≠ê' : 
                              analysis.qualityScore >= 4 ? 'üî∂' : 'üî∏';
            
            console.log(`   ${scoreEmoji} AI –†–µ–π—Ç–∏–Ω–≥: ${analysis.qualityScore}/10`);
            console.log(`   üéØ –í–µ—Ä–¥–∏–∫—Ç: ${analysis.verdict}`);
            console.log(`   üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.educationalValue}/10`);
            console.log(`   üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: ${analysis.commercialIndex}/10`);
            console.log(`   üìù –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${analysis.contentType}`);
            console.log(`   üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${analysis.targetAudience}`);
            console.log(`   üí≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${analysis.recommendation}`);
            
            if (analysis.warnings && analysis.warnings.length > 0) {
              console.log(`   ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${analysis.warnings.join(', ')}`);
            }
          } else {
            console.log(`   ‚ùå AI –∞–Ω–∞–ª–∏–∑: ${analysis?.error || '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
          }
          
          if (channel.username) console.log(`   üîó @${channel.username}`);
          console.log('');
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞
        const stats = this.smartSearch.getAIAnalysisStats(results);
        console.log('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê AI –ê–ù–ê–õ–ò–ó–ê:');
        console.log(`   üîç –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${stats.analyzed}/${stats.total}`);
        console.log(`   ‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${stats.avgScore}/10`);
        console.log(`   üåü –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${stats.highQuality}`);
        console.log(`   üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ: ${stats.educational}`);
        console.log(`   üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ: ${stats.commercial}`);
        console.log(`   ‚ö†Ô∏è –° –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: ${stats.withWarnings}`);
      }
      
      return results;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Ç–∞
   */
  async testChatFormatting(query) {
    try {
      console.log(`\nüí¨ –¢–ï–°–¢ –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ß–ê–¢–ê: "${query}"`);
      console.log('='.repeat(60));
      
      const results = await this.smartSearch.smartSearch(query, { 
        limit: 5,
        aiAnalysisLimit: 3,
        analysisDelay: 800
      });
      
      const formattedMessage = this.smartSearch.formatSmartResultsForChat(results, query);
      
      console.log('üì± –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –ß–ê–¢–ê:');
      console.log('-'.repeat(60));
      console.log(formattedMessage);
      console.log('-'.repeat(60));
      
      console.log(`üìè –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${formattedMessage.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      
      return formattedMessage;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return null;
    }
  }

  /**
   * –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ AI –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   */
  async testAIFiltering(query) {
    try {
      console.log(`\nüîç –¢–ï–°–¢ AI –§–ò–õ–¨–¢–†–ê–¶–ò–ò: "${query}"`);
      console.log('='.repeat(60));
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
      const allResults = await this.smartSearch.smartSearch(query, { 
        limit: 10,
        aiAnalysisLimit: 8,
        analysisDelay: 500
      });
      
      console.log(`üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${allResults.length} –∫–∞–Ω–∞–ª–æ–≤`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      const highQuality = this.smartSearch.filterByAICriteria(allResults, {
        minQualityScore: 7,
        maxCommercialIndex: 5
      });
      
      console.log(`üåü –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ (—Ä–µ–π—Ç–∏–Ω–≥ ‚â•7, –∫–æ–º–º–µ—Ä—Ü–∏—è ‚â§5): ${highQuality.length}`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      const educational = this.smartSearch.filterByAICriteria(allResults, {
        minEducationalValue: 6,
        excludeWarnings: true
      });
      
      console.log(`üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ (—Ü–µ–Ω–Ω–æ—Å—Ç—å ‚â•6, –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π): ${educational.length}`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (highQuality.length > 0) {
        console.log('\nüåü –¢–û–ü –í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ö–ê–ù–ê–õ–´:');
        highQuality.slice(0, 3).forEach((channel, index) => {
          const analysis = channel.aiAnalysis;
          console.log(`${index + 1}. ${channel.title} - ${analysis.qualityScore}/10 - ${analysis.verdict}`);
        });
      }
      
      return { allResults, highQuality, educational };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
   */
  async runFullTest() {
    const testQueries = ['–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'];
    
    console.log('üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ê AI –ü–û–ò–°–ö–ê');
    console.log('='.repeat(70));
    
    for (const query of testQueries) {
      console.log(`\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–ê: "${query}"`);
      console.log('*'.repeat(50));
      
      // –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫
      await this.testQuickSearch(query);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
      await this.delay(2000);
      
      // –£–º–Ω—ã–π –ø–æ–∏—Å–∫
      await this.testSmartSearch(query);
      
      // –ñ–¥–µ–º –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(3000);
    }
    
    // –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await this.testChatFormatting('bitcoin');
    
    // –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    await this.testAIFiltering('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ');
    
    console.log('\n‚úÖ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

async function runTests() {
  const tester = new AISearchTester();
  
  try {
    await tester.init();
    
    if (process.argv[2]) {
      // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const query = process.argv.slice(2).join(' ');
      
      if (query === 'quick') {
        await tester.testQuickSearch('telegram');
      } else if (query === 'smart') {
        await tester.testSmartSearch('bitcoin');
      } else if (query === 'format') {
        await tester.testChatFormatting('–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è');
      } else if (query === 'filter') {
        await tester.testAIFiltering('–Ω–æ–≤–æ—Å—Ç–∏');
      } else {
        await tester.testSmartSearch(query);
      }
    } else {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await tester.runFullTest();
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

console.log('üöÄ AI SEARCH TESTER');
console.log('==================');
console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
console.log('  node test-ai-search.js          - –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç');
console.log('  node test-ai-search.js quick     - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫');
console.log('  node test-ai-search.js smart     - —É–º–Ω—ã–π –ø–æ–∏—Å–∫');
console.log('  node test-ai-search.js format    - —Ç–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
console.log('  node test-ai-search.js filter    - —Ç–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏');
console.log('  node test-ai-search.js [–∑–∞–ø—Ä–æ—Å]  - –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É');
console.log('');

runTests();
