require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class DialogDebugger {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –û—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
  async debugAllDialogs() {
    try {
      console.log('üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...');
      
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${dialogs.dialogs.length} –¥–∏–∞–ª–æ–≥–æ–≤`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${dialogs.chats.length} —á–∞—Ç–æ–≤/–∫–∞–Ω–∞–ª–æ–≤`);
      console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${dialogs.users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
      
      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤:');
      console.log('=' .repeat(60));

      let channelCount = 0;
      let groupCount = 0;
      let userCount = 0;

      for (let i = 0; i < Math.min(dialogs.dialogs.length, 20); i++) {
        const dialog = dialogs.dialogs[i];
        const peer = dialog.peer;
        
        console.log(`\n${i + 1}. –î–∏–∞–ª–æ–≥:`);
        console.log(`   Peer —Ç–∏–ø: ${peer.className}`);
        console.log(`   Dialog –¥–∞–Ω–Ω—ã–µ:`, JSON.stringify(dialog, null, 2));
        
        if (peer.className === 'PeerChannel') {
          const channelId = peer.channelId;
          console.log(`   –ò—â—É –∫–∞–Ω–∞–ª —Å ID: ${channelId}`);
          
          const channel = dialogs.chats.find(chat => chat.id === channelId);
          
          if (channel) {
            channelCount++;
            console.log(`   üì∫ –ö–∞–Ω–∞–ª: ${channel.title}`);
            console.log(`   Username: @${channel.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
            console.log(`   –¢–∏–ø: ${channel.className}`);
            console.log(`   Broadcast: ${channel.broadcast}`);
            console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${channel.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–æ–µ–Ω–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É
            const title = channel.title.toLowerCase();
            if (title.includes('–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç') || title.includes('–≤–æ–µ–Ω') || 
                title.includes('–∞—Ä–º–∏—è') || title.includes('military') ||
                title.includes('defense') || title.includes('army')) {
              console.log(`   üéØ –í–û–ï–ù–ù–ê–Ø –¢–ï–ú–ê–¢–ò–ö–ê –ù–ê–ô–î–ï–ù–ê!`);
            }
          } else {
            console.log(`   ‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤`);
            console.log(`   –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:`, dialogs.chats.map(c => ({id: c.id, title: c.title})).slice(0, 5));
          }
        } else if (peer.className === 'PeerChat') {
          groupCount++;
          const chat = dialogs.chats.find(c => c.id === peer.chatId);
          if (chat) {
            console.log(`   üë• –ì—Ä—É–ø–ø–∞: ${chat.title}`);
            console.log(`   –¢–∏–ø: ${chat.className}`);
          }
        } else if (peer.className === 'PeerUser') {
          userCount++;
          const user = dialogs.users.find(u => u.id === peer.userId);
          if (user) {
            console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.firstName} ${user.lastName || ''}`);
            console.log(`   Username: @${user.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          }
        }
      }

      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
      console.log(`   –ö–∞–Ω–∞–ª–æ–≤: ${channelCount}`);
      console.log(`   –ì—Ä—É–ø–ø: ${groupCount}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount}`);

      // –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∫–∞–Ω–∞–ª–æ–≤ —Å –≤–æ–µ–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π
      console.log(`\nüéØ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –≤–æ–µ–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π:`);
      console.log('=' .repeat(60));

      for (let dialog of dialogs.dialogs) {
        const peer = dialog.peer;
        
        if (peer.className === 'PeerChannel') {
          const channelId = peer.channelId;
          const channel = dialogs.chats.find(chat => chat.id === channelId);
          
          if (channel) {
            const title = channel.title.toLowerCase();
            const username = (channel.username || '').toLowerCase();
            
            if (title.includes('–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç') || title.includes('–≤–æ–µ–Ω') || 
                title.includes('–∞—Ä–º–∏—è') || title.includes('military') ||
                title.includes('defense') || title.includes('army') ||
                username.includes('militarist') || username.includes('military') ||
                username.includes('army') || username.includes('defense')) {
              
              console.log(`\nüéØ –ù–ê–ô–î–ï–ù –í–û–ï–ù–ù–´–ô –ö–ê–ù–ê–õ:`);
              console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${channel.title}`);
              console.log(`   Username: @${channel.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
              console.log(`   ID: ${channel.id}`);
              console.log(`   –¢–∏–ø: ${channel.className}`);
              console.log(`   Broadcast: ${channel.broadcast}`);
              console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${channel.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
              console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${channel.about || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
            }
          }
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', error);
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function debugDialogs() {
  const dialogDebugger = new DialogDebugger();
  
  try {
    await dialogDebugger.init();
    await dialogDebugger.debugAllDialogs();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await dialogDebugger.close();
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ª–∞–¥–∫–∏
if (require.main === module) {
  debugDialogs();
}

module.exports = { DialogDebugger };
