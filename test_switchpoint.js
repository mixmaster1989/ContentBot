// –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ switchpoint/router
const { OpenRouterManager } = require('./telegram_parser/dist/ai/openrouter-manager');

async function testSwitchpointModel() {
  const ai = OpenRouterManager.get();
  const prompt = '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ü–û (50 —Å–ª–æ–≤) —Å —ç–º–æ–¥–∑–∏ üöÄüíª';
  
  try {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å: switchpoint/router');
    console.log('='.repeat(60));
    
    const result = await ai.makeRequest([
      { role: 'user', content: prompt }
    ], 'switchpoint/router', {
      max_tokens: 200,
      temperature: 0.7
    });
    
    console.log('\nüìã –ü–û–õ–ù–´–ô –°–´–†–û–ô –û–¢–í–ï–¢:');
    console.log('='.repeat(60));
    
    // –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
    const fullResponse = JSON.stringify(result, null, 2);
    console.log(fullResponse);
    
    console.log('\nüìù –¢–û–õ–¨–ö–û –¢–ï–ö–°–¢:');
    console.log('='.repeat(60));
    
    const text = result?.choices?.[0]?.message?.content || result?.text || '–ù–ï–¢ –¢–ï–ö–°–¢–ê';
    console.log(text);
    
    console.log('\nüîç –ê–ù–ê–õ–ò–ó:');
    console.log('='.repeat(60));
    
    if (text && text !== '–ù–ï–¢ –¢–ï–ö–°–¢–ê') {
      console.log(`‚úÖ switchpoint/router - –†–ê–ë–û–¢–ê–ï–¢`);
      console.log(`üìä –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`üéØ –ö–∞—á–µ—Å—Ç–≤–æ: ${text.includes('üöÄ') && text.includes('üíª') ? '–•–æ—Ä–æ—à–µ–µ (–µ—Å—Ç—å —ç–º–æ–¥–∑–∏)' : '–°—Ä–µ–¥–Ω–µ–µ'}`);
      return { model: 'switchpoint/router', status: 'working', response: text, fullResponse };
    } else {
      console.log(`‚ùå switchpoint/router - –ù–ï–¢ –û–¢–í–ï–¢–ê`);
      return { model: 'switchpoint/router', status: 'no_response', fullResponse };
    }
    
  } catch (error) {
    console.log(`‚ùå switchpoint/router - –û–®–ò–ë–ö–ê: ${error.message}`);
    return { model: 'switchpoint/router', status: 'error', error: error.message };
  }
}

async function main() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ switchpoint/router...\n');
  
  const result = await testSwitchpointModel();
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('='.repeat(60));
  
  if (result.status === 'working') {
    console.log('‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('üìù –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:');
    console.log(result.response.substring(0, 200) + '...');
  } else if (result.status === 'error') {
    console.log('‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:');
    console.log(result.error);
  } else {
    console.log('‚ö†Ô∏è –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
  }
}

main().catch(console.error);

