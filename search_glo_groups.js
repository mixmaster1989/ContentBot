const { TelegramApi } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const path = require("path");

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require("dotenv").config();

const apiId = parseInt(process.env.TELEGRAM_API_ID);
const apiHash = process.env.TELEGRAM_API_HASH;
const sessionString = process.env.TELEGRAM_SESSION_STRING;

if (!apiId || !apiHash || !sessionString) {
    console.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_API_ID, TELEGRAM_API_HASH –∏–ª–∏ TELEGRAM_SESSION_STRING");
    process.exit(1);
}

const client = new TelegramApi(new StringSession(sessionString), apiId, apiHash, {
    connectionRetries: 5,
});

async function searchGloGroups() {
    try {
        console.log("üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...");
        await client.connect();
        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram");
        
        // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ GLO
        const searchTerms = [
            "glo",
            "–≥–ª–æ", 
            "—Å—Ç–∏–∫–∏ glo",
            "—Å—Ç–∏–∫–∏ neo",
            "glo hyper",
            "glo pro",
            "–Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å —Ç–∞–±–∞–∫–∞",
            "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ glo",
            "–¥–µ—à–µ–≤–æ glo",
            "–∞–∫—Ü–∏—è glo",
            "–æ–ø—Ç glo"
        ];
        
        const results = [];
        
        for (const term of searchTerms) {
            console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${term}"`);
            
            try {
                const result = await client.invoke(new Api.contacts.Search({
                    q: term,
                    limit: 50
                }));
                
                if (result.chats && result.chats.length > 0) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${result.chats.length} —á–∞—Ç–æ–≤ –¥–ª—è "${term}"`);
                    
                    for (const chat of result.chats) {
                        if (chat.className === "Channel" || chat.className === "Chat") {
                            const chatInfo = {
                                id: chat.id.toString(),
                                title: chat.title || "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
                                username: chat.username || null,
                                participantsCount: chat.participantsCount || 0,
                                type: chat.className,
                                searchTerm: term,
                                description: chat.about || ""
                            };
                            
                            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            if (chatInfo.participantsCount > 10 && 
                                (chatInfo.title.toLowerCase().includes("glo") || 
                                 chatInfo.title.toLowerCase().includes("–≥–ª–æ") ||
                                 chatInfo.description.toLowerCase().includes("glo") ||
                                 chatInfo.description.toLowerCase().includes("–≥–ª–æ"))) {
                                results.push(chatInfo);
                                console.log(`üì∫ ${chatInfo.title} (@${chatInfo.username || "–Ω–µ—Ç"}) - ${chatInfo.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                            }
                        }
                    }
                } else {
                    console.log(`‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è "${term}"`);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 1000));
                
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è "${term}":`, error.message);
            }
        }
        
        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        const uniqueResults = results.filter((chat, index, self) => 
            index === self.findIndex(c => c.id === chat.id)
        );
        
        console.log(`\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
        console.log(`üìà –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø: ${uniqueResults.length}`);
        
        if (uniqueResults.length > 0) {
            console.log(`\nüìã –°–ü–ò–°–û–ö –ù–ê–ô–î–ï–ù–ù–´–• –ì–†–£–ü–ü GLO:`);
            console.log("=".repeat(80));
            
            uniqueResults.forEach((chat, index) => {
                console.log(`${index + 1}. üì∫ ${chat.title}`);
                console.log(`   üÜî ID: ${chat.id}`);
                console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chat.participantsCount}`);
                console.log(`   üìä –¢–∏–ø: ${chat.type}`);
                console.log(`   üë§ Username: @${chat.username || "–Ω–µ—Ç"}`);
                console.log(`   üîç –ù–∞–π–¥–µ–Ω –ø–æ: ${chat.searchTerm}`);
                if (chat.description) {
                    console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${chat.description.substring(0, 100)}...`);
                }
                console.log("");
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
            const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
            const filename = `glo_groups_${timestamp}.json`;
            const filepath = path.join(__dirname, "logs", filename);
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!fs.existsSync(path.join(__dirname, "logs"))) {
                fs.mkdirSync(path.join(__dirname, "logs"));
            }
            
            fs.writeFileSync(filepath, JSON.stringify(uniqueResults, null, 2));
            console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${filepath}`);
        }
        
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:", error);
    } finally {
        await client.disconnect();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
searchGloGroups();
