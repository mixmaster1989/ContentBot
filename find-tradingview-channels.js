require('dotenv').config();
const SmartGlobalSearch = require('./core/smart-global-search');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');

class TradingViewChannelsFinder {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.smartSearch = new SmartGlobalSearch();
    
    // 100 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¢–í –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    this.tradingViewKeywords = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      'RSI', 'MACD', 'Bollinger Bands', 'Moving Average', 'SMA', 'EMA', 'WMA',
      'Stochastic', 'Williams %R', 'CCI', 'ATR', 'ADX', 'Parabolic SAR',
      'Ichimoku', 'Fibonacci', 'Pivot Points', 'Support Resistance',
      
      // –¢—Ä–µ–π–¥–∏–Ω–≥ —Ç–µ—Ä–º–∏–Ω—ã
      'TradingView', 'Trading Signals', 'Technical Analysis', 'Chart Patterns',
      'Candlestick', 'Volume Profile', 'Order Flow', 'Market Structure',
      'Trend Lines', 'Channel', 'Triangle', 'Head Shoulders', 'Double Top',
      'Flag Pattern', 'Pennant', 'Wedge', 'Cup Handle',
      
      // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
      'Volatility', 'VIX', 'BB Squeeze', 'Keltner Channel', 'Donchian Channel',
      'Standard Deviation', 'Average True Range', 'Volatility Index',
      
      // –û–±—ä–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      'Volume', 'OBV', 'Volume Weighted', 'Money Flow', 'Accumulation Distribution',
      'Chaikin Oscillator', 'Volume Rate', 'Ease of Movement',
      
      // –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      'Momentum', 'Rate of Change', 'ROC', 'Commodity Channel Index',
      'Relative Strength', 'Price Oscillator', 'Ultimate Oscillator',
      
      // –û—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
      'Oscillator', 'MACD Histogram', 'MACD Signal', 'MACD Line',
      'Stochastic %K', 'Stochastic %D', 'Williams %R', 'RSI Divergence',
      
      // –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
      'MA Crossover', 'Golden Cross', 'Death Cross', 'MA Ribbon',
      'MA Envelope', 'MA Convergence', 'MA Divergence', 'MA Support',
      
      // –§–∏–±–æ–Ω–∞—á—á–∏
      'Fibonacci Retracement', 'Fibonacci Extension', 'Fibonacci Fan',
      'Fibonacci Arc', 'Fibonacci Time Zones', 'Fibonacci Projection',
      
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã
      'Chart Pattern', 'Reversal Pattern', 'Continuation Pattern',
      'Harmonic Pattern', 'Elliott Wave', 'Gartley Pattern', 'Butterfly Pattern',
      
      // –ö—Ä–∏–ø—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
      'Crypto Indicators', 'Bitcoin Analysis', 'Ethereum Signals',
      'Altcoin Trading', 'DeFi Indicators', 'NFT Trading',
      
      // –ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥
      'Algorithmic Trading', 'Bot Trading', 'Automated Trading',
      'Strategy Backtesting', 'Quantitative Analysis', 'Machine Learning Trading',
      
      // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä—ã–Ω–∫–∞
      'Market Sentiment', 'Fear Greed Index', 'Put Call Ratio',
      'VIX Fear Index', 'Market Psychology', 'Behavioral Finance'
    ];
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –¢–í –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏...');
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      await this.smartSearch.init(this.client);
      console.log('‚úÖ SmartGlobalSearch –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async findTradingViewChannels() {
    console.log(`üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –¢–í –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –ø–æ ${this.tradingViewKeywords.length} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...`);
    
    const allChannels = new Map(); // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    let processedKeywords = 0;
    
    for (const keyword of this.tradingViewKeywords) {
      try {
        console.log(`\nÔøΩÔøΩ –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: "${keyword}"`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É SmartGlobalSearch
        const results = await this.smartSearch.smartSearch(keyword, {
          limit: 5, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          aiAnalysisLimit: 3,
          analysisDelay: 1000
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} –∫–∞–Ω–∞–ª–æ–≤ –ø–æ "${keyword}"`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        results.forEach(channel => {
          const key = channel.id || channel.title;
          if (!allChannels.has(key)) {
            allChannels.set(key, {
              ...channel,
              foundByKeywords: [keyword]
            });
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–∞–Ω–∞–ª—É
            const existing = allChannels.get(key);
            if (!existing.foundByKeywords.includes(keyword)) {
              existing.foundByKeywords.push(keyword);
            }
          }
        });
        
        processedKeywords++;
        console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${processedKeywords}/${this.tradingViewKeywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
        await this.delay(2000);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ "${keyword}":`, error.message);
        continue;
      }
    }
    
    console.log(`\nüéØ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù!`);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${allChannels.size}`);
    
    return Array.from(allChannels.values());
  }

  async analyzeResults(channels) {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const sortedChannels = channels.sort((a, b) => b.foundByKeywords.length - a.foundByKeywords.length);
    
    // –¢–æ–ø-20 –∫–∞–Ω–∞–ª–æ–≤
    console.log('\nüèÜ –¢–û–ü-20 –ö–ê–ù–ê–õ–û–í –° –¢–í –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò:');
    sortedChannels.slice(0, 20).forEach((channel, index) => {
      console.log(`\n${index + 1}. üì∫ ${channel.title}`);
      console.log(`   üë• ${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
      console.log(`   üîç –ù–∞–π–¥–µ–Ω –ø–æ ${channel.foundByKeywords.length} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:`);
      console.log(`   üìù ${channel.foundByKeywords.slice(0, 5).join(', ')}${channel.foundByKeywords.length > 5 ? '...' : ''}`);
      
      if (channel.aiAnalysis && !channel.aiAnalysis.error) {
        console.log(`   üß† AI –†–µ–π—Ç–∏–Ω–≥: ${channel.aiAnalysis.qualityScore}/10`);
        console.log(`   üéØ ${channel.aiAnalysis.verdict}`);
      }
      
      if (channel.username) {
        console.log(`   üîó @${channel.username}`);
      }
    });
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywordStats = {};
    channels.forEach(channel => {
      channel.foundByKeywords.forEach(keyword => {
        keywordStats[keyword] = (keywordStats[keyword] || 0) + 1;
      });
    });
    
    const topKeywords = Object.entries(keywordStats)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 10);
    
    console.log('\nüìà –¢–û–ü-10 –°–ê–ú–´–• –≠–§–§–ï–ö–¢–ò–í–ù–´–• –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í:');
    topKeywords.forEach(([keyword, count], index) => {
      console.log(`${index + 1}. "${keyword}" - ${count} –∫–∞–Ω–∞–ª–æ–≤`);
    });
    
    return sortedChannels;
  }

  async saveResults(channels) {
    const fs = require('fs').promises;
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    const jsonFile = `tradingview_channels_${timestamp}.json`;
    await fs.writeFile(jsonFile, JSON.stringify(channels, null, 2));
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${jsonFile}`);
    
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç
    const reportFile = `tradingview_report_${timestamp}.txt`;
    let report = `–û–¢–ß–ï–¢ –ü–û–ò–°–ö–ê –ö–ê–ù–ê–õ–û–í –° –¢–í –ò–ù–î–ò–ö–ê–¢–û–†–ê–ú–ò\n`;
    report += `–î–∞—Ç–∞: ${new Date().toLocaleString()}\n`;
    report += `–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${channels.length}\n`;
    report += `–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${this.tradingViewKeywords.length}\n\n`;
    
    report += `–¢–û–ü-10 –ö–ê–ù–ê–õ–û–í:\n`;
    channels.slice(0, 10).forEach((channel, index) => {
      report += `${index + 1}. ${channel.title} (${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n`;
      report += `   –ù–∞–π–¥–µ–Ω –ø–æ: ${channel.foundByKeywords.join(', ')}\n`;
      if (channel.username) report += `   @${channel.username}\n`;
      report += `\n`;
    });
    
    await fs.writeFile(reportFile, report);
    console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${reportFile}`);
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

async function main() {
  const finder = new TradingViewChannelsFinder();
  
  try {
    await finder.init();
    const channels = await finder.findTradingViewChannels();
    const analyzedChannels = await finder.analyzeResults(channels);
    await finder.saveResults(analyzedChannels);
    
    console.log('\n‚úÖ –ü–û–ò–°–ö –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

if (require.main === module) {
  main();
}

module.exports = TradingViewChannelsFinder;
