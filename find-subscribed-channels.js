require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class SubscribedChannelFinder {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getAllDialogs() {
    try {
      console.log('üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...');
      
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${dialogs.dialogs.length} –¥–∏–∞–ª–æ–≥–æ–≤`);
      return dialogs;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      return null;
    }
  }

  // –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  async findChannelsByKeyword(keyword) {
    try {
      const dialogs = await this.getAllDialogs();
      if (!dialogs) return [];

      const foundChannels = [];
      const keywordLower = keyword.toLowerCase();

      console.log(`üîç –ò—â—É –∫–∞–Ω–∞–ª—ã —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "${keyword}" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏...`);

      for (let dialog of dialogs.dialogs) {
        const peer = dialog.peer;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã
        if (peer.className === 'PeerChannel') {
          const channelId = peer.channelId;
          
          // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
          const channel = dialogs.chats.find(chat => 
            chat.id === channelId
          );

          if (channel) {
            const title = channel.title || '';
            const username = channel.username || '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ username
            if (title.toLowerCase().includes(keywordLower) || 
                username.toLowerCase().includes(keywordLower)) {
              
              foundChannels.push({
                id: channel.id,
                title: channel.title,
                username: channel.username,
                type: channel.className,
                participants: channel.participantsCount,
                description: channel.about,
                isChannel: channel.broadcast,
                isGroup: !channel.broadcast
              });

              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: ${title} (@${username || '–±–µ–∑ username'})`);
            }
          }
        }
      }

      return foundChannels;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:', error);
      return [];
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showAllChannels() {
    try {
      const dialogs = await this.getAllDialogs();
      if (!dialogs) return;

      console.log('\nüì∫ –í—Å–µ –≤–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã:');
      console.log('=' .repeat(50));

      const channels = [];
      
      for (let dialog of dialogs.dialogs) {
        const peer = dialog.peer;
        
        if (peer.className === 'PeerChannel') {
          const channelId = peer.channelId;
          const channel = dialogs.chats.find(chat => 
            chat.id === channelId
          );

          if (channel) {
            channels.push({
              id: channel.id,
              title: channel.title,
              username: channel.username,
              type: channel.className,
              participants: channel.participantsCount,
              isChannel: channel.broadcast,
              isGroup: !channel.broadcast
            });
          }
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
      channels.sort((a, b) => a.title.localeCompare(b.title));

      channels.forEach((channel, index) => {
        const type = channel.isChannel ? 'üì∫ –ö–∞–Ω–∞–ª' : 'üë• –ì—Ä—É–ø–ø–∞';
        const username = channel.username ? `@${channel.username}` : '–±–µ–∑ username';
        const participants = channel.participants ? `(${channel.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)` : '';
        
        console.log(`${index + 1}. ${type}: ${channel.title}`);
        console.log(`   Username: ${username} ${participants}`);
        console.log(`   ID: ${channel.id}`);
        console.log('');
      });

      console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${channels.length} –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞–Ω–∞–ª–æ–≤:', error);
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
async function findMilitaristInSubscriptions() {
  const finder = new SubscribedChannelFinder();
  
  try {
    await finder.init();
    
    console.log('üéØ –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ "–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç" —Å—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫...\n');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
    await finder.showAllChannels();
    
    // –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const keywords = ['–º–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç', '–≤–æ–µ–Ω–Ω—ã–µ', '–∞—Ä–º–∏—è', 'military', 'defense', '–≤–æ–µ–Ω', 'army'];
    
    for (let keyword of keywords) {
      console.log(`\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: "${keyword}"`);
      const foundChannels = await finder.findChannelsByKeyword(keyword);
      
      if (foundChannels.length > 0) {
        console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å "${keyword}":`);
        console.log('=' .repeat(50));
        
        foundChannels.forEach((channel, index) => {
          console.log(`${index + 1}. ${channel.title}`);
          console.log(`   Username: @${channel.username || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
          console.log(`   ID: ${channel.id}`);
          console.log(`   –¢–∏–ø: ${channel.type}`);
          console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${channel.participants || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
          console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${channel.description || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
          console.log('');
        });
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    console.log('\n‚ùå –ö–∞–Ω–∞–ª—ã —Å –≤–æ–µ–Ω–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤–µ');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await finder.close();
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
if (require.main === module) {
  findMilitaristInSubscriptions();
}

module.exports = { SubscribedChannelFinder };
