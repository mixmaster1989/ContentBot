// Global search -> parse -> LLM rewrite -> post via Bot API
// Usage: node scripts/global_search_post.js "channelChatId"

const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const { LLMRewriter } = require('../llm/llm-rewriter');
const { Bot } = require('grammy');

function sanitizeStrict(s) {
  if (!s) return '';
  let out = '';
  const n = (s + '').normalize('NFC');
  for (const ch of n) {
    const cp = ch.codePointAt(0);
    if (cp === undefined) continue;
    if (
      (cp >= 0x00 && cp <= 0x1f) || cp === 0x7f || (cp >= 0x80 && cp <= 0x9f) ||
      (cp >= 0xd800 && cp <= 0xdfff) || (cp >= 0xfdd0 && cp <= 0xfdef) ||
      ((cp & 0xffff) === 0xfffe) || ((cp & 0xffff) === 0xffff) ||
      (cp >= 0x200b && cp <= 0x200f) || (cp >= 0x202a && cp <= 0x202e) ||
      (cp >= 0x2060 && cp <= 0x206f)
    ) {
      continue;
    }
    out += ch;
  }
  out = out
    .replace(/[\u2010-\u2015]/g, '-')
    .replace(/[\u2190-\u21FF]/g, '‚Üí');
  return out;
}

async function findTopChannels(client, query, limit = 5) {
  // –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —á–µ—Ä–µ–∑ contacts.Search
  const search = await client.invoke(new Api.contacts.Search({ q: query, limit: 20 }));
  const channels = (search.chats || []).filter((c) => c.className === 'Channel');
  
  if (channels.length === 0) return [];
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –±–µ—Ä–µ–º —Ç–æ–ø
  const sortedChannels = channels
    .filter(ch => (ch.participantsCount || 0) > 100) // –ú–∏–Ω–∏–º—É–º 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    .sort((a, b) => (b.participantsCount || 0) - (a.participantsCount || 0))
    .slice(0, limit);
  
  return sortedChannels;
}

async function fetchChannelContent(client, channel, postsCount = 2) {
  const res = await client.invoke(
    new Api.messages.GetHistory({ peer: channel, limit: 50 })
  );
  const msgs = (res.messages || []).filter((m) => m.message && typeof m.message === 'string');
  
  // –ë–µ—Ä–µ–º –ª—É—á—à–∏–µ –ø–æ—Å—Ç—ã (–¥–ª–∏–Ω–Ω—ã–µ, –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ)
  const goodPosts = msgs
    .map((m) => m.message.trim())
    .filter((t) => t.length >= 120 && t.length <= 2000) // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
    .filter((t) => !t.includes('http') && !t.includes('@') && !t.includes('#—Ä–µ–∫–ª–∞–º–∞'))
    .slice(0, postsCount);
  
  return goodPosts;
}

async function synthesizeContent(llm, posts, topic, style) {
  if (posts.length === 0) return null;
  
  const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–π —Å–∏–ª—å–Ω—ã–π, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π Telegram-–ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É "${topic}" –≤ —Å—Ç–∏–ª–µ "${style}" –¥–ª—è –∫–∞–Ω–∞–ª–∞.

–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ—Å—Ç—ã:
${posts.map((post, i) => `–ü–æ—Å—Ç ${i+1}: ${post}`).join('\n\n')}

–ü–∏—à–∏ –ø–æ —ç—Ç–∞–ø–∞–º:
1. –ö—Ä–∞—Ç–∫–∏–π —Ü–µ–ø–ª—è—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —ç–º–æ–¥–∑–∏
2. 1-2 –∞–±–∑–∞—Ü–∞ –∏–Ω—Ç—Ä–∏–≥—É—é—â–µ–≥–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å, –∫–µ–π—Å, –∫—Ä—é—á–æ–∫)
3. –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å: —Ä–∞—Å–∫—Ä–æ–π –∏–¥–µ—é, –æ–±—ä–µ–¥–∏–Ω–∏ –ª—É—á—à–∏–µ –º—ã—Å–ª–∏, –¥–æ–±–∞–≤—å –ø—Ä–∏–º–µ—Ä—ã/–∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç
4. –ö–æ—Ä–æ—Ç–∫–æ–µ –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é (CTA) ‚Äî –≤–æ–ø—Ä–æ—Å, ¬´–æ—Ç–≤–µ—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö¬ª, ¬´—Ä–µ–∞–≥–∏—Ä—É–π¬ª, ¬´—É–∑–Ω–∞–π –±–æ–ª—å—à–µ¬ª –∏ –¥—Ä.
5. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π: —Ä–∞–∑–±–∏–≤–∞–π —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã, –¥–æ–±–∞–≤–ª—è–π —Å–ø–∏—Å–∫–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç–∏–ø–∞ ‚óè‚Äî‚óè, üü¶

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü–æ—Å—Ç –¥–ª–∏–Ω–æ–π 150-200 —Å–ª–æ–≤
- –≠–º–æ–¥–∑–∏ —Ç–∞–º, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ
- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –±–µ–∑ ¬´–≤–æ–¥—ã¬ª –∏ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø—Ä–æ–º–ø—Ç—ã, —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ—É, ¬´–ü–æ—Å—Ç‚Ä¶¬ª
- –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π, —É–Ω–∏–∫–∞–ª—å–Ω—ã–π Telegram-–ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`;

  const result = await llm.generateFromScratch(prompt, style);
  return result?.text || null;
}

async function main() {
  const targetChatId = process.argv[2] ? Number(process.argv[2]) : Number(process.env.TARGET_CHANNEL_ID);
  if (!targetChatId) throw new Error('TARGET_CHANNEL_ID is required');

  const themes = [
    { query: 'software architecture', style: '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π' },
    { query: 'large language models llm', style: '–º–æ—Ç–∏–≤–∞—Ü–∏—è' },
    { query: 'telegram mtproto', style: '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' },
    { query: 'pm2 nodejs deploy', style: '–±–∏–∑–Ω–µ—Å' },
    { query: 'security devops best practices', style: '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π' },
  ];

  const mt = MTProtoClient.get();
  const client = mt.getClient();
  await client.connect();

  const bot = new Bot(process.env.BOT_TOKEN);
  const llm = new LLMRewriter();

  const results = [];

  for (const t of themes) {
    try {
      console.log(`üîç –ò—â–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–µ–º–µ: ${t.query}`);
      
      // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–µ–º–µ
      const channels = await findTopChannels(client, t.query, 3);
      if (channels.length === 0) {
        results.push({ query: t.query, skip: 'no_channels' });
        continue;
      }
      
      console.log(`üì∫ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${channels.length}`);
      channels.forEach((ch, i) => {
        console.log(`  ${i+1}. ${ch.title} (${ch.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
      });
      
      // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
      const allPosts = [];
      for (const channel of channels) {
        const posts = await fetchChannelContent(client, channel, 2);
        allPosts.push(...posts);
      }
      
      if (allPosts.length === 0) {
        results.push({ query: t.query, channels: channels.length, skip: 'no_content' });
        continue;
      }
      
      console.log(`üìù –°–æ–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: ${allPosts.length}`);
      
      // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
      const synthesizedText = await synthesizeContent(llm, allPosts, t.query, t.style);
      if (!synthesizedText) {
        results.push({ query: t.query, posts: allPosts.length, skip: 'llm_failed' });
        continue;
      }
      
      // –û—á–∏—â–∞–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º
      let text = synthesizedText
        .replace(/<think>.*?<\/think>/gs, '')
        .replace(/‚öô|üî¨|üí°|üìù|üéØ/g, '')
        .replace(/^\s*[–ê-–Ø][–∞-—è]*\s*:/gm, '')
        .trim();
      
      text = sanitizeStrict(text);
      const res = await bot.api.sendMessage(targetChatId, text, { disable_web_page_preview: true });
      
      results.push({ 
        query: t.query, 
        channels: channels.length, 
        posts: allPosts.length, 
        messageId: res.message_id 
      });
      
      console.log(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å—Ç: ${res.message_id}`);
      
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è —Ç–µ–º—ã ${t.query}:`, e.message);
      results.push({ query: t.query, error: (e && e.message) || String(e) });
    }
  }

  console.log(JSON.stringify({ posted: results.filter(r=>r.messageId).length, results }, null, 2));
}

main().catch((e) => {
  console.error('PIPELINE_ERR', e && e.message || e);
  process.exit(1);
});



