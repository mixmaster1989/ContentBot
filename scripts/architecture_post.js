// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ ContentBot
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const { LLMRewriter } = require('../llm/llm-rewriter');
const { Bot } = require('grammy');

function sanitizeStrict(s) {
  if (!s) return '';
  let out = '';
  const n = (s + '').normalize('NFC');
  for (const ch of n) {
    const cp = ch.codePointAt(0);
    if (cp === undefined) continue;
    // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ (\n = 10, \r = 13)
    if (cp === 10 || cp === 13) {
      out += ch;
      continue;
    }
    if (
      (cp >= 0x00 && cp <= 0x1f) || cp === 0x7f || (cp >= 0x80 && cp <= 0x9f) ||
      (cp >= 0xd800 && cp <= 0xdfff) || (cp >= 0xfdd0 && cp <= 0xfdef) ||
      ((cp & 0xffff) === 0xfffe) || ((cp & 0xffff) === 0xffff) ||
      (cp >= 0x200b && cp <= 0x200f) || (cp >= 0x202a && cp <= 0x202e) ||
      (cp >= 0x2060 && cp <= 0x206f)
    ) {
      continue;
    }
    out += ch;
  }
  out = out
    .replace(/[\u2010-\u2015]/g, '-')
    .replace(/[\u2190-\u21FF]/g, '‚Üí');
  return out;
}

async function findTopChannels(client, query, limit = 3) {
  const search = await client.invoke(new Api.contacts.Search({ q: query, limit: 20 }));
  const channels = (search.chats || []).filter((c) => c.className === 'Channel');
  
  if (channels.length === 0) return [];
  
  const sortedChannels = channels
    .filter(ch => (ch.participantsCount || 0) > 100)
    .sort((a, b) => (b.participantsCount || 0) - (a.participantsCount || 0))
    .slice(0, limit);
  
  return sortedChannels;
}

async function fetchChannelContent(client, channel, postsCount = 2) {
  const res = await client.invoke(
    new Api.messages.GetHistory({ peer: channel, limit: 50 })
  );
  const msgs = (res.messages || []).filter((m) => m.message && typeof m.message === 'string');
  
  const goodPosts = msgs
    .map((m) => m.message.trim())
    .filter((t) => t.length >= 120 && t.length <= 2000)
    .filter((t) => !t.includes('http') && !t.includes('@') && !t.includes('#—Ä–µ–∫–ª–∞–º–∞'))
    .slice(0, postsCount);
  
  return goodPosts;
}

async function synthesizeContent(llm, posts, topic, style) {
  if (posts.length === 0) return null;
  
  const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –ø–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–π —Å–∏–ª—å–Ω—ã–π, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π Telegram-–ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É "${topic}" –≤ —Å—Ç–∏–ª–µ "${style}" –¥–ª—è –∫–∞–Ω–∞–ª–∞.

–ò—Å—Ö–æ–¥–Ω—ã–µ –ø–æ—Å—Ç—ã:
${posts.map((post, i) => `–ü–æ—Å—Ç ${i+1}: ${post}`).join('\n\n')}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

üöÄ **–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏** 

–ö–æ—Ä–æ—Ç–∫–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

‚óè‚Äî‚óè

**–û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å:**
‚Ä¢ –ü—É–Ω–∫—Ç 1
‚Ä¢ –ü—É–Ω–∫—Ç 2  
‚Ä¢ –ü—É–Ω–∫—Ç 3

üü¶ **–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –ø—Ä–∏–º–µ—Ä**

–í–æ–ø—Ä–æ—Å –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏

–≠–ú–û–î–ó–ò –î–õ–Ø TELEGRAM (–∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω–æ):
üöÄ - —Å—Ç–∞—Ä—Ç, –∑–∞–ø—É—Å–∫, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
üí° - –∏–¥–µ–∏, –∏–Ω—Å–∞–π—Ç—ã, –º—ã—Å–ª–∏
‚ö° - —ç–Ω–µ—Ä–≥–∏—è, —Å–∫–æ—Ä–æ—Å—Ç—å, –º–æ—Ç–∏–≤–∞—Ü–∏—è
üéØ - —Ü–µ–ª–∏, —Ñ–æ–∫—É—Å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç
üî• - —Ç—Ä–µ–Ω–¥—ã, –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ, –≥–æ—Ä—è—á–µ–µ
üíª - IT, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
ü§ñ - AI, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –±—É–¥—É—â–µ–µ
üìä - –¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üîß - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, —Ä–µ—à–µ–Ω–∏–µ
üåü - –∫–∞—á–µ—Å—Ç–≤–æ, –ø—Ä–µ–º–∏—É–º, –ª—É—á—à–∏–µ
üí™ - —Å–∏–ª–∞, –º–æ—Ç–∏–≤–∞—Ü–∏—è, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üéâ - —É—Å–ø–µ—Ö, –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–µ, —Ä–∞–¥–æ—Å—Ç—å
ü§î - —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –≤–æ–ø—Ä–æ—Å—ã, —Å–æ–º–Ω–µ–Ω–∏—è
üíØ - –æ—Ç–ª–∏—á–Ω–æ, –∏–¥–µ–∞–ª—å–Ω–æ, 100%
üö® - –≤–∞–∂–Ω–æ–µ, –≤–Ω–∏–º–∞–Ω–∏–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
üìà - —Ä–æ—Å—Ç, —Ä–∞–∑–≤–∏—Ç–∏–µ, –ø—Ä–æ–≥—Ä–µ—Å—Å
üé® - –∫—Ä–µ–∞—Ç–∏–≤, –¥–∏–∑–∞–π–Ω, –∏—Å–∫—É—Å—Å—Ç–≤–æ
üîç - –ø–æ–∏—Å–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑
üíé - —Ü–µ–Ω–Ω–æ—Å—Ç—å, –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ–µ, –∫–∞—á–µ—Å—Ç–≤–æ
üé™ - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, —è—Ä–∫–æ–µ

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ ‚óè‚Äî‚óè –∏ üü¶
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–µ–ª–∞–π —Å–ø–∏—Å–∫–∏ —Å ‚Ä¢ 
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –≤—ã–¥–µ–ª—è–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ **–∂–∏—Ä–Ω—ã–º**
- –ò—Å–ø–æ–ª—å–∑—É–π 3-5 —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ —É–º–µ—Å—Ç–Ω–æ
- –ü–æ—Å—Ç –¥–ª–∏–Ω–æ–π 150-200 —Å–ª–æ–≤
- –ù–ï –¥–æ–±–∞–≤–ª—è–π –ø—Ä–æ–º–ø—Ç—ã, —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ—É
- –¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`;

  // –í—Ä–µ–º–µ–Ω–Ω–æ –º–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å –Ω–∞ DeepSeek –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const originalModel = llm.modelRouting.primary;
  llm.modelRouting.primary = 'deepseek/deepseek-v3.1';
  
  const result = await llm.generateFromScratch(prompt, style);
  
  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
  llm.modelRouting.primary = originalModel;
  return result?.text || null;
}

async function main() {
  const targetChatId = -1003191582439; // FreemiumContentBot
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã ContentBot...');
  
  const mt = MTProtoClient.get();
  const client = mt.getClient();
  await client.connect();
  
  const bot = new Bot(process.env.BOT_TOKEN);
  const llm = new LLMRewriter();
  
  const topic = 'software architecture';
  const style = '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏';
  
  try {
    console.log(`üîç –ò—â–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ —Ç–µ–º–µ: ${topic}`);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ø –∫–∞–Ω–∞–ª—ã
    const channels = await findTopChannels(client, topic, 3);
    if (channels.length === 0) {
      console.log('‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    console.log(`üì∫ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${channels.length}`);
    channels.forEach((ch, i) => {
      console.log(`  ${i+1}. ${ch.title} (${ch.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
    });
    
    // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const allPosts = [];
    for (const channel of channels) {
      const posts = await fetchChannelContent(client, channel, 2);
      allPosts.push(...posts);
    }
    
    if (allPosts.length === 0) {
      console.log('‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üìù –°–æ–±—Ä–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: ${allPosts.length}`);
    
    // –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ LLM
    const synthesizedText = await synthesizeContent(llm, allPosts, topic, style);
    if (!synthesizedText) {
      console.log('‚ùå LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ø–æ—Å—Ç');
      return;
    }
    
    // –û—á–∏—â–∞–µ–º –∏ –ø—É–±–ª–∏–∫—É–µ–º
    let text = synthesizedText
      .replace(/<think>.*?<\/think>/gs, '')
      .replace(/‚öô|üî¨|üí°|üìù|üéØ/g, '')
      .replace(/^\s*[–ê-–Ø][–∞-—è]*\s*:/gm, '')
      .trim();
    
    // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    text = text
      .replace(/‚óè-‚óè/g, '\n\n‚óè‚Äî‚óè\n\n')  // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
      .replace(/üü¶/g, '\n\nüü¶')         // –ë–ª–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º
      .replace(/\*\*([^*]+)\*\*/g, '\n\n**$1**\n\n') // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
      .replace(/\r\n/g, '\n')         // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
      .replace(/\r/g, '\n')
      .replace(/\n{3,}/g, '\n\n')     // –ù–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
      .replace(/\s+\n/g, '\n')        // –£–±–∏—Ä–∞–µ–º —Ö–≤–æ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–Ω–æ—Å–æ–º
      .replace(/\n\s+/g, '\n')        // –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
      .replace(/\s+$/gm, '')            // –•–≤–æ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–∞—Ö
      .replace(/\n?\s*‚Ä¢\s*/g, '\n\n‚Ä¢ ') // –°–ø–∏—Å–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
      .replace(/\*\*([^*]+)\*\*:\s*/g, '**$1**\n\n') // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å–ø–∏—Å–∫–æ–≤ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
      .trim();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º sanitizeStrict –ü–û–°–õ–ï —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    text = sanitizeStrict(text);
    
    console.log('üì§ –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç...');
    console.log('üìÑ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:');
    console.log(text);
    
    const res = await bot.api.sendMessage(targetChatId, text, { 
      disable_web_page_preview: true
    });
    
    console.log(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! ID: ${res.message_id}`);
    console.log('\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞:');
    console.log(text);
    
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', e.message);
  } finally {
    await client.disconnect();
  }
}

main().catch(console.error);
