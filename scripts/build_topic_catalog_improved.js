// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–º–∞—Ç–∏–∫ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ —Å–∏–Ω–æ–Ω–∏–º–∞–º–∏
const fs = require('fs');
const path = require('path');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

function readConfig() {
  const configPath = path.join(__dirname, '../data/topic_catalog_config.json');
  const raw = fs.readFileSync(configPath, 'utf8');
  return JSON.parse(raw);
}

function readSynonyms() {
  const synonymsPath = path.join(__dirname, '../data/topic_synonyms.json');
  const raw = fs.readFileSync(synonymsPath, 'utf8');
  return JSON.parse(raw);
}

function ensureDataDir() {
  const dataDir = path.join(__dirname, '../data');
  if (!fs.existsSync(dataDir)) {
    fs.mkdirSync(dataDir, { recursive: true });
  }
  return dataDir;
}

function ensureDocsDir() {
  const docsDir = path.join(__dirname, '../docs');
  if (!fs.existsSync(docsDir)) {
    fs.mkdirSync(docsDir, { recursive: true });
  }
  return docsDir;
}

async function findTopChannelsImproved(client, searchQueries, minParticipants = 50, maxResults = 5) {
  const allChannels = new Map(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –ø–æ ID
  
  for (const query of searchQueries) {
    try {
      console.log(`    üîç –ü–æ–∏—Å–∫: "${query}"`);
      
      const search = await client.invoke(new Api.contacts.Search({ 
        q: query, 
        limit: 100 // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç
      }));
      
      const channels = (search.chats || [])
        .filter((c) => c.className === 'Channel')
        .filter(ch => (ch.participantsCount || 0) >= minParticipants);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ Map, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
      channels.forEach(ch => {
        const channelId = ch.id.toString();
        if (!allChannels.has(channelId)) {
          allChannels.set(channelId, {
            id: channelId,
            title: ch.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            username: ch.username || null,
            participants: ch.participantsCount || 0,
            foundBy: query
          });
        }
      });
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 300));
      
    } catch (error) {
      console.error(`    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "${query}":`, error.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    }
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø
  return Array.from(allChannels.values())
    .sort((a, b) => b.participants - a.participants)
    .slice(0, maxResults);
}

async function getFullChannelInfo(client, channelId) {
  try {
    const fullInfo = await client.invoke(new Api.channels.GetFullChannel({
      channel: channelId
    }));
    return fullInfo.fullChat?.participantsCount || 0;
  } catch (error) {
    console.error(`    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error.message);
    return 0;
  }
}

async function processTopicImproved(client, topic, synonyms, index, total) {
  console.log(`[${index + 1}/${total}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é: ${topic.name}`);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã –¥–ª—è —Ç–µ–º—ã
  const topicSynonyms = synonyms.synonyms[topic.id] || [topic.searchQuery];
  console.log(`  üìù –ó–∞–ø—Ä–æ—Å—ã: ${topicSynonyms.length}`);
  
  const channels = await findTopChannelsImproved(client, topicSynonyms, 50, 5);
  
  // –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  const enrichedChannels = [];
  for (const channel of channels) {
    if (channel.participants === 0) {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const fullParticipants = await getFullChannelInfo(client, channel.id);
      channel.participants = fullParticipants;
    }
    enrichedChannels.push(channel);
  }
  
  const result = {
    ...topic,
    searchQueries: topicSynonyms,
    channelsFound: enrichedChannels.length,
    channels: enrichedChannels,
    processedAt: new Date().toISOString()
  };
  
  if (enrichedChannels.length === 0) {
    console.log(`  ‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
  } else if (enrichedChannels.length < 3) {
    console.log(`  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${enrichedChannels.length} –∫–∞–Ω–∞–ª–æ–≤ (–º–µ–Ω—å—à–µ 3)`);
  } else if (enrichedChannels.length < 5) {
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${enrichedChannels.length} –∫–∞–Ω–∞–ª–æ–≤ (–º–µ–Ω—å—à–µ 5, –Ω–æ –±–æ–ª—å—à–µ 3)`);
  } else {
    console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${enrichedChannels.length} –∫–∞–Ω–∞–ª–æ–≤ (–¢–û–ü-5)`);
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
  enrichedChannels.forEach((ch, i) => {
    console.log(`    ${i + 1}. ${ch.title} (${ch.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤) [${ch.foundBy}]`);
  });
  
  return result;
}

function generateMarkdownReportImproved(results) {
  const categories = {};
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  results.forEach(topic => {
    if (!categories[topic.category]) {
      categories[topic.category] = [];
    }
    categories[topic.category].push(topic);
  });
  
  let md = `# –ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–º–∞—Ç–∏–∫ ContentBot (–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)\n\n`;
  md += `**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** ${new Date().toLocaleString('ru-RU')}\n\n`;
  md += `**–í—Å–µ–≥–æ —Ç–µ–º:** ${results.length}\n`;
  md += `**–¢–µ–º —Å –∫–∞–Ω–∞–ª–∞–º–∏:** ${results.filter(t => t.channelsFound > 0).length}\n`;
  md += `**–¢–µ–º —Å –¢–û–ü-5:** ${results.filter(t => t.channelsFound >= 5).length}\n`;
  md += `**–¢–µ–º —Å –¢–û–ü-3:** ${results.filter(t => t.channelsFound >= 3).length}\n\n`;
  
  // –¢–∞–±–ª–∏—Ü–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  Object.keys(categories).sort().forEach(category => {
    md += `## ${category}\n\n`;
    md += `| –¢–µ–º–∞ | –ù–∞–π–¥–µ–Ω–æ | –¢–û–ü-3 –∫–∞–Ω–∞–ª–∞ | –ó–∞–ø—Ä–æ—Å—ã |\n`;
    md += `|------|---------|-------------|----------|\n`;
    
    categories[category].forEach(topic => {
      const top3 = topic.channels.slice(0, 3);
      const channelNames = top3.length > 0 
        ? top3.map(ch => ch.title).join(', ')
        : '–ù–µ –Ω–∞–π–¥–µ–Ω—ã';
      
      const status = topic.channelsFound === 0 ? '‚ùå' : 
                    topic.channelsFound < 3 ? '‚ö†Ô∏è' : '‚úÖ';
      
      const queries = topic.searchQueries ? topic.searchQueries.length : 1;
      
      md += `| ${status} ${topic.name} | ${topic.channelsFound} | ${channelNames} | ${queries} |\n`;
    });
    
    md += `\n`;
  });
  
  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  const problematic = results.filter(t => t.channelsFound < 3);
  if (problematic.length > 0) {
    md += `## ‚ö†Ô∏è –¢–µ–º—ã —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞–Ω–∞–ª–æ–≤\n\n`;
    md += `| –¢–µ–º–∞ | –ù–∞–π–¥–µ–Ω–æ | –ö–∞—Ç–µ–≥–æ—Ä–∏—è | –ó–∞–ø—Ä–æ—Å—ã |\n`;
    md += `|------|---------|----------|----------|\n`;
    
    problematic.forEach(topic => {
      const queries = topic.searchQueries ? topic.searchQueries.length : 1;
      md += `| ${topic.name} | ${topic.channelsFound} | ${topic.category} | ${queries} |\n`;
    });
    
    md += `\n`;
  }
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  md += `## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n`;
  md += `- **–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–µ–º:** ${results.length}\n`;
  md += `- **–¢–µ–º —Å 5+ –∫–∞–Ω–∞–ª–∞–º–∏:** ${results.filter(t => t.channelsFound >= 5).length}\n`;
  md += `- **–¢–µ–º —Å 3-4 –∫–∞–Ω–∞–ª–∞–º–∏:** ${results.filter(t => t.channelsFound >= 3 && t.channelsFound < 5).length}\n`;
  md += `- **–¢–µ–º —Å 1-2 –∫–∞–Ω–∞–ª–∞–º–∏:** ${results.filter(t => t.channelsFound > 0 && t.channelsFound < 3).length}\n`;
  md += `- **–¢–µ–º –±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤:** ${results.filter(t => t.channelsFound === 0).length}\n\n`;
  
  // –£–ª—É—á—à–µ–Ω–∏—è
  md += `## –£–ª—É—á—à–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏\n\n`;
  md += `- –£–≤–µ–ª–∏—á–µ–Ω –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞ –¥–æ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n`;
  md += `- –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º—ã –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n`;
  md += `- –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ 50\n`;
  md += `- –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø–æ ID\n`;
  md += `- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö\n\n`;
  
  return md;
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–º–∞—Ç–∏–∫...\n');
  
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MTProto
  const mt = MTProtoClient.get();
  const client = mt.getClient();
  await client.connect();
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n');
  
  // –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤
  const config = readConfig();
  const synonyms = readSynonyms();
  const topics = config.topics;
  console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${topics.length} —Ç–µ–º–∞—Ç–∏–∫\n`);
  console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è ${Object.keys(synonyms.synonyms).length} —Ç–µ–º\n`);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
  const results = [];
  for (let i = 0; i < topics.length; i++) {
    const topic = topics[i];
    const result = await processTopicImproved(client, topic, synonyms, i, topics.length);
    results.push(result);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ–º–∞–º–∏
    if (i < topics.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  }
  
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const dataDir = ensureDataDir();
  const docsDir = ensureDocsDir();
  
  // JSON
  const jsonResult = {
    generatedAt: new Date().toISOString(),
    version: 'improved',
    totalTopics: results.length,
    topicsWithChannels: results.filter(t => t.channelsFound > 0).length,
    topics: results
  };
  
  const jsonPath = path.join(dataDir, 'topic_channels_catalog_improved.json');
  fs.writeFileSync(jsonPath, JSON.stringify(jsonResult, null, 2), 'utf8');
  console.log(`üíæ JSON —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${jsonPath}`);
  
  // Markdown
  const mdContent = generateMarkdownReportImproved(results);
  const mdPath = path.join(docsDir, 'TOPIC_CATALOG_IMPROVED.md');
  fs.writeFileSync(mdPath, mdContent, 'utf8');
  console.log(`üìÑ Markdown —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${mdPath}`);
  
  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢ (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø):');
  console.log('='.repeat(60));
  console.log(`–í—Å–µ–≥–æ —Ç–µ–º: ${results.length}`);
  console.log(`–¢–µ–º —Å –∫–∞–Ω–∞–ª–∞–º–∏: ${results.filter(t => t.channelsFound > 0).length}`);
  console.log(`–¢–µ–º —Å –¢–û–ü-5: ${results.filter(t => t.channelsFound >= 5).length}`);
  console.log(`–¢–µ–º —Å –¢–û–ü-3: ${results.filter(t => t.channelsFound >= 3).length}`);
  console.log(`–¢–µ–º —Å 1-2 –∫–∞–Ω–∞–ª–∞–º–∏: ${results.filter(t => t.channelsFound > 0 && t.channelsFound < 3).length}`);
  console.log(`–¢–µ–º –±–µ–∑ –∫–∞–Ω–∞–ª–æ–≤: ${results.filter(t => t.channelsFound === 0).length}`);
  
  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
  const oldResultsPath = path.join(dataDir, 'topic_channels_catalog.json');
  if (fs.existsSync(oldResultsPath)) {
    const oldData = JSON.parse(fs.readFileSync(oldResultsPath, 'utf8'));
    console.log('\nüìà –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ï–ô –í–ï–†–°–ò–ï–ô:');
    console.log('='.repeat(60));
    console.log(`–¢–µ–º —Å –∫–∞–Ω–∞–ª–∞–º–∏: ${oldData.topicsWithChannels} ‚Üí ${results.filter(t => t.channelsFound > 0).length}`);
    console.log(`–¢–µ–º —Å –¢–û–ü-5: ${oldData.topics.filter(t => t.channelsFound >= 5).length} ‚Üí ${results.filter(t => t.channelsFound >= 5).length}`);
    console.log(`–¢–µ–º —Å –¢–û–ü-3: ${oldData.topics.filter(t => t.channelsFound >= 3).length} ‚Üí ${results.filter(t => t.channelsFound >= 3).length}`);
  }
  
  await client.disconnect();
  console.log('\n‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ —Ç–µ–º–∞—Ç–∏–∫ –ø–æ—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
}

main().catch((e) => { 
  console.error('–û–®–ò–ë–ö–ê –ü–û–°–¢–†–û–ï–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ö–ê–¢–ê–õ–û–ì–ê:', e?.message || e); 
  process.exit(1); 
});

