// –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ switchpoint/router - –°–´–†–û–ô –æ—Ç–≤–µ—Ç
const { OpenRouterManager } = require('./telegram_parser/dist/ai/openrouter-manager');

async function testSwitchpointRaw() {
  const ai = OpenRouterManager.get();
  const prompt = '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ü–û (50 —Å–ª–æ–≤) —Å —ç–º–æ–¥–∑–∏ üöÄüíª';
  
  try {
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é switchpoint/router - –°–´–†–û–ô –æ—Ç–≤–µ—Ç');
    console.log('='.repeat(80));
    
    const result = await ai.makeRequest([
      { role: 'user', content: prompt }
    ], 'switchpoint/router', {
      max_tokens: 200,
      temperature: 0.7
    });
    
    console.log('\nüîç –ü–û–õ–ù–´–ô –°–´–†–û–ô –û–¢–í–ï–¢ (JSON):');
    console.log('='.repeat(80));
    console.log(JSON.stringify(result, null, 2));
    
    console.log('\nüìã –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´:');
    console.log('='.repeat(80));
    console.log('result.choices:', result.choices);
    console.log('result.choices[0]:', result.choices?.[0]);
    console.log('result.choices[0].message:', result.choices?.[0]?.message);
    console.log('result.choices[0].message.content:', result.choices?.[0]?.message?.content);
    console.log('result.choices[0].message.reasoning:', result.choices?.[0]?.message?.reasoning);
    
    console.log('\nüìù –í–°–ï –í–û–ó–ú–û–ñ–ù–´–ï –ü–û–õ–Ø:');
    console.log('='.repeat(80));
    if (result.choices?.[0]?.message) {
      const msg = result.choices[0].message;
      console.log('–í—Å–µ –ø–æ–ª—è message:', Object.keys(msg));
      Object.keys(msg).forEach(key => {
        console.log(`${key}:`, msg[key]);
      });
    }
    
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –¢–ï–ö–°–¢:');
    console.log('='.repeat(80));
    const text = result?.choices?.[0]?.message?.content || '–ù–ï–¢ –ö–û–ù–¢–ï–ù–¢–ê';
    console.log('–¢–µ–∫—Å—Ç:', text);
    console.log('–î–ª–∏–Ω–∞:', text.length);
    console.log('–¢–∏–ø:', typeof text);
    
    return result;
    
  } catch (error) {
    console.log(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
    console.log('Stack:', error.stack);
    return null;
  }
}

async function main() {
  console.log('üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ switchpoint/router...\n');
  
  const result = await testSwitchpointRaw();
  
  if (result) {
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } else {
    console.log('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π');
  }
}

main().catch(console.error);

