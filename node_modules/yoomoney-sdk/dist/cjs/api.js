"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fetch = require("./fetch.js");
class YMApiError extends Error {
  /**
   * Объект ответа
   * @param {AnyRecord} response
   */
  constructor(response) {
    super(`API returned error code: ${response.error}`);
    this.response = response;
    this.code = response.error;
  }
}
/**
 * Ошибка, если API возвращает пустую строку ответе
 * Скорее всего это связано с отсутствием прав токена
 *
 * @see https://github.com/AlexXanderGrib/yoomoney-sdk/issues/4
 */
class YMApiVoidResponseError extends Error {}
/**
 * Имплементирует [основное API YooMoney](https://yoomoney.ru/docs/wallet)
 *
 * @see {@link https://yoomoney.ru/docs/wallet|Описание}
 * @export
 * @class API
 */
class API {
  /**
   * Creates an instance of API.
   * @param {string} token Токен авторизации пользователя
   * @param {string=} [endpoint="https://yoomoney.ru/api"] По умолчанию `https://yoomoney.ru/api`
   * @param {Agent=} [agent]
   * @memberof API
   */
  constructor(token, endpoint = "https://yoomoney.ru/api", agent) {
    this.token = token;
    this.endpoint = endpoint;
    this.agent = agent;
  }
  /**
   * Позволяет совершить вызов произвольного метода API
   *
   * @template T
   * @param {string} method Название метода
   * @param {QueryStringifiable} parameters Параметры метода
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @return {Promise<T>}
   */
  async call(method, parameters) {
    const data = await fetch.fetch(
      `${this.endpoint}/${method}`,
      parameters,
      {
        Authorization: `Bearer ${this.token}`
      },
      this.agent
    );
    if (data.error) throw new YMApiError(data);
    if (typeof data === "string" && data.trim() === "") {
      throw new YMApiVoidResponseError();
    }
    return data;
  }
  /**
   * Получение информации о состоянии счета пользователя.
   *
   * Требуемые права токена: `account-info`.
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @return {t.AccountInfoResponse}
   */
  async accountInfo() {
    return await this.call("account-info", {});
  }
  /**
   * Метод позволяет просматривать историю операций (полностью или частично) в постраничном режиме. Записи истории выдаются в обратном хронологическом порядке: от последних к более ранним.
   *
   * Требуемые права токена: `operation-history`.
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @param {t.OperationHistoryParameters=} [parameters={}] Параметры вызова
   * @return {Promise<t.OperationHistoryResponse>}
   */
  async operationHistory(parameters = {}) {
    return await this.call("operation-history", parameters);
  }
  /**
   * Позволяет получить детальную информацию об операции из истории.
   *
   * Требуемые права токена: `operation-details`.
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @param {t.OperationDetailsParameters} parameters Параметры вызова
   * @return {Promise<t.Operation>}
   */
  async operationDetails(parameters) {
    return await this.call("operation-details", parameters);
  }
  /**
   * Создание платежа, проверка параметров и возможности приема
   * платежа магазином или перевода средств на счет пользователя
   * ЮMoney.
   *
   * Требуемые права токена:
   * - для платежа в магазин: `payment.to-pattern`
   * («шаблон платежа») или `payment-shop`.
   *
   * - для перевода средств на счета других пользователей:
   *  `payment.to-account` («идентификатор получателя»,
   * «тип идентификатора») или `payment-p2p`.
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @param {t.RequestPaymentParameters} parameters Параметры вызова
   * @return {Promise<t.RequestPaymentResponse>}
   */
  async requestPayment(parameters) {
    return await this.call("request-payment", parameters);
  }
  /**
   * Подтверждение платежа, ранее созданного методом
   * [request-payment](https://yoomoney.ru/docs/wallet/process-payments/request-payment).
   * Указание метода проведения платежа.
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @param {t.ProcessPaymentParameters} parameters Параметры вызова
   * @return {Promise<t.ProcessPaymentResponse>}
   */
  async processPayment(parameters) {
    return await this.call("process-payment", parameters);
  }
  /**
   * Прием входящих переводов, защищенных кодом протекции, и
   * переводов до востребования.
   *
   * Количество попыток приема входящего перевода с кодом протекции
   * ограничено. При исчерпании количества попыток, перевод
   * автоматически отвергается (перевод возвращается отправителю).
   *
   * Требуемые права токена: `incoming-transfers`
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @param {t.IncomingTransferAcceptParameters} parameters Параметры вызова
   * @return {Promise<t.IncomingTransferAcceptResponse>}
   */
  async incomingTransferAccept(parameters) {
    return await this.call("incoming-transfer-accept", parameters);
  }
  /**
   * Отмена входящих переводов, защищенных кодом протекции, и
   * переводов до востребования. При отмене перевода он возвращается
   * отправителю.
   *
   * Требуемые права токена: `incoming-transfers`
   *
   * @throws {YMApiError}
   * @throws {YMApiVoidResponseError}
   *
   * @param {t.IncomingTransferRejectParameters} parameters Параметры вызова
   * @return {Promise<t.IncomingTransferRejectResponse>}
   */
  async incomingTransferReject(parameters) {
    return await this.call("incoming-transfer-accept", parameters);
  }
}
exports.API = API;
exports.YMApiError = YMApiError;
exports.YMApiVoidResponseError = YMApiVoidResponseError;
