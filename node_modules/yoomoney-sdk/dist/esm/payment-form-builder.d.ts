/// <reference types="node" />
import type { URL } from "url";
export declare const PaymentType: {
    readonly FromCard: "AC";
    readonly FromWallet: "PC";
    readonly FromMobileBalance: "MC";
};
export declare type FormConfig = {
    /**
     * Номер кошелька ЮMoney, на который нужно зачислять деньги отправителей.
     */
    receiver: string;
    /**
     * Возможные значения:
     *
     * `shop` — для универсальной формы;
     *
     * `small` — для кнопки;
     *
     * `donate` — для «благотворительной» формы.
     */
    quickPayForm: "shop" | "small" | "donate";
    /**
     * Назначение платежа. (До 150 символов)
     */
    targets: string;
    /**
     * Способ оплаты. Возможные значения:
     *
     * `PC` — оплата из кошелька ЮMoney;
     *
     * `AC` — с банковской карты;
     *
     * `MC` — с баланса мобильного.
     */
    paymentType: "PC" | "AC" | "MC";
    /**
     * Сумма перевода (спишется с отправителя).
     */
    sum: number;
    /**
     * Название перевода в истории отправителя (для переводов из кошелька или с привязанной карты). Отображается в кошельке отправителя.
     *
     * Удобнее всего формировать его из названий магазина и товара. Например: `Мой магазин: валенки белые`
     */
    formComment?: string;
    /** Название перевода на странице подтверждения. Рекомендуем делать его таким же, как `formComment`. */
    shortDest?: string;
    /** Метка, которую сайт или приложение присваивает конкретному переводу. Например, в качестве метки можно указывать код или идентификатор заказа. (До 64 символов) */
    label?: string;
    /** Поле, в котором можно передать комментарий отправителя перевода. (До 200 символов) */
    comment?: string;
    /** URL-адрес для редиректа после совершения перевода. */
    successURL?: string;
    /** Нужны ФИО отправителя. */
    needFio?: boolean;
    /** Нужна электронная почты отправителя. */
    needEmail?: boolean;
    /** Нужен телефон отправителя. */
    needPhone?: boolean;
    /** Нужен адрес отправителя. */
    needAddress?: boolean;
};
/**
 * Генерирует HTML формы для переводов
 * @export
 * @class PaymentFormBuilder
 */
export declare class PaymentFormBuilder {
    readonly config: FormConfig;
    /**
     *
     * Creates an instance of PaymentFormBuilder.
     * @param {FormConfig} [config={
     *   paymentType: "PC",
     *   receiver: "",
     *   sum: 100,
     *   quickPayForm: "shop",
     *   targets: ""
     * }] Изначальные настройки формы
     * @memberof PaymentFormBuilder
     */
    constructor(config?: FormConfig);
    /**
     * Генерирует стандартные сеттеры
     *
     * @param {string} field
     * @return {Function}
     * @private
     * @memberof PaymentFromBuilder
     */
    private _makeSetter;
    /**
     * Задаёт сумму платежа
     *
     * @memberof PaymentFromBuilder
     * @param {string | number} amount Сумма
     * @return {this}
     */
    setAmount(amount: number | string): this;
    /**
     * Задаёт получателя платежа
     *
     * @memberof PaymentFromBuilder
     * @param {string | number} receiver Получатель
     * @return {this}
     */
    setReceiver(receiver: number | string): this;
    /**
     * Задаёт URL перенаправления после успешного платежа
     *
     * @memberof PaymentFromBuilder
     * @param {string | URL} url URL
     * @return {this}
     */
    setSuccessURL(url: string | URL): this;
    readonly setTargets: (value: string) => this;
    readonly setPaymentType: (value: "AC" | "PC" | "MC") => this;
    readonly setQuickPayForm: (value: "shop" | "small" | "donate") => this;
    readonly setType: (value: "shop" | "small" | "donate") => this;
    readonly setFormComment: (value: string | undefined) => this;
    readonly setShortDest: (value: string | undefined) => this;
    readonly setLabel: (value: string | undefined) => this;
    readonly setComment: (value: string | undefined) => this;
    /**
     *
     * @memberof PaymentFromBuilder
     * @param {boolean} [doRequire=true]
     * @return {this}
     */
    requireFio(doRequire?: boolean): this;
    /**
     *
     * @memberof PaymentFromBuilder
     * @param {boolean} [doRequire=true]
     * @return {this}
     */
    requireAddress(doRequire?: boolean): this;
    /**
     *
     * @memberof PaymentFromBuilder
     * @param {boolean} [doRequire=true]
     * @return {this}
     */
    requireEmail(doRequire?: boolean): this;
    /**
     * @memberof PaymentFromBuilder
     * @param {boolean} [doRequire=true]
     * @return {this}
     */
    requirePhone(doRequire?: boolean): this;
    /**
     * Генерирует HTML на основе заданных параметров
     * @memberof PaymentFromBuilder
     * @param {boolean} [fullPage=false]
     * @return {string}
     */
    buildHtml(fullPage?: boolean): string;
}
