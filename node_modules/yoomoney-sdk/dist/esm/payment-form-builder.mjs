import { FormBuilder } from "redirect-form-builder";
const PaymentType = {
  FromCard: "AC",
  FromWallet: "PC",
  FromMobileBalance: "MC"
};
/**
 *
 * @param {FormConfig} config
 * @return {FormQueryObject}
 */
function convert(config) {
  return {
    "quickpay-form": config.quickPayForm,
    paymentType: config.paymentType,
    receiver: config.receiver,
    sum: config.sum.toString(),
    targets: config.targets,
    "need-address": String(!!config.needAddress),
    "need-email": String(!!config.needEmail),
    "need-fio": String(!!config.needFio),
    "need-phone": String(!!config.needPhone),
    "short-dest": config.shortDest,
    comment: config.comment,
    formcomment: config.formComment,
    label: config.label,
    successURL: config.successURL
  };
}
/**
 * Генерирует HTML формы для переводов
 * @export
 * @class PaymentFormBuilder
 */
class PaymentFormBuilder {
  /**
   *
   * Creates an instance of PaymentFormBuilder.
   * @param {FormConfig} [config={
   *   paymentType: "PC",
   *   receiver: "",
   *   sum: 100,
   *   quickPayForm: "shop",
   *   targets: ""
   * }] Изначальные настройки формы
   * @memberof PaymentFormBuilder
   */
  constructor(
    config = {
      paymentType: "PC",
      receiver: "",
      sum: 100,
      quickPayForm: "shop",
      targets: ""
    }
  ) {
    this.config = config;
    this.setTargets = this._makeSetter("targets");
    this.setPaymentType = this._makeSetter("paymentType");
    this.setQuickPayForm = this._makeSetter("quickPayForm");
    this.setType = this._makeSetter("quickPayForm");
    this.setFormComment = this._makeSetter("formComment");
    this.setShortDest = this._makeSetter("shortDest");
    this.setLabel = this._makeSetter("label");
    this.setComment = this._makeSetter("comment");
  }
  /**
   * Генерирует стандартные сеттеры
   *
   * @param {string} field
   * @return {Function}
   * @private
   * @memberof PaymentFromBuilder
   */
  _makeSetter(field) {
    return (value) => Object.defineProperty(this, field, { value });
  }
  /**
   * Задаёт сумму платежа
   *
   * @memberof PaymentFromBuilder
   * @param {string | number} amount Сумма
   * @return {this}
   */
  setAmount(amount) {
    this.config.sum = Number.parseFloat(
      Number.parseFloat(amount.toString()).toFixed(2)
    );
    return this;
  }
  /**
   * Задаёт получателя платежа
   *
   * @memberof PaymentFromBuilder
   * @param {string | number} receiver Получатель
   * @return {this}
   */
  setReceiver(receiver) {
    this.config.receiver = receiver.toString();
    return this;
  }
  /**
   * Задаёт URL перенаправления после успешного платежа
   *
   * @memberof PaymentFromBuilder
   * @param {string | URL} url URL
   * @return {this}
   */
  setSuccessURL(url) {
    this.config.successURL = url.toString();
    return this;
  }
  /**
   *
   * @memberof PaymentFromBuilder
   * @param {boolean} [doRequire=true]
   * @return {this}
   */
  requireFio(doRequire = true) {
    this.config.needFio = doRequire;
    return this;
  }
  /**
   *
   * @memberof PaymentFromBuilder
   * @param {boolean} [doRequire=true]
   * @return {this}
   */
  requireAddress(doRequire = true) {
    this.config.needAddress = doRequire;
    return this;
  }
  /**
   *
   * @memberof PaymentFromBuilder
   * @param {boolean} [doRequire=true]
   * @return {this}
   */
  requireEmail(doRequire = true) {
    this.config.needEmail = doRequire;
    return this;
  }
  /**
   * @memberof PaymentFromBuilder
   * @param {boolean} [doRequire=true]
   * @return {this}
   */
  requirePhone(doRequire = true) {
    this.config.needPhone = doRequire;
    return this;
  }
  /**
   * Генерирует HTML на основе заданных параметров
   * @memberof PaymentFromBuilder
   * @param {boolean} [fullPage=false]
   * @return {string}
   */
  buildHtml(fullPage = false) {
    return new FormBuilder(
      "https://yoomoney.ru/quickpay/confirm.xml",
      "POST",
      convert(this.config)
    ).buildHtml(fullPage);
  }
}
export { PaymentFormBuilder, PaymentType };
