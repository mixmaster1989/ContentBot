const { TelegramClient, Api } = require('telegram');
const { StringSession } = require('telegram/sessions');
const path = require('path');

class AntilopaFinder {
  constructor() {
    this.client = null;
  }

  async init() {
    try {
      console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
      const sessionPath = path.join(__dirname, '../telegram_parser/.session.txt');
      const session = new StringSession(require('fs').readFileSync(sessionPath, 'utf8'));
      
      this.client = new TelegramClient(session, 
        parseInt(process.env.API_ID || process.env.TG_API_ID), 
        process.env.API_HASH || process.env.TG_API_HASH, 
        {
          connectionRetries: 5,
        }
      );

      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  async findAllChats() {
    try {
      console.log('üìã –ü–æ–ª—É—á–∞—é –í–°–ï –≤–∞—à–∏ —á–∞—Ç—ã...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      const allChats = [];
      const antilopaChats = [];
      
      for (let dialog of dialogs.dialogs) {
        const peer = dialog.peer;
        let chatInfo = null;
        
        if (peer.className === 'PeerChat') {
          // –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
          const chat = dialogs.chats.find(c => c.id === peer.chatId);
          if (chat) {
            chatInfo = {
              id: peer.chatId,
              fullId: `-${peer.chatId}`,
              title: chat.title,
              type: '–ì—Ä—É–ø–ø–∞',
              participantsCount: chat.participantsCount,
              className: chat.className,
              peerType: 'PeerChat'
            };
          }
        } else if (peer.className === 'PeerChannel') {
          // –ö–∞–Ω–∞–ª –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
          const channel = dialogs.chats.find(c => c.id === peer.channelId);
          if (channel) {
            const fullId = `-100${peer.channelId}`;
            chatInfo = {
              id: peer.channelId,
              fullId: fullId,
              title: channel.title,
              type: channel.megagroup ? '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞' : '–ö–∞–Ω–∞–ª',
              participantsCount: channel.participantsCount,
              className: channel.className,
              username: channel.username,
              megagroup: channel.megagroup,
              peerType: 'PeerChannel'
            };
          }
        }
        
        if (chatInfo) {
          allChats.push(chatInfo);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ê–ù–¢–ò–õ–û–ü–ê
          if (chatInfo.title.toLowerCase().includes('–∞–Ω—Ç–∏–ª–æ–ø–∞') || 
              chatInfo.title.toLowerCase().includes('antilopa')) {
            antilopaChats.push(chatInfo);
          }
        }
      }

      console.log(`\nüéØ –ù–ê–ô–î–ï–ù–û –ì–†–£–ü–ü/–ö–ê–ù–ê–õ–û–í –° "–ê–ù–¢–ò–õ–û–ü–ê": ${antilopaChats.length}`);
      console.log('='.repeat(80));
      
      if (antilopaChats.length > 0) {
        antilopaChats.forEach((chat, index) => {
          console.log(`${index + 1}. üì∫ ${chat.title}`);
          console.log(`   üÜî ID: ${chat.id}`);
          console.log(`   üî¢ Full ID: ${chat.fullId}`);
          console.log(`   üìä –¢–∏–ø: ${chat.type}`);
          console.log(`   üèóÔ∏è Peer: ${chat.peerType}`);
          if (chat.username) console.log(`   üë§ Username: @${chat.username}`);
          if (chat.participantsCount) console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chat.participantsCount}`);
          console.log(`   üéØ *** –í–û–ó–ú–û–ñ–ù–ê–Ø –ì–†–£–ü–ü–ê –ê–ù–¢–ò–õ–û–ü–ê! ***`);
          console.log('');
        });
        
        console.log('üîß –ö–ê–ö–û–ô ID –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨ –í –ö–û–î–ï:');
        antilopaChats.forEach((chat, index) => {
          console.log(`${index + 1}. –î–ª—è "${chat.title}": ${chat.fullId}`);
        });
        
      } else {
        console.log('‚ùå –ì—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–ê–ù–¢–ò–õ–û–ü–ê" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('\nüìã –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:');
        console.log('='.repeat(80));
        
        const groupsAndChannels = allChats.filter(c => c.type !== '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
        groupsAndChannels.forEach((chat, index) => {
          console.log(`${index + 1}. üì∫ ${chat.title}`);
          console.log(`   üî¢ Full ID: ${chat.fullId}`);
          console.log(`   üìä –¢–∏–ø: ${chat.type}`);
          console.log('');
        });
      }
      
      return { allChats, antilopaChats };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
      return { allChats: [], antilopaChats: [] };
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

async function findRealAntilopa() {
  const finder = new AntilopaFinder();
  
  try {
    await finder.init();
    const result = await finder.findAllChats();
    
    if (result.antilopaChats.length > 0) {
      console.log('\n‚úÖ –ì–†–£–ü–ü–ê –ê–ù–¢–ò–õ–û–ü–ê –ù–ê–ô–î–ï–ù–ê!');
      console.log('üìù –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –≤ –∫–æ–¥–µ');
    } else {
      console.log('\n‚ùå –ì—Ä—É–ø–ø–∞ –ê–ù–¢–ò–õ–û–ü–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ-–¥—Ä—É–≥–æ–º—É?');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await finder.close();
  }
}

if (require.main === module) {
  require('dotenv').config();
  findRealAntilopa();
}

module.exports = { AntilopaFinder };
