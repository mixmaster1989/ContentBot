const { OpenRouterManager } = require('../telegram_parser/dist/ai/openrouter-manager');

class LLMRewriter {
  constructor() {
    this.ai = OpenRouterManager.get();
    this.modelRouting = {
      primary: 'qwen/qwen-2.5-72b-instruct',
      style: 'meta-llama/llama-3.3-70b-instruct',
      coder: 'qwen/qwen-2.5-coder-32b-instruct',
      deeprewrite: 'deepseek/deepseek-v3.1',
      fast: 'mistralai/mistral-nemo',
    };
    
    // –°—Ç–∏–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º–∞—Ç–∏–∫
    this.writingStyles = {
      '–º–æ—Ç–∏–≤–∞—Ü–∏—è': {
        tone: '–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
        emoji: 'üî•üí™‚ö°üéØüöÄ',
        keywords: ['—É—Å–ø–µ—Ö', '—Ü–µ–ª—å', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '—Ä–æ—Å—Ç'],
        structure: '–Ω–∞—á–∏–Ω–∞–π —Å –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–π –ª–∏—á–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã'
      },
      '–±–∏–∑–Ω–µ—Å': {
        tone: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π',
        emoji: 'üíºüìàüí∞üéØüìä',
        keywords: ['—Å—Ç—Ä–∞—Ç–µ–≥–∏—è', '–ø—Ä–∏–±—ã–ª—å', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '—Ä–µ—à–µ–Ω–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç'],
        structure: '—Ñ–∞–∫—Ç—ã + –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã + –ø—Ä–∏–º–µ—Ä—ã'
      },
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': {
        tone: '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π',
        emoji: 'ü§ñüíªüì±‚öôÔ∏èüî¨',
        keywords: ['–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–±—É–¥—É—â–µ–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '—Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏—è'],
        structure: '–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ + –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã'
      },
      '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è': {
        tone: '–ø–æ–Ω–∏–º–∞—é—â–∏–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
        emoji: 'üß†üí≠üåü‚ù§Ô∏èüîÆ',
        keywords: ['–ø–æ–Ω–∏–º–∞–Ω–∏–µ', '—ç–º–æ—Ü–∏–∏', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–≥–∞—Ä–º–æ–Ω–∏—è', '–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å'],
        structure: '–ø—Ä–æ–±–ª–µ–º–∞ + –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ + —Ä–µ—à–µ–Ω–∏–µ'
      },
      '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π': {
        tone: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π',
        emoji: '‚ú®üåüüí´üé≠üåà',
        keywords: ['–∂–∏–∑–Ω—å', '–æ–ø—ã—Ç', '–º—É–¥—Ä–æ—Å—Ç—å', '–ø–æ–∑–Ω–∞–Ω–∏–µ', '—Ä–∞–∑–≤–∏—Ç–∏–µ'],
        structure: '–∏—Å—Ç–æ—Ä–∏—è + –º–æ—Ä–∞–ª—å + –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ'
      }
    };
  }

  selectModel(task, content = '', style = '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π') {
    if (task === 'rewrite') {
      if (content && content.length > 1200) return this.modelRouting.deeprewrite;
      if (style === '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏') return this.modelRouting.coder;
      return this.modelRouting.primary;
    }
    if (task === 'generate') {
      // –ö—Ä–µ–∞—Ç–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ç–µ—Ö–Ω–∏–∫–∏/–±–∏–∑–Ω–µ—Å ‚Äî —Ç–æ—á–Ω–æ—Å—Ç—å
      if (style === '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' || style === '–±–∏–∑–Ω–µ—Å') return this.modelRouting.primary;
      return this.modelRouting.style;
    }
    if (task === 'improve') {
      return this.modelRouting.primary;
    }
    return this.modelRouting.fast;
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async rewriteContent(content, style = '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π') {
    try {
      const styleConfig = this.writingStyles[style] || this.writingStyles['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'];
      
      const prompt = this.buildPrompt(content.text, styleConfig, style);
      
      const model = this.selectModel('rewrite', content.text, style);
      const response = await this.ai.makeRequest([
        {
          role: "system",
          content: `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤. 
          –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç, –¥–µ–ª–∞—è –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º –∏ —Ü–µ–Ω–Ω—ã–º.
          –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–±–ª—é–¥–∞–π —Å—Ç–∏–ª—å –∏ —Ç–æ–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –ø—Ä–æ–º–ø—Ç–µ.
          –ù–ï –∫–æ–ø–∏—Ä—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ–∑–¥–∞–≤–∞–π –Ω–æ–≤—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–¥–µ–∏.
          –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ö–û–†–û–¢–ö–ò–ú - –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!`
        },
        {
          role: "user", 
          content: prompt
        }
      ], model, { max_tokens: 220, temperature: 0.7 });

      let rewrittenText = response.choices[0].message.content.trim();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      rewrittenText = this.enhanceWithEmojis(rewrittenText, styleConfig);
      
      // –î–æ–±–∞–≤–ª—è–µ–º CTA (–ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é)
      rewrittenText = this.addCallToAction(rewrittenText, style);
      
      return {
        text: rewrittenText,
        originalLength: content.text.length,
        rewrittenLength: rewrittenText.length,
        style: style,
        timestamp: Date.now()
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      
      // Fallback - –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
      return this.fallbackRewrite(content.text, style);
    }
  }

  // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM
  buildPrompt(originalText, styleConfig, style) {
    return `
–ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∏–ª–µ "${style}"

–û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–ö–°–¢:
"${originalText}"

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –¢–æ–Ω: ${styleConfig.tone}
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: ${styleConfig.structure}
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${styleConfig.keywords.join(', ')}
- –î–ª–∏–Ω–∞: 500-1500 —Å–∏–º–≤–æ–ª–æ–≤
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
- –ê—É–¥–∏—Ç–æ—Ä–∏—è: –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ Telegram –∫–∞–Ω–∞–ª–∞

–ü–†–ê–í–ò–õ–ê:
1. –ù–ï –∫–æ–ø–∏—Ä—É–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–æ—Å–ª–æ–≤–Ω–æ
2. –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–¥–µ—é, –Ω–æ –∏–∑–ª–æ–∂–∏ –ø–æ-–Ω–æ–≤–æ–º—É
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∂–∏–≤–æ–π —è–∑—ã–∫
4. –î–æ–±–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ —Ñ–∞–∫—Ç—ã
5. –°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
6. –ù–ï –¥–æ–±–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ (–∏—Ö –¥–æ–±–∞–≤–ª—é –æ—Ç–¥–µ–ª—å–Ω–æ)

–ü–ï–†–ï–ü–ò–°–ê–ù–ù–´–ô –¢–ï–ö–°–¢:`;
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ —Å—Ç–∏–ª—é
  enhanceWithEmojis(text, styleConfig) {
    const emojis = styleConfig.emoji.split('');
    const sentences = text.split(/[.!?]/);
    
    let enhanced = '';
    sentences.forEach((sentence, index) => {
      if (sentence.trim()) {
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        if (index % 2 === 0 && emojis.length > 0) {
          const randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
          enhanced += `${randomEmoji} ${sentence.trim()}. `;
        } else {
          enhanced += `${sentence.trim()}. `;
        }
      }
    });
    
    return enhanced.trim();
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é
  addCallToAction(text, style) {
    const ctas = {
      '–º–æ—Ç–∏–≤–∞—Ü–∏—è': [
        '\n\nüî• –ê –∫–∞–∫ —Ç—ã –º–æ—Ç–∏–≤–∏—Ä—É–µ—à—å —Å–µ–±—è? –ü–æ–¥–µ–ª–∏—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö!',
        '\n\nüí™ –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å!',
        '\n\n‚ö° –ü–æ—Å—Ç–∞–≤—å ‚ù§Ô∏è –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω!'
      ],
      '–±–∏–∑–Ω–µ—Å': [
        '\n\nüìà –ö–∞–∫–æ–π –æ–ø—ã—Ç –≤ –±–∏–∑–Ω–µ—Å–µ —É —Ç–µ–±—è? –†–∞—Å—Å–∫–∞–∂–∏!',
        '\n\nüí∞ –°–æ—Ö—Ä–∞–Ω–∏ –ø–æ—Å—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è!',
        '\n\nüéØ –ê —Ç—ã –ø—Ä–∏–º–µ–Ω—è–µ—à—å —ç—Ç–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã?'
      ],
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': [
        '\n\nü§ñ –ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?',
        '\n\nüíª –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –ø–æ–¥–æ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è?',
        '\n\nüî¨ –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–Ω–µ–Ω–∏–µ–º!'
      ],
      '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π': [
        '\n\n‚ú® –ê –∫–∞–∫ —Ç—ã –ø—Ä–∏–º–µ–Ω—è–µ—à—å —ç—Ç–æ –≤ –∂–∏–∑–Ω–∏?',
        '\n\nüåü –°–æ–≥–ª–∞—Å–µ–Ω? –°—Ç–∞–≤—å ‚ù§Ô∏è',
        '\n\nüí´ –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º!'
      ]
    };

    const styleCtas = ctas[style] || ctas['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'];
    const randomCta = styleCtas[Math.floor(Math.random() * styleCtas.length)];
    
    return text + randomCta;
  }

  // Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ API
  fallbackRewrite(originalText, style) {
    const templates = {
      '–º–æ—Ç–∏–≤–∞—Ü–∏—è': 'üî• –ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å!\n\n',
      '–±–∏–∑–Ω–µ—Å': 'üìà –í –±–∏–∑–Ω–µ—Å–µ –≤–∞–∂–Ω–æ –¥—É–º–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏:\n\n',
      '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'üíª –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã:\n\n',
      '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π': '‚ú® –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–æ–∏—Ç –∑–Ω–∞—Ç—å:\n\n'
    };

    const template = templates[style] || templates['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'];
    const shortened = originalText.substring(0, 800) + '...';
    
    return {
      text: template + shortened + '\n\nüí≠ –ê —á—Ç–æ –¥—É–º–∞–µ—à—å —Ç—ã?',
      originalLength: originalText.length,
      rewrittenLength: (template + shortened).length,
      style: style,
      timestamp: Date.now(),
      fallback: true
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω—É–ª—è –ø–æ —Ç–µ–º–µ
  async generateFromScratch(topic, style = '—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π') {
    try {
      const styleConfig = this.writingStyles[style] || this.writingStyles['—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π'];
      
      const prompt = `
–°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É "${topic}".

–°–¢–ò–õ–¨: ${style}
–¢–û–ù: ${styleConfig.tone}
–°–¢–†–£–ö–¢–£–†–ê: ${styleConfig.structure}
–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê: ${styleConfig.keywords.join(', ')}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –î–ª–∏–Ω–∞: 100-200 —Å–∏–º–≤–æ–ª–æ–≤ (–ö–û–†–û–¢–ö–ò–ô –ü–û–°–¢!)
- –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –∏–Ω—Å–∞–π—Ç
- –í–æ–≤–ª–µ–∫–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —è–∑—ã–∫

–ü–û–°–¢:`;

      const model = this.selectModel('generate', '', style);
      const response = await this.ai.makeRequest([
        {
          role: "system",
          content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤. –°–æ–∑–¥–∞–≤–∞–π –≤–æ–≤–ª–µ–∫–∞—é—â–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ö–û–†–û–¢–ö–ò–ú - –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!"
        },
        {
          role: "user",
          content: prompt
        }
      ], model, { max_tokens: 220, temperature: 0.7 });

      let generatedText = response.choices[0].message.content.trim();
      generatedText = this.enhanceWithEmojis(generatedText, styleConfig);
      generatedText = this.addCallToAction(generatedText, style);

      return {
        text: generatedText,
        topic: topic,
        style: style,
        generated: true,
        timestamp: Date.now()
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      return null;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –∏ —É–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
  async improvePost(text, targetMetrics = {}) {
    try {
      const prompt = `
–£–ª—É—á—à–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞:

–û–†–ò–ì–ò–ù–ê–õ:
"${text}"

–¶–ï–õ–ò:
- –ë–æ–ª—å—à–µ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
- –õ—É—á—à–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å  
- –ë–æ–ª–µ–µ –ø—Ä–∞–∫—Ç–∏—á–Ω–∞—è –ø–æ–ª—å–∑–∞
- –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø:`;

      const model = this.selectModel('improve');
      const response = await this.ai.makeRequest([
        {
          role: "system",
          content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Telegram –∫–æ–Ω—Ç–µ–Ω—Ç—É. –£–ª—É—á—à–∞–π –ø–æ—Å—Ç—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–≤–ª–µ—á–µ–Ω–∏—è."
        },
        {
          role: "user",
          content: prompt
        }
      ], model, { max_tokens: 220, temperature: 0.6 });

      return {
        improved: response.choices[0].message.content.trim(),
        original: text,
        timestamp: Date.now()
      };

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
      return { improved: text, original: text };
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã
  getStats() {
    return {
      availableStyles: Object.keys(this.writingStyles),
      supportedFeatures: [
        'rewrite_content',
        'generate_from_scratch', 
        'improve_existing',
        'emoji_enhancement',
        'cta_addition'
      ]
    };
  }
}

module.exports = { LLMRewriter }; 