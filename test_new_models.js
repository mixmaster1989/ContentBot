// –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
const { OpenRouterManager } = require('./telegram_parser/dist/ai/openrouter-manager');

const newModels = [
  'google/gemma-3n-2b-it',
  'tencent/hunyuan-a13b-instruct', 
  'tngtech/deepseek-tng-r1t2-chimera',
  'mistralai/mistral-small-3.2-24b-instruct-2506',
  'moonshotai/kimi-dev-72b',
  'deepseek/deepseek-r1-0528-qwen3-8b',
  'deepseek/deepseek-r1-0528'
];

async function testModel(modelName) {
  const ai = OpenRouterManager.get();
  const prompt = '–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø—Ä–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ü–û (50 —Å–ª–æ–≤) —Å —ç–º–æ–¥–∑–∏ üöÄüíª';
  
  try {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é –º–æ–¥–µ–ª—å: ${modelName}`);
    
    const result = await ai.makeRequest([
      { role: 'user', content: prompt }
    ], modelName, {
      max_tokens: 120,
      temperature: 0.7
    });
    
    const text = result?.choices?.[0]?.message?.content || result?.text;
    if (text) {
      console.log(`‚úÖ ${modelName} - –†–ê–ë–û–¢–ê–ï–¢`);
      console.log(`üìù –û—Ç–≤–µ—Ç: ${text.substring(0, 120)}...`);
      return { model: modelName, status: 'working', response: text };
    } else {
      console.log(`‚ùå ${modelName} - –ù–ï–¢ –û–¢–í–ï–¢–ê`);
      return { model: modelName, status: 'no_response' };
    }
    
  } catch (error) {
    console.log(`‚ùå ${modelName} - –û–®–ò–ë–ö–ê: ${error.message}`);
    return { model: modelName, status: 'error', error: error.message };
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π...\n');
  
  const results = [];
  
  for (const model of newModels) {
    const result = await testModel(model);
    results.push(result);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–´–• –ú–û–î–ï–õ–ï–ô:');
  console.log('='.repeat(60));
  
  const working = results.filter(r => r.status === 'working');
  const errors = results.filter(r => r.status === 'error');
  const noResponse = results.filter(r => r.status === 'no_response');
  
  console.log(`\n‚úÖ –†–ê–ë–û–ß–ò–ï –ú–û–î–ï–õ–ò (${working.length}):`);
  working.forEach(r => console.log(`  - ${r.model}`));
  
  console.log(`\n‚ùå –û–®–ò–ë–ö–ò (${errors.length}):`);
  errors.forEach(r => console.log(`  - ${r.model}: ${r.error}`));
  
  console.log(`\n‚ö†Ô∏è –ë–ï–ó –û–¢–í–ï–¢–ê (${noResponse.length}):`);
  noResponse.forEach(r => console.log(`  - ${r.model}`));
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
  if (working.length > 0) {
    console.log(`–õ—É—á—à–∏–µ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏:`);
    working.slice(0, 3).forEach((r, i) => {
      console.log(`  ${i+1}. ${r.model}`);
    });
  } else {
    console.log('–í—Å–µ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!');
  }
}

main().catch(console.error);

