require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');

class MessagesExtractionTester {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
  }

  async init() {
    try {
      console.log('üß™ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–µ—Ä–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...');
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ username
   */
  async testGetMessagesByUsername(username) {
    try {
      console.log(`\nüì® –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô: @${username}`);
      console.log('='.repeat(60));
      
      const startTime = Date.now();
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.client.getMessages(username, { limit: 10 });
      const duration = Date.now() - startTime;
      
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}–º—Å`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.length}`);
      
      if (messages.length > 0) {
        console.log('\nüìã –ü–ï–†–í–´–ï 3 –°–û–û–ë–©–ï–ù–ò–Ø:');
        messages.slice(0, 3).forEach((msg, index) => {
          console.log(`\n${index + 1}. üìù –°–æ–æ–±—â–µ–Ω–∏–µ #${msg.id}:`);
          console.log(`   üìÖ –î–∞—Ç–∞: ${new Date(msg.date * 1000).toLocaleString()}`);
          console.log(`   üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: ${msg.views || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
          console.log(`   üìè –î–ª–∏–Ω–∞: ${msg.message?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
          console.log(`   üñºÔ∏è –ú–µ–¥–∏–∞: ${msg.media ? '–î–∞' : '–ù–µ—Ç'}`);
          console.log(`   üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞: ${msg.fwdFrom ? '–î–∞' : '–ù–µ—Ç'}`);
          console.log(`   üìù –¢–µ–∫—Å—Ç: ${(msg.message || '').substring(0, 100)}...`);
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        const metrics = this.calculateMetrics(messages);
        console.log('\nüìä –°–û–ë–†–ê–ù–ù–´–ï –ú–ï–¢–†–ò–ö–ò:');
        console.log(`   üìù –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${metrics.totalMessages}`);
        console.log(`   üìà –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${metrics.avgViews}`);
        console.log(`   ‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: ${metrics.avgReactions}`);
        console.log(`   üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞: ${metrics.avgLength} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   üñºÔ∏è –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: ${metrics.mediaPercentage}%`);
        console.log(`   üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∏: ${metrics.forwardPercentage}%`);
        console.log(`   üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: ${metrics.lastPostDate}`);
        
        return { success: true, messages, metrics };
        
      } else {
        console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return { success: false, error: '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π' };
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ @${username}:`, error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  calculateMetrics(messages) {
    if (!messages || messages.length === 0) {
      return {
        totalMessages: 0,
        avgViews: 0,
        avgReactions: 0,
        avgLength: 0,
        mediaPercentage: 0,
        forwardPercentage: 0,
        lastPostDate: null
      };
    }

    let totalViews = 0;
    let totalReactions = 0;
    let totalLength = 0;
    let mediaCount = 0;
    let forwardCount = 0;
    let validMessages = 0;

    for (const message of messages) {
      if (!message.message && !message.media) continue;
      
      validMessages++;
      
      // –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
      if (message.views) totalViews += message.views;
      
      // –†–µ–∞–∫—Ü–∏–∏
      if (message.reactions) {
        const reactions = message.reactions.results || [];
        totalReactions += reactions.reduce((sum, r) => sum + r.count, 0);
      }
      
      // –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
      if (message.message) totalLength += message.message.length;
      
      // –ú–µ–¥–∏–∞
      if (message.media) mediaCount++;
      
      // –ü–µ—Ä–µ—Å—ã–ª–∫–∏
      if (message.fwdFrom) forwardCount++;
    }

    return {
      totalMessages: validMessages,
      avgViews: validMessages > 0 ? Math.round(totalViews / validMessages) : 0,
      avgReactions: validMessages > 0 ? Math.round(totalReactions / validMessages) : 0,
      avgLength: validMessages > 0 ? Math.round(totalLength / validMessages) : 0,
      mediaPercentage: validMessages > 0 ? Math.round((mediaCount / validMessages) * 100) : 0,
      forwardPercentage: validMessages > 0 ? Math.round((forwardCount / validMessages) * 100) : 0,
      lastPostDate: messages[0]?.date ? new Date(messages[0].date * 1000).toLocaleString() : null
    };
  }

  /**
   * –¢–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
   */
  async testMultipleChannels() {
    const testChannels = [
      'bitcoin',           // –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
      'Coin_Post',         // –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å  
      'bitcoin_bullet_vip', // –ú–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å
      'telegram',          // –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
      'durov'              // –î–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
    ];

    console.log('\nüß™ –¢–ï–°–¢ –ù–ï–°–ö–û–õ–¨–ö–ò–• –ö–ê–ù–ê–õ–û–í');
    console.log('='.repeat(60));

    const results = [];

    for (const username of testChannels) {
      console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä—É—é @${username}...`);
      
      const result = await this.testGetMessagesByUsername(username);
      results.push({ username, ...result });
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await this.delay(1000);
    }

    // –°–≤–æ–¥–∫–∞
    console.log('\nüìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:');
    console.log('='.repeat(60));
    
    const successful = results.filter(r => r.success);
    const failed = results.filter(r => !r.success);
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful.length}/${results.length}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failed.length}/${results.length}`);
    
    if (successful.length > 0) {
      console.log('\n‚úÖ –†–ê–ë–û–¢–ê–Æ–©–ò–ï –ö–ê–ù–ê–õ–´:');
      successful.forEach(r => {
        console.log(`   @${r.username} - ${r.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, ${r.metrics.avgViews} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`);
      });
    }
    
    if (failed.length > 0) {
      console.log('\n‚ùå –ù–ï–†–ê–ë–û–¢–ê–Æ–©–ò–ï –ö–ê–ù–ê–õ–´:');
      failed.forEach(r => {
        console.log(`   @${r.username} - ${r.error}`);
      });
    }

    return results;
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

async function runTests() {
  const tester = new MessagesExtractionTester();
  
  try {
    await tester.init();
    
    if (process.argv[2]) {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
      const username = process.argv[2].replace('@', '');
      await tester.testGetMessagesByUsername(username);
    } else {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
      await tester.testMultipleChannels();
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

console.log('üöÄ MESSAGES EXTRACTION TESTER');
console.log('==============================');
console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
console.log('  node test-messages-extraction.js          - —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤');
console.log('  node test-messages-extraction.js bitcoin  - —Ç–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞');
console.log('');

runTests();
