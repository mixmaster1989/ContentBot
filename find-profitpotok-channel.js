require('dotenv').config();
const SmartGlobalSearch = require('./core/smart-global-search');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class ProfitPotokChannelFinder {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.smartSearch = new SmartGlobalSearch();
    
    // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –ü–†–û–§–ò–¢–ü–û–¢–û–ö
    this.searchQueries = [
      '–ü–†–û–§–ò–¢–ü–û–¢–û–ö',
      'profitpotok',
      'ProfitPotok',
      '–ø—Ä–æ—Ñ–∏—Ç–ø–æ—Ç–æ–∫',
      '–ü—Ä–æ—Ñ–∏—Ç–ü–æ—Ç–æ–∫',
      'PROFIT POTOK',
      'profit potok'
    ];
    
    this.foundChannels = [];
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –ü–†–û–§–ò–¢–ü–û–¢–û–ö...');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º MTProto –∫–ª–∏–µ–Ω—Ç
      await this.mt.start();
      console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
      await this.smartSearch.init(this.client);
      console.log('‚úÖ –ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async findProfitPotokChannel() {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ü–†–û–§–ò–¢–ü–û–¢–û–ö...');
      console.log('=====================================');
      
      for (const query of this.searchQueries) {
        console.log(`\nüîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
          const results = await this.smartSearch.smartSearch(query, {
            maxResults: 20,
            aiAnalysisLimit: 5,
            analysisDelay: 1000
          });
          
          if (results && results.length > 0) {
            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${query}"`);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –ü–†–û–§–ò–¢–ü–û–¢–û–ö
            const relevantResults = results.filter(channel => 
              this.isRelevantToProfitPotok(channel, query)
            );
            
            if (relevantResults.length > 0) {
              console.log(`üéØ –ù–∞–π–¥–µ–Ω–æ ${relevantResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:`);
              
              for (const channel of relevantResults) {
                this.displayChannelInfo(channel, query);
                this.foundChannels.push({
                  ...channel,
                  searchQuery: query,
                  foundAt: new Date().toISOString()
                });
              }
            } else {
              console.log('‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
          } else {
            console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
          }
          
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è "${query}":`, error.message);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
        await this.delay(2000);
      }
      
      // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      this.displaySummary();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ –ü–†–û–§–ò–¢–ü–û–¢–û–ö:', error);
      throw error;
    }
  }

  isRelevantToProfitPotok(channel, query) {
    const title = (channel.title || '').toLowerCase();
    const username = (channel.username || '').toLowerCase();
    const description = (channel.description || '').toLowerCase();
    
    const profitPotokVariants = [
      '–ø—Ä–æ—Ñ–∏—Ç–ø–æ—Ç–æ–∫', 'profitpotok', 'profit potok', '–ø—Ä–æ—Ñ–∏—Ç –ø–æ—Ç–æ–∫'
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (const variant of profitPotokVariants) {
      if (title.includes(variant) || username.includes(variant) || description.includes(variant)) {
        return true;
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    const queryLower = query.toLowerCase();
    if (title.includes(queryLower) || username.includes(queryLower)) {
      return true;
    }
    
    return false;
  }

  displayChannelInfo(channel, searchQuery) {
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:');
    console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${channel.title || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   Username: @${channel.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   ID: ${channel.id || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${channel.participantsCount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${(channel.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ').substring(0, 100)}...`);
    console.log(`   –ù–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchQuery}"`);
    
    if (channel.aiAnalysis) {
      console.log(`   AI –†–µ–π—Ç–∏–Ω–≥: ${channel.aiAnalysis.rating || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
      console.log(`   AI –í–µ—Ä–¥–∏–∫—Ç: ${channel.aiAnalysis.verdict || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`);
    }
    
    console.log(`   –°—Å—ã–ª–∫–∞: https://t.me/${channel.username || 'channel'}`);
    console.log('   ' + '='.repeat(50));
  }

  displaySummary() {
    console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('==================');
    console.log(`–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${this.foundChannels.length}`);
    
    if (this.foundChannels.length > 0) {
      console.log('\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:');
      this.foundChannels.forEach((channel, index) => {
        console.log(`${index + 1}. ${channel.title} (@${channel.username})`);
        console.log(`   –ù–∞–π–¥–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${channel.searchQuery}"`);
        console.log(`   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${channel.participantsCount || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`);
        console.log(`   –°—Å—ã–ª–∫–∞: https://t.me/${channel.username}`);
        console.log('');
      });
    } else {
      console.log('‚ùå –ö–∞–Ω–∞–ª –ü–†–û–§–ò–¢–ü–û–¢–û–ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
      console.log('   - –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É');
      console.log('   - –ö–∞–Ω–∞–ª –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ');
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async stop() {
    try {
      await this.client.disconnect();
      console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞
async function main() {
  const finder = new ProfitPotokChannelFinder();
  
  try {
    await finder.init();
    await finder.findProfitPotokChannel();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await finder.stop();
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { ProfitPotokChannelFinder };
