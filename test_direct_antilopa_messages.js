require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');

class DirectAntilopaTest {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.antilopaGroupId = -1002686615681;
  }

  async init() {
    try {
      console.log('üîç –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ê–ù–¢–ò–õ–û–ü–ê...');
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async testDirectMessages() {
    try {
      console.log('üì¨ –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê...');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
      const messages = await this.client.getMessages(this.antilopaGroupId, { 
        limit: 20
      });
      
      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π:`);
      console.log('='.repeat(60));
      
      for (let i = 0; i < messages.length; i++) {
        const message = messages[i];
        console.log(`${i + 1}. –°–æ–æ–±—â–µ–Ω–∏–µ #${message.id}`);
        console.log(`   üìÖ –î–∞—Ç–∞: ${new Date(message.date * 1000).toLocaleString('ru-RU')}`);
        console.log(`   üë§ –û—Ç –Ω–∞—Å: ${message.out ? '–î–ê' : '–ù–ï–¢'}`);
        console.log(`   üí¨ –¢–µ–∫—Å—Ç: "${(message.message || '–ë–ï–ó –¢–ï–ö–°–¢–ê').substring(0, 100)}"`);
        console.log(`   üÜî Peer: ${message.peerId?.className}, ID: ${message.peerId?.channelId}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–∏—Å–∫–æ–≤—É—é —Ñ—Ä–∞–∑—É
        if (message.message && message.message.toUpperCase().includes('–ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–ì–ï')) {
          console.log(`   üéØ *** –ù–ê–ô–î–ï–ù–ê –ü–û–ò–°–ö–û–í–ê–Ø –§–†–ê–ó–ê! ***`);
        }
        console.log('');
      }
      
      return messages;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return [];
    }
  }

  async testSendMessage() {
    try {
      const testMessage = `üß™ –¢–ï–°–¢ ${new Date().toLocaleTimeString('ru-RU')} - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏`;
      
      await this.client.sendMessage(this.antilopaGroupId, { 
        message: testMessage
      });
      
      console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${testMessage}"`);
      
      // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
      setTimeout(async () => {
        console.log('\nüì¨ –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        await this.testDirectMessages();
      }, 2000);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }
}

async function testDirect() {
  const test = new DirectAntilopaTest();
  
  try {
    await test.init();
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await test.testDirectMessages();
    
    // –ü–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
    await test.testSendMessage();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testDirect();
