require('dotenv').config();
const { MTProtoClient } = require('../../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const axios = require('axios');
const fs = require('fs');

async function testSimpleCryptoRadio() {
  console.log('üéß –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ö–†–ò–ü–¢–û–†–ê–î–ò–û');
  console.log('===========================');
  
  const mt = MTProtoClient.get();
  const client = mt.getClient();
  
  try {
    await mt.start();
    await client.connect();
    console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –ö–†–ò–ü–¢–ê
    console.log('üîç –ü–æ–ª—É—á–∞—é –ø–∞–ø–∫—É –ö–†–ò–ü–¢–ê...');
    const dialogFilters = await client.invoke(new Api.messages.GetDialogFilters());
    const cryptoFilter = dialogFilters.filters.find(filter => filter.title === '–ö–†–ò–ü–¢–ê');
    
    if (!cryptoFilter) {
      console.log('‚ùå –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    console.log(`‚úÖ –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–∞–π–¥–µ–Ω–∞: "${cryptoFilter.title}" (ID: ${cryptoFilter.id})`);
    console.log(`üìä –ö–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${cryptoFilter.includePeers.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞–Ω–∞–ª–æ–≤
    console.log('\nüìã –ü–ï–†–í–´–ï 5 –ö–ê–ù–ê–õ–û–í:');
    for (let i = 0; i < Math.min(5, cryptoFilter.includePeers.length); i++) {
      try {
        const peer = cryptoFilter.includePeers[i];
        const channelEntity = await client.getEntity(peer);
        console.log(`${i + 1}. ${channelEntity.title} (ID: ${channelEntity.id})`);
        
        // –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
        const messages = await client.invoke(
          new Api.messages.GetHistory({
            peer: channelEntity,
            limit: 3,
            offsetDate: 0,
            offsetId: 0,
            minId: 0,
            maxId: 0,
            addOffset: 0
          })
        );
        
        console.log(`   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`);
        messages.messages.forEach((msg, idx) => {
          if (msg.message) {
            const date = new Date(msg.date * 1000);
            console.log(`   ${idx + 1}. [${date.toISOString()}] ${msg.message.substring(0, 100)}...`);
          }
        });
        console.log('');
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–∞–Ω–∞–ª–æ–º ${i + 1}: ${error.message}`);
      }
    }
    
    console.log('üéß –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  } finally {
    await client.disconnect();
  }
}

testSimpleCryptoRadio();
