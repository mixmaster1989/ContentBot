#!/usr/bin/env node
/**
 * üéØ ContentBot - –ü–û–°–¢ –í –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ telegram_parser
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–¥ –∏–∑ telegram_parser –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞ "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫"
 * –ò –ø–æ—Å—Ç–∏—Ç —Ç—É–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ Cloud.ru LLM
 */

require('dotenv').config();
const { MTProto } = require('@mtproto/core');
const { TelegramApi } = require('telegram');
const { StringSession } = require('telegram/sessions');
const axios = require('axios');
const fs = require('fs');
const path = require('path');

console.log('üéØ ContentBot - –ü–û–ò–°–ö –ò –ü–û–°–¢ –í –¶–ï–õ–ï–í–û–ô –ö–ê–ù–ê–õ');
console.log('='*60);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ ContentBot
const API_ID = parseInt(process.env.API_ID);
const API_HASH = process.env.API_HASH;
const LLM_API_KEY = process.env.LLM_API;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ telegram_parser
const TARGET_CHANNEL_NAME = "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫";

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
let sessionData = null;
try {
    sessionData = JSON.parse(fs.readFileSync('.session.json', 'utf8'));
    console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error.message);
    process.exit(1);
}

// Cloud.ru API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function generateContentForTrading() {
    try {
        console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ Cloud.ru...');
        
        const prompt = `–°–æ–∑–¥–∞–π –ú–û–©–ù–´–ô –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ –Ω–∞ —Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.

–ö–û–ù–¢–ï–ö–°–¢: –ö–∞–Ω–∞–ª "–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–æ–∫" - —ç—Ç–æ –º–µ—Å—Ç–æ –≥–¥–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å–∏–≥–Ω–∞–ª—ã –∏ –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –î–ª–∏–Ω–∞: 300-500 —Å–∏–º–≤–æ–ª–æ–≤
- –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π
- –¢–µ–º–∞: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, AI-–∞–Ω–∞–ª–∏–∑, ContentBot
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
- –î–æ–±–∞–≤—å 2-3 —ç–º–æ–¥–∑–∏ –ø–æ —Ç–µ–º–µ
- –£–ø–æ–º—è–Ω–∏ —á—Ç–æ —ç—Ç–æ –æ—Ç "ContentBot - Neuro Agency"
- –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

–°–¢–ò–õ–¨: –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—à–µ–ª —Å–µ–∫—Ä–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏

–ü–û–°–¢:`;

        const response = await axios.post(
            'https://foundation-models.api.cloud.ru/v1/chat/completions',
            {
                model: 'openai/gpt-oss-120b',
                messages: [
                    {
                        role: "system",
                        content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏."
                    },
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                max_tokens: 700,
                temperature: 0.9
            },
            {
                headers: {
                    'Authorization': `Bearer ${LLM_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            }
        );

        const content = response.data.choices[0].message.content.trim();
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
        return content;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
        return `ü§ñ ContentBot - Neuro Agency

–†–µ–≤–æ–ª—é—Ü–∏—è –≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ —É–∂–µ –∑–¥–µ—Å—å!

‚ú® –ß—Ç–æ –¥–µ–ª–∞–µ–º:
‚Ä¢ –ü–∞—Ä—Å–∏–º —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –¢–û–ü –∫–∞–Ω–∞–ª–æ–≤
‚Ä¢ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏  
‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞

üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç: +500% –æ—Ö–≤–∞—Ç–æ–≤, -90% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤–µ–¥–µ–Ω–∏–µ

üöÄ –ö—Ç–æ –≥–æ—Ç–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª?

#ContentBot #–ù–µ–π—Ä–æ–ö–æ–Ω—Ç–µ–Ω—Ç #–¢—Ä–µ–π–¥–∏–Ω–≥–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è`;
    }
}

// –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–∫–æ–¥ –∏–∑ telegram_parser)
async function findTargetChannel(client) {
    try {
        console.log(`üîç –ò—â–µ–º –∫–∞–Ω–∞–ª: "${TARGET_CHANNEL_NAME}"...`);
        
        const dialogs = await client.getDialogs();
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${dialogs.length}`);
        
        for (const dialog of dialogs) {
            if (dialog.title && dialog.title.includes(TARGET_CHANNEL_NAME)) {
                console.log(`‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω!`);
                console.log(`üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: ${dialog.title}`);
                console.log(`üÜî ID: ${dialog.id}`);
                console.log(`üë• –¢–∏–ø: ${dialog.entity.className}`);
                return dialog;
            }
        }
        
        console.log(`‚ùå –ö–∞–Ω–∞–ª "${TARGET_CHANNEL_NAME}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏–∞–ª–æ–≥–∞—Ö`);
        
        // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã:');
        dialogs.slice(0, 20).forEach((dialog, index) => {
            if (dialog.title) {
                console.log(`${index + 1}. ${dialog.title} (ID: ${dialog.id})`);
            }
        });
        
        return null;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–∞:', error.message);
        return null;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async function postToTargetChannel() {
    let client = null;
    
    try {
        console.log('üì± –°–æ–∑–¥–∞—é Telegram –∫–ª–∏–µ–Ω—Ç...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Å–µ—Å—Å–∏–µ–π
        const sessionString = Buffer.from(JSON.stringify(sessionData)).toString('base64');
        const session = new StringSession(sessionString);
        
        client = new TelegramApi(session, API_ID, API_HASH, {
            connectionRetries: 5,
            useWSS: false
        });

        console.log('üîê –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Telegram...');
        await client.start({
            phoneNumber: async () => {
                console.log('üìû –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–µ—Å—Å–∏–∏)');
                return '';
            },
            password: async () => '',
            phoneCode: async () => '',
            onError: (err) => console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err),
        });

        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram!');

        // –ò—â–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
        const targetChannel = await findTargetChannel(client);
        
        if (!targetChannel) {
            console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª');
            return false;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const content = await generateContentForTrading();
        
        console.log('\nüìù –ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:');
        console.log('‚îå' + '‚îÄ'.repeat(60) + '‚îê');
        content.split('\n').forEach(line => {
            console.log('‚îÇ ' + line.padEnd(59).substring(0, 59) + '‚îÇ');
        });
        console.log('‚îî' + '‚îÄ'.repeat(60) + '‚îò');
        console.log('');

        // –ü–æ—Å—Ç–∏–º –≤ –∫–∞–Ω–∞–ª
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –∫–∞–Ω–∞–ª "${targetChannel.title}"...`);
        
        const result = await client.sendMessage(targetChannel.entity, {
            message: content,
            parseMode: 'markdown'
        });

        console.log('üéâ –£–°–ü–ï–•! –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª!');
        console.log(`üì± Message ID: ${result.id}`);
        console.log(`üîó –ö–∞–Ω–∞–ª: ${targetChannel.title}`);
        
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞:', error.message);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        if (error.message.includes('AUTH_KEY')) {
            console.log('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å telegram_parser');
        } else if (error.message.includes('CHAT_WRITE_FORBIDDEN')) {
            console.log('üí° –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
        } else if (error.message.includes('PEER_ID_INVALID')) {
            console.log('üí° –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        return false;
        
    } finally {
        if (client) {
            try {
                await client.disconnect();
                console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Telegram');
            } catch (e) {
                console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', e.message);
            }
        }
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
async function createTestGroup() {
    console.log('\nüîß –ü–õ–ê–ù –ë: –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –≥—Ä—É–ø–ø—É...');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    
    console.log('üìã –†–£–ß–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:');
    console.log('1. –°–æ–∑–¥–∞–π –≥—Ä—É–ø–ø—É –≤ Telegram —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "ContentBot Test"');
    console.log('2. –î–æ–±–∞–≤—å —Ç—É–¥–∞ –±–æ—Ç–∞ –∏–ª–∏ —Å–µ–±—è –∫–∞–∫ –∞–¥–º–∏–Ω–∞');
    console.log('3. –°–∫–æ–ø–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã—à–µ –∏ –∑–∞–ø–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é');
    console.log('4. –≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥');
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
function showResults(posted) {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
    console.log('='*50);
    
    if (posted) {
        console.log('‚úÖ –ö–û–ù–¢–ï–ù–¢ –£–°–ü–ï–®–ù–û –û–ü–£–ë–õ–ò–ö–û–í–ê–ù!');
        console.log(`üì∫ –ö–∞–Ω–∞–ª: "${TARGET_CHANNEL_NAME}"`);
        console.log('üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!');
    } else {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤!');
        console.log('üìã –°–∫–æ–ø–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã—à–µ –∏ –∑–∞–ø–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é');
    }
    
    console.log('\nüí° –ß–¢–û –î–ê–õ–¨–®–ï:');
    console.log('üöÄ –ó–∞–ø—É—Å—Ç–∏ –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É: ./start.sh pm2');
    console.log('ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /demo –≤ –±–æ—Ç–µ ContentBot');
    console.log('üí∞ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏!');
    console.log('üìà –ù–∞—Å—Ç—Ä–æ–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é');
    
    console.log('\nüéØ –ú–û–ù–ï–¢–ò–ó–ê–¶–ò–Ø:');
    console.log('üí≥ –°—Ç–æ–∏–º–æ—Å—Ç—å: 3000‚ÇΩ/–º–µ—Å—è—Ü –∑–∞ –∫–∞–Ω–∞–ª');
    console.log('‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∞: 5000‚ÇΩ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ');
    console.log('üî• ROI: –û–∫—É–ø–∞–µ—Ç—Å—è –∑–∞ 1-2 –Ω–µ–¥–µ–ª–∏!');
}

async function main() {
    try {
        console.log('üìä –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö:');
        console.log(`üîë API_ID: ${API_ID ? '‚úÖ' : '‚ùå'}`);
        console.log(`üîë API_HASH: ${API_HASH ? '‚úÖ' : '‚ùå'}`);
        console.log(`ü§ñ LLM API: ${LLM_API_KEY ? '‚úÖ' : '‚ùå'}`);
        console.log(`üîê –°–µ—Å—Å–∏—è: ${sessionData ? '‚úÖ' : '‚ùå'}`);
        console.log(`üéØ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: "${TARGET_CHANNEL_NAME}"`);
        console.log('');

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
        const posted = await postToTargetChannel();
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        if (!posted) {
            await createTestGroup();
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        showResults(posted);

    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
        showResults(false);
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error); 