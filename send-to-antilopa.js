require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const fs = require('fs').promises;

class AntilopaSender {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É "–ê–Ω—Ç–∏–ª–æ–ø–∞"
  async findAntilopaGroup() {
    try {
      console.log('üîç –ò—â—É –≥—Ä—É–ø–ø—É "–ê–Ω—Ç–∏–ª–æ–ø–∞"...');
      
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${dialogs.dialogs.length} –¥–∏–∞–ª–æ–≥–æ–≤`);

      // –ò—â–µ–º –≥—Ä—É–ø–ø—É "–ê–Ω—Ç–∏–ª–æ–ø–∞"
      const antilopaGroup = dialogs.chats.find(chat => 
        chat.title && chat.title.toLowerCase().includes('–∞–Ω—Ç–∏–ª–æ–ø–∞')
      );

      if (antilopaGroup) {
        console.log('üéØ –ì–†–£–ü–ü–ê "–ê–ù–¢–ò–õ–û–ü–ê" –ù–ê–ô–î–ï–ù–ê!');
        console.log(`üì∫ –ù–∞–∑–≤–∞–Ω–∏–µ: ${antilopaGroup.title}`);
        console.log(`üÜî ID: ${antilopaGroup.id}`);
        console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${antilopaGroup.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`üìä –¢–∏–ø: ${antilopaGroup.className}`);
        
        return antilopaGroup;
      } else {
        console.log('‚ùå –ì—Ä—É–ø–ø–∞ "–ê–Ω—Ç–∏–ª–æ–ø–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('\nüì∫ –í—Å–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã:');
        console.log('=' .repeat(30));
        dialogs.chats.forEach((chat, index) => {
          if (chat.title) {
            console.log(`${index + 1}. ${chat.title} (ID: ${chat.id})`);
          }
        });
        
        return null;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–¥–∫—É –≤ –≥—Ä—É–ø–ø—É
  async sendSummaryToGroup(groupId, summaryText) {
    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–≤–æ–¥–∫—É –≤ –≥—Ä—É–ø–ø—É ${groupId}...`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const message = `üéØ –°–í–û–î–ö–ê –ö–ê–ù–ê–õ–ê "–ú–ò–õ–ò–¢–ê–†–ò–°–¢"\n\n${summaryText}\n\nü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ ContentBot`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const result = await this.client.invoke(
        new Api.messages.SendMessage({
          peer: groupId,
          message: message,
          parseMode: 'markdown'
        })
      );

      console.log('‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É!');
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ —Å–≤–æ–¥–∫–æ–π
  async sendFileToGroup(groupId, filePath) {
    try {
      console.log(`üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ${filePath} –≤ –≥—Ä—É–ø–ø—É...`);
      
      // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
      const fileContent = await fs.readFile(filePath, 'utf8');
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const tempFileName = `militarist_summary_${Date.now()}.txt`;
      await fs.writeFile(tempFileName, fileContent, 'utf8');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
      const result = await this.client.invoke(
        new Api.messages.SendMedia({
          peer: groupId,
          media: new Api.InputMediaUploadedDocument({
            file: await this.client.uploadFile({
              file: tempFileName,
              workers: 1
            }),
            mimeType: 'text/plain',
            attributes: [
              new Api.DocumentAttributeFilename({
                fileName: tempFileName
              })
            ]
          }),
          message: 'üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"',
          parseMode: 'markdown'
        })
      );

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      await fs.unlink(tempFileName);
      
      console.log('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!');
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function sendToAntilopa() {
  const sender = new AntilopaSender();
  
  try {
    await sender.init();
    
    console.log('üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –≤ –≥—Ä—É–ø–ø—É "–ê–Ω—Ç–∏–ª–æ–ø–∞"');
    console.log('');
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É
    const group = await sender.findAntilopaGroup();
    
    if (!group) {
      console.log('‚ùå –ì—Ä—É–ø–ø–∞ "–ê–Ω—Ç–∏–ª–æ–ø–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤–æ–¥–∫—É
    const summaryFiles = await fs.readdir('.');
    const latestSummary = summaryFiles
      .filter(f => f.startsWith('militarist_detailed_summary_'))
      .sort()
      .pop();
    
    if (!latestSummary) {
      console.log('‚ùå –§–∞–π–ª —Å–≤–æ–¥–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log(`üìÑ –ò—Å–ø–æ–ª—å–∑—É—é —Ñ–∞–π–ª: ${latestSummary}`);
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–≤–æ–¥–∫–∏
    const summaryContent = await fs.readFile(latestSummary, 'utf8');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await sender.sendSummaryToGroup(group.id, summaryContent);
    
    console.log('\n‚úÖ –°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É "–ê–Ω—Ç–∏–ª–æ–ø–∞"!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await sender.close();
  }
}

// –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
if (require.main === module) {
  sendToAntilopa();
}

module.exports = { AntilopaSender };
