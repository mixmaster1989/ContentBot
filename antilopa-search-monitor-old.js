require('dotenv').config();
const RealGlobalSearch = require('./core/real-global-search');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

class AntilopaSearchMonitor {
  constructor() {
    this.searchEngine = new RealGlobalSearch();
    this.client = null;
    this.antilopaGroupId = null;
    this.isRunning = false;
    this.triggerPhrase = '–ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–ì–ï';
    
    console.log('üîç AntilopaSearchMonitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê...');
      
      // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ goodnight-message.js
      process.chdir('/home/user1/telegram_parser');
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º MTProto –∫–ª–∏–µ–Ω—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ goodnight-message.js
      const mt = MTProtoClient.get();
      this.client = mt.getClient();
      await mt.start();
      console.log('‚úÖ Telegram –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º
      await this.searchEngine.init(this.client);
      
      // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –ê–ù–¢–ò–õ–û–ü–ê
      await this.findAntilopaGroup();
      
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async findAntilopaGroup() {
    try {
      console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –ê–ù–¢–ò–õ–û–ü–ê...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê
      this.antilopaGroupId = -1002686615681;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≥—Ä—É–ø–ø–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
      try {
        const channel = await this.client.invoke(
          new Api.channels.GetChannels({
            id: [new Api.InputChannel({
              channelId: Math.abs(this.antilopaGroupId),
              accessHash: 0n
            })]
          })
        );
        
        if (channel.chats && channel.chats[0]) {
          const groupInfo = channel.chats[0];
          console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥—Ä—É–ø–ø–µ –ê–ù–¢–ò–õ–û–ü–ê: ${groupInfo.title} (ID: ${this.antilopaGroupId})`);
          console.log(`üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${groupInfo.participantsCount || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        } else {
          throw new Error('–ì—Ä—É–ø–ø–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }
        
      } catch (error) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ, –Ω–æ ID –∏–∑–≤–µ—Å—Ç–µ–Ω');
        console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê: ${this.antilopaGroupId}`);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ –ê–ù–¢–ò–õ–û–ü–ê:', error);
      throw error;
    }
  }

  async startMonitoring() {
    if (this.isRunning) {
      console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
      return;
    }

    this.isRunning = true;
    console.log('üëÅÔ∏è –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –ê–ù–¢–ò–õ–û–ü–ê...');
    
    try {
      // –ù–ê–•–£–ô –°–û–ë–´–¢–ò–Ø! –î–ï–õ–ê–ï–ú –ü–†–Ø–ú–û–ô POLLING!
      this.lastMessageId = 0;
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.client.getMessages(this.antilopaGroupId, { limit: 1 });
      if (messages.length > 0) {
        this.lastMessageId = messages[0].id;
        console.log(`üîÑ –°—Ç–∞—Ä—Ç–æ–≤—ã–π ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${this.lastMessageId}`);
      }
      
      // Polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      this.pollingInterval = setInterval(async () => {
        await this.checkNewMessages();
      }, 5000);
      
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω (polling –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫)');
      console.log(`üéØ –¢—Ä–∏–≥–≥–µ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞: "${this.triggerPhrase}"`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      this.isRunning = false;
    }
  }

  async checkNewMessages() {
    try {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.client.getMessages(this.antilopaGroupId, { limit: 10 });
      
      console.log(`üì¨ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—Å–ª–µ–¥–Ω–∏–π ID: ${this.lastMessageId}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å ID –±–æ–ª—å—à–µ —á–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π)
      for (const message of messages) {
        if (message.id > this.lastMessageId) {
          console.log(`üÜï –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï #${message.id}: "${(message.message || '').substring(0, 50)}..."`);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π ID
          this.lastMessageId = message.id;
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.handleNewMessage(message);
        }
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
  }

  async handleNewMessage(message) {
    try {
      // –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø! –ù–ï –ü–†–û–ü–£–°–ö–ê–ï–ú –ù–ò–ß–ï–ì–û!
      console.log(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: out=${message.out}, from_self=${message.out ? '–î–ê' : '–ù–ï–¢'}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!message.message) {
        console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
        return;
      }
      
      const messageText = message.message;
      console.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ê–ù–¢–ò–õ–û–ü–ê #${message.id}: ${messageText.substring(0, 50)}...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—é —Ñ—Ä–∞–∑—É
      if (messageText.toUpperCase().includes(this.triggerPhrase)) {
        console.log('üéØ –ù–ê–ô–î–ï–ù–ê –¢–†–ò–ì–ì–ï–†–ù–ê–Ø –§–†–ê–ó–ê!');
        await this.processSearchRequest(messageText, message);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  }

  isFromAntilopaGroup(message) {
    if (!message.peerId) return false;
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫–∞–∫ –≤ realtime_parser.js
    const normalizeId = (id) => String(id?.value ?? id);
    
    if (message.peerId.className === 'PeerChannel') {
      const channelId = normalizeId(message.peerId.channelId);
      const targetId = Math.abs(this.antilopaGroupId).toString(); // –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –∏–∑ ID
      console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞—é –∫–∞–Ω–∞–ª ID: ${channelId} —Å —Ü–µ–ª–µ–≤—ã–º: ${targetId}`);
      return channelId === targetId;
    } else if (message.peerId.className === 'PeerChat') {
      const chatId = normalizeId(message.peerId.chatId);
      const targetId = Math.abs(this.antilopaGroupId).toString(); // –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Å –∏–∑ ID
      console.log(`üîç –°—Ä–∞–≤–Ω–∏–≤–∞—é —á–∞—Ç ID: ${chatId} —Å —Ü–µ–ª–µ–≤—ã–º: ${targetId}`);
      return chatId === targetId;
    }
    
    return false;
  }

  async processSearchRequest(messageText, originalMessage) {
    try {
      console.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫!');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã
      const searchQuery = this.extractSearchQuery(messageText);
      
      if (!searchQuery) {
        await this.sendReplyToGroup('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–ì–ï –≤–∞—à –∑–∞–ø—Ä–æ—Å');
        return;
      }
      
      console.log(`üéØ –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${searchQuery}"`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
      await this.sendReplyToGroup(`üîç –í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${searchQuery}"\n‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ù–ê–°–¢–û–Ø–©–ò–ô –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
      const results = await this.searchEngine.searchChannels(searchQuery, {
        limit: 15
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await this.sendSearchResults(searchQuery, results);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);
      await this.sendReplyToGroup(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }
  }

  extractSearchQuery(messageText) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã
    const triggerIndex = messageText.toUpperCase().indexOf(this.triggerPhrase);
    if (triggerIndex === -1) return null;
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω–æ–π —Ñ—Ä–∞–∑—ã
    const queryStart = triggerIndex + this.triggerPhrase.length;
    const query = messageText.substring(queryStart).trim();
    
    return query || null;
  }

  async sendSearchResults(query, results) {
    try {
      if (results.length === 0) {
        await this.sendReplyToGroup(`‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏–Ω–æ–Ω–∏–º—ã\n‚Ä¢ –ü–æ–∏—Å–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ`);
        return;
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      let message = `üéØ *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"*\n`;
      message += `üìä –ù–∞–π–¥–µ–Ω–æ: ${results.length} –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø\n\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const topResults = results.slice(0, 10);
      
      for (let i = 0; i < topResults.length; i++) {
        const result = topResults[i];
        const number = i + 1;
        
        message += `${number}. *${result.title}*\n`;
        message += `${result.type === 'channel' ? 'üì∫' : 'üë•'} ${result.type === 'channel' ? '–ö–∞–Ω–∞–ª' : '–ì—Ä—É–ø–ø–∞'}`;
        
        if (result.verified) message += ' ‚úÖ';
        message += `\n`;
        
        if (result.participantsCount) {
          message += `üë• ${result.participantsCount.toLocaleString('ru-RU')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
        }
        
        message += `üè∑Ô∏è ${result.category}\n`;
        
        if (result.description) {
          const desc = result.description.length > 80 
            ? result.description.substring(0, 80) + '...'
            : result.description;
          message += `üìù ${desc}\n`;
        }
        
        if (result.link) {
          message += `üîó ${result.link}\n`;
        }
        
        message += `\n`;
      }
      
      // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (results.length > 10) {
        message += `... –∏ –µ—â–µ ${results.length - 10} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n`;
      }
      
      message += `‚è∞ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${new Date().toLocaleString('ru-RU')}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ)
      await this.sendLongMessage(message);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error);
      await this.sendReplyToGroup(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${error.message}`);
    }
  }

  async sendLongMessage(message) {
    const maxLength = 4000; // Telegram –ª–∏–º–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    
    if (message.length <= maxLength) {
      await this.sendReplyToGroup(message);
      return;
    }
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    const parts = [];
    let currentPart = '';
    const lines = message.split('\n');
    
    for (let line of lines) {
      if ((currentPart + line + '\n').length > maxLength) {
        if (currentPart) {
          parts.push(currentPart.trim());
          currentPart = '';
        }
      }
      currentPart += line + '\n';
    }
    
    if (currentPart.trim()) {
      parts.push(currentPart.trim());
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    for (let i = 0; i < parts.length; i++) {
      const part = parts[i];
      const partHeader = parts.length > 1 ? `üìÑ –ß–∞—Å—Ç—å ${i + 1}/${parts.length}\n\n` : '';
      
      await this.sendReplyToGroup(partHeader + part);
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      if (i < parts.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
  }

  async sendReplyToGroup(message) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ —á—Ç–æ –∏ –≤ goodnight-message.js
      await this.client.sendMessage(this.antilopaGroupId, { message });
      
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É –ê–ù–¢–ò–õ–û–ü–ê`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É:', error);
    }
  }

  async getStats() {
    const stats = this.searchEngine.getSearchStats();
    
    return {
      isRunning: this.isRunning,
      antilopaGroupId: this.antilopaGroupId,
      triggerPhrase: this.triggerPhrase,
      searchEngineStats: stats,
      uptime: process.uptime()
    };
  }

  async stop() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.isRunning = false;
    
    try {
      if (this.pollingInterval) {
        clearInterval(this.pollingInterval);
        this.pollingInterval = null;
      }
      
      if (this.client) {
        await this.client.disconnect();
      }
      console.log('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async function startAntilopaMonitor() {
  const monitor = new AntilopaSearchMonitor();
  
  try {
    await monitor.init();
    await monitor.startMonitoring();
    
    // Graceful shutdown
    process.once('SIGINT', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
      await monitor.stop();
      process.exit(0);
    });
    
    process.once('SIGTERM', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      await monitor.stop();
      process.exit(0);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –≤ –≥—Ä—É–ø–ø—É
    setTimeout(async () => {
      try {
        await monitor.sendReplyToGroup(`üöÄ –ü–æ–∏—Å–∫–æ–≤—ã–π –º–æ–¥—É–ª—å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\nüí° –î–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ:\n–ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–ì–ï –≤–∞—à –∑–∞–ø—Ä–æ—Å\n\n–ü—Ä–∏–º–µ—Ä: –ü–û–ò–°–ö –ü–û –¢–ï–õ–ï–ì–ï –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã`);
      } catch (error) {
        console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
      }
    }, 3000);
    
    console.log('üéâ AntilopaSearchMonitor –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≥—Ä—É–ø–ø—É!');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    setInterval(async () => {
      const stats = await monitor.getStats();
      console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –†–∞–±–æ—Ç–∞–µ—Ç ${Math.floor(stats.uptime / 60)} –º–∏–Ω, –ì—Ä—É–ø–ø–∞: ${stats.antilopaGroupId}`);
    }, 10 * 60 * 1000);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  startAntilopaMonitor();
}

module.exports = { AntilopaSearchMonitor };

