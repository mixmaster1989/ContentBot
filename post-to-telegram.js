#!/usr/bin/env node
/**
 * üöÄ ContentBot - –†–ï–ê–õ–¨–ù–´–ô –ü–û–°–¢ –í TELEGRAM
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–≤–æ—é —Å–µ—Å—Å–∏—é –∏ –ø–æ—Å—Ç–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä—è–º–æ –≤ –∫–∞–Ω–∞–ª!
 */

require('dotenv').config();
const { TelegramApi } = require('telegram');
const { StringSession } = require('telegram/sessions');
const axios = require('axios');
const fs = require('fs');

console.log('üöÄ ContentBot - –†–ï–ê–õ–¨–ù–´–ô –ü–û–°–¢ –í TELEGRAM');
console.log('='*60);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const API_ID = parseInt(process.env.API_ID);
const API_HASH = process.env.API_HASH;
const TARGET_CHANNEL_ID = process.env.TARGET_CHANNEL_ID;
const LLM_API_KEY = process.env.LLM_API;

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é
let sessionData = null;
try {
    sessionData = JSON.parse(fs.readFileSync('.session.json', 'utf8'));
    console.log('‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞');
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏:', error.message);
    process.exit(1);
}

// Cloud.ru API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
async function generateContent() {
    try {
        console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ Cloud.ru...');
        
        const prompt = `–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –î–ª–∏–Ω–∞: 200-400 —Å–∏–º–≤–æ–ª–æ–≤
- –¢–æ–Ω: –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π  
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
- –î–æ–±–∞–≤—å 1-2 —ç–º–æ–¥–∑–∏
- –ó–∞–∫–æ–Ω—á–∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é

–ü–û–°–¢:`;

        const response = await axios.post(
            'https://foundation-models.api.cloud.ru/v1/chat/completions',
            {
                model: 'openai/gpt-oss-120b',
                messages: [
                    {
                        role: "system",
                        content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤."
                    },
                    {
                        role: "user",
                        content: prompt
                    }
                ],
                max_tokens: 500,
                temperature: 0.8
            },
            {
                headers: {
                    'Authorization': `Bearer ${LLM_API_KEY}`,
                    'Content-Type': 'application/json'
                },
                timeout: 30000
            }
        );

        const content = response.data.choices[0].message.content.trim();
        console.log('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
        return content;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error.message);
        return `üî• ContentBot —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å.

üí™ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ–ª–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å!

üöÄ –ì–æ—Ç–æ–≤ –∫ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏! –ö—Ç–æ —Ö–æ—á–µ—Ç —Ç–∞–∫–æ–π –∂–µ –∫–∞–Ω–∞–ª?`;
    }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –≤ StringSession
function convertSession(sessionData) {
    try {
        // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        const sessionString = JSON.stringify(sessionData);
        return new StringSession(sessionString);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏:', error.message);
        return new StringSession('');
    }
}

async function postToTelegram() {
    try {
        console.log('üì± –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ Telegram...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        const client = new TelegramApi(new StringSession(''), API_ID, API_HASH, {
            connectionRetries: 5,
        });

        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await client.start({
            phoneNumber: async () => {
                console.log('üìû –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ —Å–µ—Å—Å–∏–∏)');
                return '';
            },
            password: async () => {
                console.log('üîê –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è');
                return '';
            },
            phoneCode: async () => {
                console.log('üí¨ –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –∏–∑ SMS');
                return '';
            },
            onError: (err) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
            },
        });

        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram!');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const content = await generateContent();
        console.log(`üìù –ü–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n${content}`);

        // –ü–æ—Å—Ç–∏–º –≤ –∫–∞–Ω–∞–ª
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –∫–∞–Ω–∞–ª ${TARGET_CHANNEL_ID}...`);
        
        const result = await client.sendMessage(TARGET_CHANNEL_ID, {
            message: content,
            parseMode: 'markdown'
        });

        console.log('üéâ –£–°–ü–ï–•! –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!');
        console.log(`üîó –ü—Ä–æ–≤–µ—Ä—å –∫–∞–Ω–∞–ª: https://t.me/c/${TARGET_CHANNEL_ID.replace('-100', '')}`);
        
        await client.disconnect();
        return true;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ Telegram:', error.message);
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Bot API
        return await postViaBot();
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ Bot API
async function postViaBot() {
    try {
        console.log('ü§ñ –ü—Ä–æ–±—É—é —á–µ—Ä–µ–∑ Bot API...');
        
        const botToken = process.env.BOT_TOKEN;
        if (!botToken) {
            console.log('‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return false;
        }

        const content = await generateContent();
        
        const response = await axios.post(
            `https://api.telegram.org/bot${botToken}/sendMessage`,
            {
                chat_id: TARGET_CHANNEL_ID,
                text: content,
                parse_mode: 'Markdown'
            }
        );

        if (response.data.ok) {
            console.log('üéâ –£–°–ü–ï–•! –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Bot API!');
            console.log(`üì± Message ID: ${response.data.result.message_id}`);
            return true;
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ Bot API:', response.data);
            return false;
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Bot API:', error.message);
        return false;
    }
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
function showInstructions() {
    console.log('\nüìã –ö–ê–ö –£–í–ò–î–ï–¢–¨ –ö–û–ù–¢–ï–ù–¢:');
    console.log('');
    console.log('1Ô∏è‚É£ –ö–ê–ù–ê–õ –í TELEGRAM:');
    console.log(`   üîó https://t.me/c/${TARGET_CHANNEL_ID.replace('-100', '')}`);
    console.log('   üì± –ò–ª–∏ –Ω–∞–π–¥–∏ –∫–∞–Ω–∞–ª –ø–æ ID –≤ Telegram');
    console.log('');
    console.log('2Ô∏è‚É£ –ï–°–õ–ò –ö–ê–ù–ê–õ –ó–ê–ö–†–´–¢–´–ô:');
    console.log('   üë§ –£–±–µ–¥–∏—Å—å —á—Ç–æ —Ç—ã –∞–¥–º–∏–Ω –∫–∞–Ω–∞–ª–∞');
    console.log('   üîë –ò–ª–∏ –¥–æ–±–∞–≤—å —Å–µ–±—è –≤ –∫–∞–Ω–∞–ª');
    console.log('');
    console.log('3Ô∏è‚É£ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–û:');
    console.log('   üìù –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–∫–∞–∑–∞–Ω –≤—ã—à–µ –≤ –∫–æ–Ω—Å–æ–ª–∏');
    console.log('   üíæ –°–æ—Ö—Ä–∞–Ω–∏ –µ–≥–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('');
    console.log('4Ô∏è‚É£ –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö:');
    console.log('   üöÄ ./start.sh pm2  # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
    console.log('   ü§ñ /demo –≤ –±–æ—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    console.log('');
}

async function main() {
    try {
        console.log('üìä –ü–†–û–í–ï–†–ö–ê –ù–ê–°–¢–†–û–ï–ö:');
        console.log(`üîë API_ID: ${API_ID ? '‚úÖ' : '‚ùå'}`);
        console.log(`üîë API_HASH: ${API_HASH ? '‚úÖ' : '‚ùå'}`);
        console.log(`üéØ Target Channel: ${TARGET_CHANNEL_ID || '‚ùå'}`);
        console.log(`ü§ñ LLM API: ${LLM_API_KEY ? '‚úÖ' : '‚ùå'}`);
        console.log(`üîê –°–µ—Å—Å–∏—è: ${sessionData ? '‚úÖ' : '‚ùå'}`);
        console.log('');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const content = await generateContent();
        console.log('üìù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢:');
        console.log('‚îå' + '‚îÄ'.repeat(50) + '‚îê');
        console.log('‚îÇ' + content.split('\n').map(line => 
            ' ' + line.padEnd(49).substring(0, 49) + '‚îÇ'
        ).join('\n‚îÇ'));
        console.log('‚îî' + '‚îÄ'.repeat(50) + '‚îò');
        console.log('');

        // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–æ—Å—Ç–∏—Ç—å
        const posted = await postToTelegram();
        
        if (!posted) {
            console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ—Å—Ç–∏—Ç—å');
            console.log('üìã –ù–æ –∫–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤! –°–∫–æ–ø–∏—Ä—É–π –≤—ã—à–µ –∏ –∑–∞–ø–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é');
        }

        showInstructions();

    } catch (error) {
        console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
        showInstructions();
    }
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error); 