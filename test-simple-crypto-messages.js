require('dotenv').config();
const { ProfitPotokManager } = require('./core/profitpotok-manager');

async function testSimpleCryptoMessages() {
  const manager = new ProfitPotokManager();
  
  try {
    console.log('üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô');
    console.log('===================================');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await manager.init();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –ö–†–ò–ü–¢–ê
    console.log('\nüîç –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –ö–†–ò–ü–¢–ê...');
    const cryptoFolder = await manager.viewCryptoFolder();
    
    if (cryptoFolder && cryptoFolder.channels.length > 0) {
      console.log(`\n‚úÖ –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–∞–π–¥–µ–Ω–∞ —Å ${cryptoFolder.channels.length} –∫–∞–Ω–∞–ª–∞–º–∏`);
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
      const firstChannel = cryptoFolder.channels[0];
      console.log(`\nüì∫ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑: ${firstChannel.title}`);
      
      try {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
        const { Api } = require('telegram');
        
        let inputPeer;
        if (firstChannel.isChannel) {
          inputPeer = new Api.InputPeerChannel({
            channelId: firstChannel.id,
            accessHash: 0n
          });
        } else {
          inputPeer = new Api.InputPeerChat({
            chatId: firstChannel.id
          });
        }
        
        console.log('üì® –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è...');
        
        const history = await manager.client.invoke(
          new Api.messages.GetHistory({
            peer: inputPeer,
            limit: 3,
            offsetDate: 0,
            offsetId: 0,
            maxId: 0,
            minId: 0,
            addOffset: 0,
            hash: 0n
          })
        );
        
        if (history.messages && history.messages.length > 0) {
          console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${history.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π!`);
          
          history.messages.forEach((msg, index) => {
            if (msg.message) {
              console.log(`\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ ${index + 1}:`);
              console.log(`   ID: ${msg.id}`);
              console.log(`   –î–∞—Ç–∞: ${new Date(msg.date * 1000).toLocaleString('ru-RU')}`);
              console.log(`   –¢–µ–∫—Å—Ç: ${msg.message.substring(0, 150)}...`);
            }
          });
        } else {
          console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${error.message}`);
      }
      
    } else {
      console.log('‚ùå –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!');
    
  } catch (error) {
    console.error('\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message);
  } finally {
    await manager.stop();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testSimpleCryptoMessages().catch(console.error);
}

module.exports = { testSimpleCryptoMessages };
