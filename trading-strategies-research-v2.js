require('dotenv').config();
const SmartGlobalSearch = require('./core/smart-global-search');
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const fs = require('fs').promises;
const path = require('path');

class TradingStrategiesResearchV2 {
  constructor() {
    // –ú–µ–Ω—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    process.chdir('/home/user1/telegram_parser');
    
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.smartSearch = new SmartGlobalSearch();
    
    // 1. –£–¢–û–ß–ù–ï–ù–ù–´–ï –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–µ–π–¥–∏–Ω–≥–∞
    this.keywords = [
      '—Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥', '–≤—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É —Ñ–æ—Ä–µ–∫—Å', '–ø–ª–∞–Ω —Å–¥–µ–ª–∫–∏ –∫—Ä–∏–ø—Ç–æ', '—Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç —Ç—Ä–µ–π–¥–∏–Ω–≥', 'R:R —Ñ–æ—Ä–µ–∫—Å',
      '—Å–µ—Ç–∞–ø —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Ñ–æ—Ä–µ–∫—Å', '—Å—Ç–æ–ø-–ª–æ—Å—Å —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –∫—Ä–∏–ø—Ç–æ', '—á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥',
      '—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Ñ–æ—Ä–µ–∫—Å', '–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–æ–ø–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∫—Ä–∏–ø—Ç–æ', '—Ä–∞–∑–±–æ—Ä —Å–¥–µ–ª–æ–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥', '–¥–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Ñ–æ—Ä–µ–∫—Å',
      '—Ç–æ—Ä–≥–æ–≤—ã–π –ø–ª–∞–Ω –∫—Ä–∏–ø—Ç–æ', '—Å—Ü–µ–Ω–∞—Ä–∏–π —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Å–µ—Ç–∞–ø –¥–Ω—è —Ñ–æ—Ä–µ–∫—Å', 'intraday —Ç—Ä–µ–π–¥–∏–Ω–≥', 'swing —Ç–æ—Ä–≥–æ–≤–ª—è',
      '—Å–∫–∞–ª—å–ø–∏–Ω–≥ —Ñ–æ—Ä–µ–∫—Å', '—Å—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥', '–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∫—Ä–∏–ø—Ç–æ', 'price action —Ñ–æ—Ä–µ–∫—Å', '—É—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥',
      '—É—Ä–æ–≤–Ω–∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–µ–∫—Å', '–ø—Ä–æ–±–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ä–µ—Ç–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ', '–æ—Ç–±–æ–π —Ñ–æ—Ä–µ–∫—Å', '–ª–æ–∂–Ω—ã–π –ø—Ä–æ–±–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥',
      '–ø–∞—Ç—Ç–µ—Ä–Ω —Ñ–æ—Ä–µ–∫—Å', '–≥–æ–ª–æ–≤–∞ –∏ –ø–ª–µ—á–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥', '–¥–≤–æ–π–Ω–∞—è –≤–µ—Ä—à–∏–Ω–∞ –∫—Ä–∏–ø—Ç–æ', '–¥–≤–æ–π–Ω–æ–µ –¥–Ω–æ —Ñ–æ—Ä–µ–∫—Å', '—Ñ–ª–∞–≥ —Ç—Ä–µ–π–¥–∏–Ω–≥',
      '–≤—ã–º–ø–µ–ª –∫—Ä–∏–ø—Ç–æ', '–∫–ª–∏–Ω —Ñ–æ—Ä–µ–∫—Å', '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥', '—á–∞—à–∫–∞ —Å —Ä—É—á–∫–æ–π –∫—Ä–∏–ø—Ç–æ', 'inside bar —Ñ–æ—Ä–µ–∫—Å',
      'pin bar —Ç—Ä–µ–π–¥–∏–Ω–≥', 'engulfing –∫—Ä–∏–ø—Ç–æ', '–ø–æ–≥–ª–æ—â–µ–Ω–∏–µ —Ñ–æ—Ä–µ–∫—Å', '–æ—Ä–¥–µ—Ä-–±–ª–æ–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥', 'ICT —Ñ–æ—Ä–µ–∫—Å',
      'SMC —Ç—Ä–µ–π–¥–∏–Ω–≥', 'market structure –∫—Ä–∏–ø—Ç–æ', 'BOS —Ñ–æ—Ä–µ–∫—Å', 'CHOCH —Ç—Ä–µ–π–¥–∏–Ω–≥', 'FVG –∫—Ä–∏–ø—Ç–æ',
      'liquidity grab —Ñ–æ—Ä–µ–∫—Å', 'stop hunt —Ç—Ä–µ–π–¥–∏–Ω–≥', 'liquidity sweep –∫—Ä–∏–ø—Ç–æ', 'supply and demand —Ñ–æ—Ä–µ–∫—Å', '–∑–æ–Ω–∞ —Å–ø—Ä–æ—Å–∞ —Ç—Ä–µ–π–¥–∏–Ω–≥',
      '–∑–æ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ', '–¥–∏—Å–±–∞–ª–∞–Ω—Å —Ñ–æ—Ä–µ–∫—Å', 'mitigation —Ç—Ä–µ–π–¥–∏–Ω–≥', 'premium discount –∫—Ä–∏–ø—Ç–æ', 'confluence —Ñ–æ—Ä–µ–∫—Å',
      '–º–Ω–æ–≥–æ—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ—Å—Ç—å —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ç–æ–ø-–¥–∞—É–Ω –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–µ–∫—Å', '–¥–Ω–µ–≤–Ω–æ–π –±–∞–π–∞—Å –∫—Ä–∏–ø—Ç–æ', '–ø—Ä–æ—à–ª—ã–π –¥–Ω–µ–≤–Ω–æ–π —Ö–∞–π –ª–æ—É —Ñ–æ—Ä–µ–∫—Å', '–Ω–µ–¥–µ–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥',
      '–∞–∑–∏–∞—Ç—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫—Ä–∏–ø—Ç–æ', '–ª–æ–Ω–¥–æ–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è —Ñ–æ—Ä–µ–∫—Å', '–Ω—å—é-–π–æ—Ä–∫ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ç—Ä–µ–π–¥–∏–Ω–≥', 'ORB –∫—Ä–∏–ø—Ç–æ', 'opening range breakout —Ñ–æ—Ä–µ–∫—Å',
      '–æ–±—ä–µ–º —Ç—Ä–µ–π–¥–∏–Ω–≥', 'VSA —Ñ–æ—Ä–µ–∫—Å', 'orderflow –∫—Ä–∏–ø—Ç–æ', 'footprint —Ç—Ä–µ–π–¥–∏–Ω–≥', '–ª–µ–Ω—Ç–∞ –ø—Ä–∏–Ω—Ç–æ–≤ —Ñ–æ—Ä–µ–∫—Å',
      '—Å—Ç–∞–∫–∞–Ω –∫—Ä–∏–ø—Ç–æ', 'volume profile —Ç—Ä–µ–π–¥–∏–Ω–≥', 'POC —Ñ–æ—Ä–µ–∫—Å', 'VAH –∫—Ä–∏–ø—Ç–æ', 'VAL —Ç—Ä–µ–π–¥–∏–Ω–≥',
      'VWAP —Ñ–æ—Ä–µ–∫—Å', 'ATR —Ç—Ä–µ–π–¥–∏–Ω–≥', '–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ', '—Ç—Ä–µ–Ω–¥–æ–≤–∞—è —Ñ–æ—Ä–µ–∫—Å', '–∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥ —Ç—Ä–µ–π–¥–∏–Ω–≥',
      'mean reversion –∫—Ä–∏–ø—Ç–æ', 'breakout pullback continuation —Ñ–æ—Ä–µ–∫—Å', 'momentum —Ç—Ä–µ–π–¥–∏–Ω–≥', '–¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –∫—Ä–∏–ø—Ç–æ', '–∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ñ–æ—Ä–µ–∫—Å',
      'EMA200 –æ—Ç–±–æ–π —Ç—Ä–µ–π–¥–∏–Ω–≥', 'MA crossover –∫—Ä–∏–ø—Ç–æ', 'Bollinger squeeze —Ñ–æ—Ä–µ–∫—Å', 'Keltner breakout —Ç—Ä–µ–π–¥–∏–Ω–≥', 'Donchian breakout –∫—Ä–∏–ø—Ç–æ',
      'Turtle strategy —Ñ–æ—Ä–µ–∫—Å', 'Wyckoff —Ç—Ä–µ–π–¥–∏–Ω–≥', '–∞–∫–∫—É–º—É–ª—è—Ü–∏—è –∫—Ä–∏–ø—Ç–æ', '–¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è —Ñ–æ—Ä–µ–∫—Å', 'spring —Ç–µ—Å—Ç —Ç—Ä–µ–π–¥–∏–Ω–≥',
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
      '—Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Ñ–æ—Ä–µ–∫—Å', '—Ä–∞–∑–±–æ—Ä —Å–¥–µ–ª–æ–∫ —Ç—Ä–µ–π–¥–∏–Ω–≥', '–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–µ–∫—Å',
      '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ç–æ—Ä–≥–æ–≤—ã–µ –∏–¥–µ–∏ –∫—Ä–∏–ø—Ç–æ', '–ø—Ä–æ–≥–Ω–æ–∑—ã —Ñ–æ—Ä–µ–∫—Å', '—Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥'
    ];
    
    this.resultsDir = '/home/user1/ContentBot/data/results';
    this.checkpointFile = path.join(this.resultsDir, 'checkpoint_v2.json');
    this.allChannels = new Map();
    this.processedKeywords = 0;
    this.antilopaGroupId = -1002686615681;
    
    // 3. –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.tradingKeywords = ['—Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ñ–æ—Ä–µ–∫—Å', '–∫—Ä–∏–ø—Ç–æ', '–±–∏—Ä–∂–∞', '—Ç–æ—Ä–≥–æ–≤–ª—è', '—Å–¥–µ–ª–∫–∞', '–ø–æ–∑–∏—Ü–∏—è', '–∞–∫—Ç–∏–≤', '–≤–∞–ª—é—Ç', '–∏–Ω–≤–µ—Å—Ç–∏—Ü', '—Å–ø–µ–∫—É–ª—è—Ü', '–∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞', '—Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã', '—Ä–∞–∑–±–æ—Ä —Å–¥–µ–ª–æ–∫'];
    this.excludeKeywords = ['–≤–∞–∫–∞–Ω—Å', '—Ä–∞–±–æ—Ç–∞', '–º—É–∑—ã–∫', '–¥–∏–∑–∞–π–Ω', '—Å—Ü–µ–Ω–∞—Ä–∏', '—Å—Ç–æ—Ä–∏—Å', '—Ä–µ–µ–ª—Å', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω', 'IT', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫', '–∫–æ–¥', '–º—É–∑—ã–∫–∞–ª—å–Ω', '—Ç–≤–æ—Ä—á–µ—Å–∫', '–∫—Ä–µ–∞—Ç–∏–≤'];
  }

  async init() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...');
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await fs.mkdir(this.resultsDir, { recursive: true });
      
      await this.mt.start();
      console.log('‚úÖ MTProto –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      await this.smartSearch.init(this.client);
      console.log('‚úÖ SmartGlobalSearch –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      await this.loadCheckpoint();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async loadCheckpoint() {
    try {
      const data = await fs.readFile(this.checkpointFile, 'utf8');
      const checkpoint = JSON.parse(data);
      this.processedKeywords = checkpoint.processedKeywords || 0;
      
      if (checkpoint.allChannels) {
        this.allChannels = new Map(Object.entries(checkpoint.allChannels));
      }
      
      console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç: ${this.processedKeywords}/${this.keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤`);
    } catch (error) {
      console.log('üìù –ß–µ–∫–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è');
    }
  }

  async saveCheckpoint() {
    const checkpoint = {
      processedKeywords: this.processedKeywords,
      allChannels: Object.fromEntries(this.allChannels),
      timestamp: new Date().toISOString()
    };
    
    await fs.writeFile(this.checkpointFile, JSON.stringify(checkpoint, null, 2));
  }

  async sendToAntilopa(message) {
    try {
      await this.client.sendMessage(this.antilopaGroupId, { message });
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ê–ù–¢–ò–õ–û–ü–£');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ê–ù–¢–ò–õ–û–ü–£:', error);
    }
  }

  // 4. –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  isTradingRelevant(channel) {
    const title = (channel.title || '').toLowerCase();
    const description = (channel.description || '').toLowerCase();
    const text = `${title} ${description}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    const hasTradingKeywords = this.tradingKeywords.some(keyword => 
      text.includes(keyword.toLowerCase())
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    const hasExcludeKeywords = this.excludeKeywords.some(keyword => 
      text.includes(keyword.toLowerCase())
    );
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ AI –∞–Ω–∞–ª–∏–∑—É
    const aiRelevant = channel.aiAnalysis && 
      (channel.aiAnalysis.categories || []).some(cat => 
        ['—Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ñ–æ—Ä–µ–∫—Å', '–∫—Ä–∏–ø—Ç–æ', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'].some(tradingCat =>
          cat.toLowerCase().includes(tradingCat)
        )
      );
    
    return hasTradingKeywords && !hasExcludeKeywords && (aiRelevant || !channel.aiAnalysis);
  }

  async researchTradingStrategies() {
    console.log(`üîç –ù–∞—á–∏–Ω–∞—é —É–ª—É—á—à–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ ${this.keywords.length} –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.sendToAntilopa(`üöÄ –£–õ–£–ß–®–ï–ù–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –¢–û–†–ì–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô\n\nüìä –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${this.keywords.length}\nüîß –£–ª—É—á—à–µ–Ω–∏—è: —É—Ç–æ—á–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã + —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + AI –∫–æ–Ω—Ç–µ–∫—Å—Ç\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...`);
    
    for (let i = this.processedKeywords; i < this.keywords.length; i++) {
      const keyword = this.keywords[i];
      
      try {
        console.log(`\nüìä [${i+1}/${this.keywords.length}] –ü–æ–∏—Å–∫ –ø–æ: "${keyword}"`);
        
        // –ü–æ–∏—Å–∫ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º
        const results = await this.smartSearch.smartSearch(keyword, {
          limit: 5,
          aiAnalysisLimit: 2,
          analysisDelay: 0
        });
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} –∫–∞–Ω–∞–ª–æ–≤`);
        
        // 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å—Ç-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        const filteredResults = results.filter(channel => this.isTradingRelevant(channel));
        console.log(`üéØ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredResults.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        filteredResults.forEach(channel => {
          const key = channel.id || channel.title;
          if (!this.allChannels.has(key)) {
            this.allChannels.set(key, {
              ...channel,
              foundByKeywords: [keyword],
              totalScore: 0,
              relevanceScore: this.calculateRelevanceScore(channel)
            });
          } else {
            const existing = this.allChannels.get(key);
            if (!existing.foundByKeywords.includes(keyword)) {
              existing.foundByKeywords.push(keyword);
            }
          }
        });
        
        this.processedKeywords = i + 1;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç –∫–∞–∂–¥—ã–µ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if (this.processedKeywords % 10 === 0) {
          await this.saveCheckpoint();
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç
          const progress = Math.round((this.processedKeywords / this.keywords.length) * 100);
          const relevantChannels = Array.from(this.allChannels.values()).filter(ch => this.isTradingRelevant(ch)).length;
          await this.sendToAntilopa(`üìà –ü–†–û–ì–†–ï–°–°: ${this.processedKeywords}/${this.keywords.length} (${progress}%)\n\nüìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${relevantChannels}\n‚è≥ –ü—Ä–æ–¥–æ–ª–∂–∞—é –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...`);
        }
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–∏—Å–∫–∞–º–∏
        await this.delay(2000);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ "${keyword}":`, error.message);
        continue;
      }
    }
    
    console.log(`\nüéØ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!`);
    const relevantChannels = Array.from(this.allChannels.values()).filter(ch => this.isTradingRelevant(ch));
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${relevantChannels.length}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await this.saveFinalResults();
    
    // –ù–∞—Ö–æ–¥–∏–º –¢–û–ü-10 –∏ —á–µ–º–ø–∏–æ–Ω–∞
    await this.findTop10AndChampion();
  }

  calculateRelevanceScore(channel) {
    let score = 0;
    const text = `${channel.title || ''} ${channel.description || ''}`.toLowerCase();
    
    // –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    this.tradingKeywords.forEach(keyword => {
      if (text.includes(keyword.toLowerCase())) {
        score += 2;
      }
    });
    
    // –ë–æ–Ω—É—Å –∑–∞ AI –∞–Ω–∞–ª–∏–∑
    if (channel.aiAnalysis && !channel.aiAnalysis.error) {
      score += channel.aiAnalysis.qualityScore || 0;
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (channel.aiAnalysis.categories) {
        const tradingCats = ['—Ç—Ä–µ–π–¥–∏–Ω–≥', '—Ñ–æ—Ä–µ–∫—Å', '–∫—Ä–∏–ø—Ç–æ', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'];
        tradingCats.forEach(cat => {
          if (channel.aiAnalysis.categories.some(aiCat => aiCat.toLowerCase().includes(cat))) {
            score += 3;
          }
        });
      }
    }
    
    return score;
  }

  async saveFinalResults() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const allResults = Array.from(this.allChannels.values());
    const relevantResults = allResults.filter(ch => this.isTradingRelevant(ch));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const relevantResultsFile = path.join(this.resultsDir, `trading_strategies_relevant_${timestamp}.json`);
    await fs.writeFile(relevantResultsFile, JSON.stringify(relevantResults, null, 2));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const fullResultsFile = path.join(this.resultsDir, `trading_strategies_full_v2_${timestamp}.json`);
    await fs.writeFile(fullResultsFile, JSON.stringify(allResults, null, 2));
    
    console.log(`üíæ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${relevantResultsFile}`);
    console.log(`üíæ –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${fullResultsFile}`);
  }

  async findTop10AndChampion() {
    console.log('\nüèÜ –ê–ù–ê–õ–ò–ó –¢–û–ü-10 –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –ö–ê–ù–ê–õ–û–í...');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å AI –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const relevantChannelsWithAI = Array.from(this.allChannels.values())
      .filter(channel => this.isTradingRelevant(channel) && channel.aiAnalysis && !channel.aiAnalysis.error)
      .sort((a, b) => (b.relevanceScore || 0) - (a.relevanceScore || 0));
    
    const top10 = relevantChannelsWithAI.slice(0, 10);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${relevantChannelsWithAI.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å AI –∞–Ω–∞–ª–∏–∑–æ–º`);
    console.log(`üèÜ –¢–û–ü-10 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–ü-10 –≤ –ê–ù–¢–ò–õ–û–ü–£
    let top10Message = `üèÜ –¢–û–ü-10 –†–ï–õ–ï–í–ê–ù–¢–ù–´–• –ö–ê–ù–ê–õ–û–í –ü–û –¢–û–†–ì–û–í–´–ú –°–¢–†–ê–¢–ï–ì–ò–Ø–ú\n\n`;
    
    top10.forEach((channel, index) => {
      const score = channel.relevanceScore || 0;
      const aiScore = channel.aiAnalysis.qualityScore || 0;
      const emoji = score >= 15 ? 'üåü' : score >= 10 ? '‚≠ê' : 'üî∂';
      
      top10Message += `${index + 1}. ${emoji} ${channel.title}\n`;
      top10Message += `   üë• ${channel.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
      top10Message += `   üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${score.toFixed(1)}\n`;
      top10Message += `   üß† AI –†–µ–π—Ç–∏–Ω–≥: ${aiScore}/10\n`;
      top10Message += `   üéØ ${channel.aiAnalysis.verdict}\n`;
      if (channel.username) top10Message += `   üîó @${channel.username}\n`;
      top10Message += `\n`;
      
      console.log(`${index + 1}. ${channel.title} - –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${score.toFixed(1)}, AI: ${aiScore}/10`);
    });
    
    await this.sendToAntilopa(top10Message);
    
    // –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–µ–º–ø–∏–æ–Ω–∞
    if (top10.length > 0) {
      await this.analyzeChampion(top10[0]);
    }
  }

  async analyzeChampion(champion) {
    console.log(`\nüëë –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó –ß–ï–ú–ü–ò–û–ù–ê: ${champion.title}`);
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const deepMetrics = await this.collectDeepMetrics(champion);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑
    let championMessage = `üëë –ß–ï–ú–ü–ò–û–ù –¢–û–†–ì–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô (–£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)\n\n`;
    championMessage += `üèÜ ${champion.title}\n`;
    championMessage += `üë• ${champion.participantsCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n`;
    if (champion.username) championMessage += `üîó @${champion.username}\n\n`;
    
    // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
    championMessage += `üéØ –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨: ${champion.relevanceScore?.toFixed(1) || 0}\n`;
    championMessage += `üìù –ù–∞–π–¥–µ–Ω –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: ${champion.foundByKeywords.slice(0, 5).join(', ')}\n\n`;
    
    // AI –∞–Ω–∞–ª–∏–∑
    const analysis = champion.aiAnalysis;
    championMessage += `üß† AI –ê–ù–ê–õ–ò–ó:\n`;
    championMessage += `‚≠ê –†–µ–π—Ç–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞: ${analysis.qualityScore}/10\n`;
    championMessage += `üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.educationalValue}/10\n`;
    championMessage += `üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å: ${analysis.commercialIndex}/10\n`;
    championMessage += `üìù –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${analysis.contentType}\n`;
    championMessage += `üë• –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${analysis.targetAudience}\n`;
    championMessage += `üéØ –í–µ—Ä–¥–∏–∫—Ç: ${analysis.verdict}\n`;
    championMessage += `üí≠ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: ${analysis.recommendation}\n\n`;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    if (deepMetrics) {
      championMessage += `üìä –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:\n`;
      championMessage += `üìù –ü–æ—Å—Ç–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${deepMetrics.postsAnalyzed || 0}\n`;
      championMessage += `üìà –ü–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${deepMetrics.avgPostsPerDay?.toFixed(1) || 0}\n`;
      championMessage += `üëÄ –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${deepMetrics.avgViewsPerPost || 0}\n`;
      championMessage += `‚ù§Ô∏è –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏: ${deepMetrics.avgReactionsPerPost || 0}\n`;
      championMessage += `üìè –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å—Ç–∞: ${deepMetrics.avgPostLength || 0} —Å–∏–º–≤–æ–ª–æ–≤\n`;
      championMessage += `üñºÔ∏è –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç: ${deepMetrics.mediaPercentage || 0}%\n\n`;
    }
    
    championMessage += `üéØ –ò–¢–û–ì: –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –ø–æ–∫–∞–∑–∞–ª –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π!`;
    
    await this.sendToAntilopa(championMessage);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ–º–ø–∏–æ–Ω–∞
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const championFile = path.join(this.resultsDir, `champion_analysis_v2_${timestamp}.json`);
    await fs.writeFile(championFile, JSON.stringify({
      champion: champion,
      deepMetrics: deepMetrics,
      analysis: analysis,
      relevanceScore: champion.relevanceScore
    }, null, 2));
    
    console.log(`üíæ –ê–Ω–∞–ª–∏–∑ —á–µ–º–ø–∏–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${championFile}`);
    console.log(`\nüéâ –£–õ–£–ß–®–ï–ù–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–û!`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const relevantCount = Array.from(this.allChannels.values()).filter(ch => this.isTradingRelevant(ch)).length;
    await this.sendToAntilopa(`üéâ –£–õ–£–ß–®–ï–ù–ù–û–ï –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!\n\nüìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${this.allChannels.size} –∫–∞–Ω–∞–ª–æ–≤\nüéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–æ: ${relevantCount}\nüèÜ –ù–∞–π–¥–µ–Ω —á–µ–º–ø–∏–æ–Ω: ${champion.title}\n\nüíæ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª—ã`);
  }

  async collectDeepMetrics(channel) {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ AI –∞–Ω–∞–ª–∏–∑–∞
      return channel.metrics || {};
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫:', error);
      return {};
    }
  }

  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

async function main() {
  const research = new TradingStrategiesResearchV2();
  
  try {
    await research.init();
    await research.researchTradingStrategies();
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    await research.sendToAntilopa(`‚ùå –û–®–ò–ë–ö–ê –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø: ${error.message}`);
  } finally {
    process.exit(0);
  }
}

if (require.main === module) {
  main();
}

module.exports = TradingStrategiesResearchV2;
