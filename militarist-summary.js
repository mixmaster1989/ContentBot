require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const { LLMRewriter } = require('./llm/llm-rewriter');

class MilitaristSummarizer {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    this.militaristChannelId = -1001111348665; // ID –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç" (—Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º -100)
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI —Å –∫–ª—é—á–æ–º –∏–∑ .env
    const { OpenAI } = require('openai');
    this.openai = new OpenAI({
      apiKey: process.env.LLM_API || process.env.OPENROUTER_API_KEY
    });
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
  async getMessagesFromTime(startTime) {
    try {
      console.log(`üìÖ –ü–æ–ª—É—á–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å ${new Date(startTime).toLocaleString('ru')}...`);
      
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: this.militaristChannelId,
          limit: 200, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
          offsetDate: Math.floor(startTime / 1000), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ–∫—É–Ω–¥—ã
          offsetId: 0,
          maxId: 0,
          minId: 0,
          addOffset: 0,
          hash: 0n
        })
      );

      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${messages.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      if (messages.messages.length > 0) {
        const firstMsg = messages.messages[0];
        const lastMsg = messages.messages[messages.messages.length - 1];
        console.log(`üìÖ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${new Date(firstMsg.date * 1000).toLocaleString('ru')}`);
        console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${new Date(lastMsg.date * 1000).toLocaleString('ru')}`);
        console.log(`üìÖ –ò—â–µ–º —Å: ${new Date(startTime).toLocaleString('ru')}`);
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞–ª–∏—á–∏—é —Ç–µ–∫—Å—Ç–∞
      const filteredMessages = messages.messages
        .filter(msg => 
          msg.message && 
          msg.message.length > 30 // –ú–∏–Ω–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤
        )
        .map(msg => ({
          id: msg.id,
          text: msg.message,
          date: new Date(msg.date * 1000),
          views: msg.views || 0,
          timestamp: msg.date * 1000
        }))
        .sort((a, b) => b.timestamp - a.timestamp); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)

      console.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filteredMessages.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
      
      return filteredMessages;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      return [];
    }
  }

  // –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ LLM
  async createSummary(messages) {
    try {
      console.log('ü§ñ –°–æ–∑–¥–∞—é —Å–≤–æ–¥–∫—É —á–µ—Ä–µ–∑ LLM...');
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
      const combinedText = messages
        .map(msg => `[${msg.date.toLocaleString('ru')}] ${msg.text}`)
        .join('\n\n');

      console.log(`üìù –û–±—â–∏–π –æ–±—ä–µ–º —Ç–µ–∫—Å—Ç–∞: ${combinedText.length} —Å–∏–º–≤–æ–ª–æ–≤`);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–≤–æ–¥–∫–∏
      const prompt = `
–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –≤–æ–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç" –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏.

–ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
${combinedText}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–í–û–î–ö–ï:
- –û–±—ä–µ–º: 2-3 –∞–±–∑–∞—Ü–∞ (300-500 —Å–ª–æ–≤)
- –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è + –¥–µ—Ç–∞–ª–∏ + –≤—ã–≤–æ–¥—ã
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
- –§–æ–∫—É—Å: –≤–æ–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã, —Ç–µ—Ö–Ω–∏–∫–∞, –æ–ø–µ—Ä–∞—Ü–∏–∏

–°–í–û–î–ö–ê:`;

      const response = await this.openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "–¢—ã –≤–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–æ–∑–¥–∞—é—â–∏–π –∫—Ä–∞—Ç–∫–∏–µ —Å–≤–æ–¥–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 800,
        temperature: 0.3
      });

      const summary = response.choices[0].message.content.trim();
      
      return {
        summary,
        messageCount: messages.length,
        timeRange: {
          from: messages[messages.length - 1]?.date || new Date(),
          to: messages[0]?.date || new Date()
        },
        totalViews: messages.reduce((sum, msg) => sum + msg.views, 0)
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏:', error);
      
      // Fallback - –ø—Ä–æ—Å—Ç–∞—è —Å–≤–æ–¥–∫–∞
      return {
        summary: `–ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç" –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: –≤–æ–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –≤–æ–µ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã.`,
        messageCount: messages.length,
        timeRange: {
          from: messages[messages.length - 1]?.date || new Date(),
          to: messages[0]?.date || new Date()
        },
        totalViews: messages.reduce((sum, msg) => sum + msg.views, 0)
      };
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  showStats(messages, summary) {
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–í–û–î–ö–ò');
    console.log('=' .repeat(50));
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: ${summary.timeRange.from.toLocaleString('ru')} - ${summary.timeRange.to.toLocaleString('ru')}`);
    console.log(`üìù –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${summary.messageCount}`);
    console.log(`üëÄ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${summary.totalViews.toLocaleString()}`);
    console.log(`üìà –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –Ω–∞ –ø–æ—Å—Ç: ${Math.round(summary.totalViews / summary.messageCount).toLocaleString()}`);
    console.log(`üìè –î–ª–∏–Ω–∞ —Å–≤–æ–¥–∫–∏: ${summary.summary.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–¥–∫—É –≤ —Ñ–∞–π–ª
  async saveSummary(summary, messages) {
    try {
      const fs = require('fs').promises;
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const filename = `militarist_summary_${timestamp}.txt`;
      
      const content = `–°–í–û–î–ö–ê –ö–ê–ù–ê–õ–ê "–ú–ò–õ–ò–¢–ê–†–ò–°–¢"
${'='.repeat(50)}

–ü–µ—Ä–∏–æ–¥: ${summary.timeRange.from.toLocaleString('ru')} - ${summary.timeRange.to.toLocaleString('ru')}
–°–æ–æ–±—â–µ–Ω–∏–π: ${summary.messageCount}
–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${summary.totalViews.toLocaleString()}

${summary.summary}

${'='.repeat(50)}
–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru')}
–ò—Å—Ç–æ—á–Ω–∏–∫: @infantmilitario (ID: ${this.militaristChannelId})
`;

      await fs.writeFile(filename, content, 'utf8');
      console.log(`üíæ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: ${filename}`);
      
      return filename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
      return null;
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function createMilitaristSummary() {
  const summarizer = new MilitaristSummarizer();
  
  try {
    await summarizer.init();
    
    // –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è)
    const now = new Date();
    const yesterday = new Date(now.getTime() - 72 * 60 * 60 * 1000); // 72 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
    
    console.log(`üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"`);
    console.log(`üìÖ –ü–µ—Ä–∏–æ–¥: —Å ${yesterday.toLocaleString('ru')} –¥–æ ${now.toLocaleString('ru')}`);
    console.log('');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = await summarizer.getMessagesFromTime(yesterday.getTime());
    
    if (messages.length === 0) {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
    const summary = await summarizer.createSummary(messages);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüéØ –°–í–û–î–ö–ê –ö–ê–ù–ê–õ–ê "–ú–ò–õ–ò–¢–ê–†–ò–°–¢"');
    console.log('=' .repeat(60));
    console.log(summary.summary);
    console.log('=' .repeat(60));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    summarizer.showStats(messages, summary);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    await summarizer.saveSummary(summary, messages);
    
    console.log('\n‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await summarizer.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏
if (require.main === module) {
  createMilitaristSummary();
}

module.exports = { MilitaristSummarizer };
