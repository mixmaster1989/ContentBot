require('dotenv').config();
const cron = require('node-cron');
const { CryptoRadioDJ } = require('./core/crypto-radio-dj');

class CryptoRadioScheduler {
  constructor() {
    this.dj = new CryptoRadioDJ();
    this.isRunning = false;
  }

  async init() {
    await this.dj.init();
    console.log('‚úÖ –ö—Ä–∏–ø—Ç–æ—Ä–∞–¥–∏–æ –¥–∏–¥–∂–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  }

  startScheduler() {
    // –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
    cron.schedule('0 */4 * * *', async () => {
      if (this.isRunning) {
        console.log('‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—É—Å–∫ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
        return;
      }

      this.isRunning = true;
      console.log('üéß –ó–∞–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Å—Ç–∞...');
      
      try {
        await this.dj.createPodcast();
        console.log('‚úÖ –ü–æ–¥–∫–∞—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–∞:', error.message);
      } finally {
        this.isRunning = false;
      }
    });

    console.log('‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω - –ø–æ–¥–∫–∞—Å—Ç—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞');
  }

  async createPodcastNow() {
    if (this.isRunning) {
      console.log('‚è∞ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞');
      return;
    }

    this.isRunning = true;
    console.log('üéß –°–æ–∑–¥–∞—é –ø–æ–¥–∫–∞—Å—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å...');
    
    try {
      await this.dj.createPodcast();
      console.log('‚úÖ –ü–æ–¥–∫–∞—Å—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Å—Ç–∞:', error.message);
    } finally {
      this.isRunning = false;
    }
  }

  async stop() {
    await this.dj.stop();
    console.log('‚úÖ –ö—Ä–∏–ø—Ç–æ—Ä–∞–¥–∏–æ –¥–∏–¥–∂–µ–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
if (require.main === module) {
  const scheduler = new CryptoRadioScheduler();
  
  scheduler.init().then(() => {
    scheduler.startScheduler();
    
    // –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–∫–∞—Å—Ç —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setTimeout(() => {
      scheduler.createPodcastNow();
    }, 5000);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', async () => {
      console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
      await scheduler.stop();
      process.exit(0);
    });
  });
}

module.exports = { CryptoRadioScheduler };
