require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');

async function showAllGroups() {
  let client = null;
  
  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    
    const mtClient = MTProtoClient.get();
    client = mtClient.getClient();
    await client.connect();
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    console.log('üìã –ü–æ–ª—É—á–∞—é –≤—Å–µ –≤–∞—à–∏ –≥—Ä—É–ø–ø—ã...');
    
    const dialogs = await client.invoke(
      new Api.messages.GetDialogs({
        offsetDate: 0,
        offsetId: 0,
        offsetPeer: new Api.InputPeerEmpty(),
        limit: 1000,
        hash: 0n
      })
    );

    const groups = [];
    
    for (let dialog of dialogs.dialogs) {
      const peer = dialog.peer;
      
      if (peer.className === 'PeerChannel') {
        const channelId = peer.channelId;
        const channel = dialogs.chats.find(chat => chat.id === channelId);
        
        if (channel && !channel.broadcast) { // –¢–æ–ª—å–∫–æ –≥—Ä—É–ø–ø—ã, –Ω–µ –∫–∞–Ω–∞–ª—ã
          groups.push({
            id: channel.id.toString(),
            title: channel.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            username: channel.username || null,
            participantsCount: channel.participantsCount || 0,
            about: channel.about || null
          });
        }
      }
    }

    console.log(`\nüë• –í–°–ï –í–ê–®–ò –ì–†–£–ü–ü–´ (${groups.length}):`);
    console.log('=' .repeat(60));
    
    if (groups.length === 0) {
      console.log('‚ùå –ì—Ä—É–ø–ø –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    groups.sort((a, b) => b.participantsCount - a.participantsCount);
    
    groups.forEach((group, index) => {
      console.log(`${index + 1}. üì± ${group.title}`);
      console.log(`   üÜî ID: ${group.id}`);
      if (group.username) {
        console.log(`   üìé Username: @${group.username}`);
      }
      console.log(`   üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${group.participantsCount.toLocaleString('ru-RU')}`);
      if (group.about) {
        const desc = group.about.length > 100 ? group.about.substring(0, 100) + '...' : group.about;
        console.log(`   üìù –û –≥—Ä—É–ø–ø–µ: ${desc}`);
      }
      console.log('');
    });
    
    console.log('üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
    console.log('1. –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ');
    console.log('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:');
    console.log('   node setup_group_monitor.js');
    console.log('');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (client) {
      try {
        await client.disconnect();
        console.log('üõë –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
      } catch (e) {
        // ignore
      }
    }
  }
}

showAllGroups();

