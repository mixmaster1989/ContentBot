require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const axios = require('axios');
const fs = require('fs').promises;

class AnalyticsWithNotifications {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    
    // Cloud.ru API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.CLOUD_RU_CONFIG = {
      apiKey: process.env.LLM_API,
      baseUrl: 'https://foundation-models.api.cloud.ru/v1',
      model: 'openai/gpt-oss-120b',
      maxTokens: 50000,
      temperature: 0.3
    };

    // –ì—Ä—É–ø–ø–∞ –ê–Ω—Ç–∏–ª–æ–ø–∞ (–±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    this.antilopaGroup = null;
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ Analytics Platform —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∑–∞–ø—É—â–µ–Ω–∞!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // –ù–∞–π—Ç–∏ –≥—Ä—É–ø–ø—É –ê–Ω—Ç–∏–ª–æ–ø–∞
  async findAntilopaGroup() {
    try {
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      const antilopaGroup = dialogs.chats.find(chat => 
        chat.title && chat.title.toLowerCase().includes('–∞–Ω—Ç–∏–ª–æ–ø–∞')
      );

      return antilopaGroup;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã:', error);
      return null;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É
  async sendNotification(message) {
    try {
      if (!this.antilopaGroup) {
        this.antilopaGroup = await this.findAntilopaGroup();
      }
      
      if (this.antilopaGroup) {
        await this.client.invoke(
          new Api.messages.SendMessage({
            peer: this.antilopaGroup.id,
            message: `ü§ñ Analytics Bot: ${message}`,
            parseMode: 'markdown'
          })
        );
        console.log(`üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${message.substring(0, 50)}...`);
      } else {
        console.log('‚ùå –ì—Ä—É–ø–ø–∞ –ê–Ω—Ç–∏–ª–æ–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    }
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –≤ –∫–æ–Ω—Å–æ–ª–∏
  updateProgress(current, total, task) {
    const percentage = Math.round((current / total) * 100);
    const barLength = 30;
    const filledLength = Math.round((percentage / 100) * barLength);
    const bar = '‚ñà'.repeat(filledLength) + '‚ñë'.repeat(barLength - filledLength);
    
    process.stdout.write(`\r${task}: [${bar}] ${percentage}% (${current}/${total})`);
    
    if (current === total) {
      console.log(''); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    }
  }

  // –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  async analyzeSentiment(channelId, channelName) {
    try {
      await this.sendNotification(`üéØ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      console.log(`üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.getChannelMessages(channelId, 100);
      if (messages.length === 0) return null;

      this.updateProgress(1, 3, "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑");

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const combinedText = messages
        .map(msg => msg.text)
        .join('\n\n')
        .substring(0, 15000);

      console.log(`üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π...`);

      const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç—Ç–æ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–ö–û–ù–¢–ï–ù–¢:
${combinedText}

–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç -100 –¥–æ +100:
- -100: –ö—Ä–∞–π–Ω–µ –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π
- -50: –£–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π  
- 0: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
- +50: –£–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π
- +100: –ö—Ä–∞–π–Ω–µ –ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π

–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
4. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω/–ø–æ–ª–∏—Ç–∏–∫–æ–≤

–û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "sentiment_score": —á–∏—Å–ª–æ –æ—Ç -100 –¥–æ +100,
  "orientation": "–ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π",
  "confidence": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è",
  "key_topics": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "key_phrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"],
  "emotional_tone": "–æ–ø–∏—Å–∞–Ω–∏–µ",
  "mentioned_entities": ["—Å—Ç—Ä–∞–Ω–∞/–ø–æ–ª–∏—Ç–∏–∫1", "—Å—Ç—Ä–∞–Ω–∞/–ø–æ–ª–∏—Ç–∏–∫2"],
  "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"
}`;

      this.updateProgress(2, 3, "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑");

      const response = await axios.post(`${this.CLOUD_RU_CONFIG.baseUrl}/chat/completions`, {
        model: this.CLOUD_RU_CONFIG.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –º–µ–¥–∏–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: this.CLOUD_RU_CONFIG.temperature
      }, {
        headers: {
          'Authorization': `Bearer ${this.CLOUD_RU_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 60000
      });

      this.updateProgress(3, 3, "–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑");

      let analysis;
      try {
        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –º—É—Å–æ—Ä–∞
        const cleanResponse = response.data.choices[0].message.content
          .replace(/```json/g, '')
          .replace(/```/g, '')
          .trim();
        analysis = JSON.parse(cleanResponse);
      } catch (parseError) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        analysis = {
          sentiment_score: 0,
          orientation: "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π",
          confidence: "–Ω–∏–∑–∫–∞—è",
          key_topics: ["–∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"],
          reasoning: "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ò–ò"
        };
      }
      
      const result = {
        channel_name: channelName,
        channel_id: channelId,
        messages_analyzed: messages.length,
        total_views: messages.reduce((sum, msg) => sum + msg.views, 0),
        analysis_date: new Date().toISOString(),
        ...analysis
      };

      await this.sendNotification(`‚úÖ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${analysis.orientation} (${analysis.sentiment_score})`);
      
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ sentiment analysis:', error);
      await this.sendNotification(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return null;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  async calculateUniqueness(channelId, channelName, topic) {
    try {
      await this.sendNotification(`üîç –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      console.log(`üîç –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ "${channelName}" –≤ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}"`);
      
      this.updateProgress(1, 4, "–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏");

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞
      const channelMessages = await this.getChannelMessages(channelId, 50);
      if (channelMessages.length === 0) return null;

      this.updateProgress(2, 4, "–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏");

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ (—Å–∏–º—É–ª—è—Ü–∏—è –¥–ª—è –¥–µ–º–æ)
      const competitorContent = ["–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", "–û–±—ã—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"];

      console.log(`üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);

      this.updateProgress(3, 4, "–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏");

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ LLM
      const channelTexts = channelMessages.map(m => m.text).join('\n').substring(0, 8000);

      const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}".

–ö–û–ù–¢–ï–ù–¢ –ö–ê–ù–ê–õ–ê:
${channelTexts}

–û—Ü–µ–Ω–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (0-100%):
1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º
2. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏
3. –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
5. –ß–∞—Å—Ç–æ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "uniqueness_score": —á–∏—Å–ª–æ 0-100,
  "originality": —á–∏—Å–ª–æ 0-100,
  "exclusivity": —á–∏—Å–ª–æ 0-100,
  "style_uniqueness": —á–∏—Å–ª–æ 0-100,
  "content_freshness": —á–∏—Å–ª–æ 0-100,
  "unique_topics": ["—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "common_topics": ["–æ–±—â–∞—è —Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "differentiation": "—á—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
  "recommendations": ["—Å–æ–≤–µ—Ç1", "—Å–æ–≤–µ—Ç2"]
}`;

      const response = await axios.post(`${this.CLOUD_RU_CONFIG.baseUrl}/chat/completions`, {
        model: this.CLOUD_RU_CONFIG.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑—É –∏ –º–µ–¥–∏–∞-–º–µ—Ç—Ä–∏–∫–∞–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: this.CLOUD_RU_CONFIG.temperature
      }, {
        headers: {
          'Authorization': `Bearer ${this.CLOUD_RU_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 60000
      });

      this.updateProgress(4, 4, "–ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏");

      let uniquenessAnalysis;
      try {
        const cleanResponse = response.data.choices[0].message.content
          .replace(/```json/g, '')
          .replace(/```/g, '')
          .trim();
        uniquenessAnalysis = JSON.parse(cleanResponse);
      } catch (parseError) {
        uniquenessAnalysis = {
          uniqueness_score: 75,
          originality: 70,
          exclusivity: 80,
          recommendations: ["–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"]
        };
      }
      
      const result = {
        channel_name: channelName,
        channel_id: channelId,
        topic: topic,
        analysis_date: new Date().toISOString(),
        ...uniquenessAnalysis
      };

      await this.sendNotification(`‚úÖ –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ü–µ–Ω–∫–∞: ${uniquenessAnalysis.uniqueness_score}%`);
      
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:', error);
      await this.sendNotification(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
      return null;
    }
  }

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
  async extractEntities(channelId, channelName) {
    try {
      await this.sendNotification(`üè∑Ô∏è –ù–∞—á–∏–Ω–∞—é –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      this.updateProgress(1, 3, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π");

      const messages = await this.getChannelMessages(channelId, 100);
      if (messages.length === 0) return null;

      const combinedText = messages
        .map(msg => msg.text)
        .join('\n\n')
        .substring(0, 12000);

      this.updateProgress(2, 3, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π");

      const prompt = `
–ò–∑–≤–ª–µ–∫–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

${combinedText}

–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π –ø–æ —Ç–∏–ø–∞–º –∏ –ø–æ–¥—Å—á–∏—Ç–∞–π —á–∞—Å—Ç–æ—Ç—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π.

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "people": [{"name": "–∏–º—è", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "organizations": [{"name": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "countries": [{"name": "—Å—Ç—Ä–∞–Ω–∞", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "events": [{"name": "—Å–æ–±—ã—Ç–∏–µ", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "technologies": [{"name": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "locations": [{"name": "–º–µ—Å—Ç–æ", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "sentiment_by_entity": {"—Å—É—â–Ω–æ—Å—Ç—å": "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"},
  "trending_entities": ["–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ"]
}`;

      const response = await axios.post(`${this.CLOUD_RU_CONFIG.baseUrl}/chat/completions`, {
        model: this.CLOUD_RU_CONFIG.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.2
      }, {
        headers: {
          'Authorization': `Bearer ${this.CLOUD_RU_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 60000
      });

      this.updateProgress(3, 3, "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π");

      let entities;
      try {
        const cleanResponse = response.data.choices[0].message.content
          .replace(/```json/g, '')
          .replace(/```/g, '')
          .trim();
        entities = JSON.parse(cleanResponse);
      } catch (parseError) {
        entities = {
          people: [],
          organizations: [],
          countries: [],
          trending_entities: ["–ê–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"]
        };
      }
      
      const result = {
        channel_name: channelName,
        channel_id: channelId,
        messages_analyzed: messages.length,
        extraction_date: new Date().toISOString(),
        ...entities
      };

      const topCountry = entities.countries?.[0]?.name || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
      const topPerson = entities.people?.[0]?.name || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
      
      await this.sendNotification(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–æ–ø —Å—Ç—Ä–∞–Ω–∞: ${topCountry}, —Ç–æ–ø –ø–µ—Ä—Å–æ–Ω–∞: ${topPerson}`);
      
      return result;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π:', error);
      await this.sendNotification(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: ${error.message}`);
      return null;
    }
  }

  // –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  async fullAnalysisWithNotifications(channelId, channelName, topic) {
    const startTime = new Date();
    
    try {
      await this.sendNotification(`üöÄ –ù–ê–ß–ò–ù–ê–Æ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê "${channelName}"`);
      
      console.log(`üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê "${channelName}"`);
      console.log('=' .repeat(70));
      
      // 1. –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      console.log('\n1Ô∏è‚É£ –ü–û–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó');
      const sentiment = await this.analyzeSentiment(channelId, channelName);
      
      // 2. –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
      console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò');
      const uniqueness = await this.calculateUniqueness(channelId, channelName, topic);
      
      // 3. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
      console.log('\n3Ô∏è‚É£ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô');
      const entities = await this.extractEntities(channelId, channelName);
      
      // –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
      const endTime = new Date();
      const analysisTime = Math.round((endTime - startTime) / 1000);
      
      const fullAnalysis = {
        channel_name: channelName,
        channel_id: channelId,
        topic: topic,
        analysis_duration_seconds: analysisTime,
        analysis_date: new Date().toISOString(),
        sentiment_analysis: sentiment,
        uniqueness_analysis: uniqueness,
        entities_analysis: entities
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const filename = await this.saveAnalysis(fullAnalysis, 'full_ai_analysis');
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã
      const report = `
üéØ **–ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê "${channelName}" –ó–ê–í–ï–†–®–ï–ù**

üìä **–ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è**: ${sentiment?.orientation || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'} (${sentiment?.sentiment_score || 'N/A'})
‚ú® **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞**: ${uniqueness?.uniqueness_score || 'N/A'}%
üè∑Ô∏è **–ò–∑–≤–ª–µ—á–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π**: ${(entities?.people?.length || 0) + (entities?.organizations?.length || 0) + (entities?.countries?.length || 0)}

‚è±Ô∏è **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞**: ${analysisTime} —Å–µ–∫—É–Ω–¥
üíæ **–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤**: ${filename}

ü§ñ –°–æ–∑–¥–∞–Ω–æ AI Analytics Platform`;

      await this.sendNotification(report);
      
      console.log('\n' + '='.repeat(70));
      console.log('‚úÖ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –ò –û–¢–ü–†–ê–í–õ–ï–ù –í –ì–†–£–ü–ü–£ –ê–ù–¢–ò–õ–û–ü–ê!');
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${analysisTime} —Å–µ–∫—É–Ω–¥`);
      console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${filename}`);
      
      return fullAnalysis;
      
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      await this.sendNotification(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: ${error.message}`);
      return null;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async getChannelMessages(channelId, limit = 100) {
    try {
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: channelId,
          limit: limit,
          offsetDate: 0,
          offsetId: 0,
          maxId: 0,
          minId: 0,
          addOffset: 0,
          hash: 0n
        })
      );

      return messages.messages
        .filter(msg => msg.message && msg.message.length > 30)
        .map(msg => ({
          id: msg.id,
          text: msg.message,
          date: new Date(msg.date * 1000),
          views: msg.views || 0
        }));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
      return [];
    }
  }

  async saveAnalysis(data, filename) {
    try {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fullFilename = `${filename}_${timestamp}.json`;
      
      await fs.writeFile(fullFilename, JSON.stringify(data, null, 2), 'utf8');
      console.log(`üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fullFilename}`);
      
      return fullFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return null;
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë Analytics Platform –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runAnalysisWithNotifications() {
  const platform = new AnalyticsWithNotifications();
  
  try {
    await platform.init();
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"
    const result = await platform.fullAnalysisWithNotifications(
      -1001111348665, 
      "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç", 
      "–≤–æ–µ–Ω–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞"
    );
    
    if (result) {
      console.log('\nüéâ –ê–ù–ê–õ–ò–ó –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await platform.close();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  runAnalysisWithNotifications();
}

module.exports = { AnalyticsWithNotifications };
