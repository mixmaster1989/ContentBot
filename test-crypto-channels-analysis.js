require('dotenv').config();
const { ProfitPotokManager } = require('./core/profitpotok-manager');

async function analyzeCryptoChannels() {
  const manager = new ProfitPotokManager();
  
  try {
    console.log('üîç –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í –ü–ê–ü–ö–ò –ö–†–ò–ü–¢–ê');
    console.log('===============================');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await manager.init();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê
    console.log('üìÅ –ü–æ–ª—É—á–∞—é –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ –ö–†–ò–ü–¢–ê...');
    const folderInfo = await manager.viewCryptoFolder();
    
    if (!folderInfo.found || folderInfo.channels.length === 0) {
      console.log('‚ùå –ü–∞–ø–∫–∞ –ö–†–ò–ü–¢–ê –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞');
      return;
    }
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${folderInfo.channels.length}`);
    console.log('');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
    const channelAnalysis = [];
    
    for (let i = 0; i < folderInfo.channels.length; i++) {
      const channel = folderInfo.channels[i];
      console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–Ω–∞–ª ${i + 1}/${folderInfo.channels.length}: ${channel.title}`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞
        const messages = await manager.getCryptoFolderMessages(10);
        const channelMessages = messages.filter(msg => msg.channelTitle === channel.title);
        
        console.log(`   üìù –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${channelMessages.length}`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        const analysis = analyzeChannelContent(channelMessages);
        
        channelAnalysis.push({
          channel: channel,
          messageCount: channelMessages.length,
          analysis: analysis,
          sampleMessages: channelMessages.slice(0, 3) // –ü–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        });
        
        console.log(`   üéØ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${analysis.primaryType}`);
        console.log(`   üìà –°–∏–≥–Ω–∞–ª—ã: ${analysis.signalCount}, –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: ${analysis.analysisCount}, –ù–æ–≤–æ—Å—Ç–∏: ${analysis.newsCount}`);
        console.log('');
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–∞ ${channel.title}: ${error.message}`);
        channelAnalysis.push({
          channel: channel,
          messageCount: 0,
          analysis: { primaryType: '–û—à–∏–±–∫–∞', signalCount: 0, analysisCount: 0, newsCount: 0 },
          sampleMessages: []
        });
      }
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–û–í');
    console.log('==========================');
    
    const signalChannels = channelAnalysis.filter(c => c.analysis.primaryType === '–°–∏–≥–Ω–∞–ª—ã');
    const analysisChannels = channelAnalysis.filter(c => c.analysis.primaryType === '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞');
    const newsChannels = channelAnalysis.filter(c => c.analysis.primaryType === '–ù–æ–≤–æ—Å—Ç–∏');
    const mixedChannels = channelAnalysis.filter(c => c.analysis.primaryType === '–°–º–µ—à–∞–Ω–Ω—ã–π');
    
    console.log(`üéØ –ö–ê–ù–ê–õ–´ –° –ß–ò–°–¢–´–ú–ò –°–ò–ì–ù–ê–õ–ê–ú–ò (${signalChannels.length}):`);
    signalChannels.forEach(c => {
      console.log(`   ‚Ä¢ ${c.channel.title} - ${c.analysis.signalCount} —Å–∏–≥–Ω–∞–ª–æ–≤`);
    });
    
    console.log(`\nüìà –ö–ê–ù–ê–õ–´ –° –°–ò–ì–ù–ê–õ–ê–ú–ò + –û–ë–û–°–ù–û–í–ê–ù–ò–ï–ú (${analysisChannels.length}):`);
    analysisChannels.forEach(c => {
      console.log(`   ‚Ä¢ ${c.channel.title} - ${c.analysis.signalCount} —Å–∏–≥–Ω–∞–ª–æ–≤, ${c.analysis.analysisCount} –∞–Ω–∞–ª–∏—Ç–∏–∫–∏`);
    });
    
    console.log(`\nüì∞ –ö–ê–ù–ê–õ–´ –° –ù–û–í–û–°–¢–Ø–ú–ò (${newsChannels.length}):`);
    newsChannels.forEach(c => {
      console.log(`   ‚Ä¢ ${c.channel.title} - ${c.analysis.newsCount} –Ω–æ–≤–æ—Å—Ç–µ–π`);
    });
    
    console.log(`\nüîÑ –°–ú–ï–®–ê–ù–ù–´–ï –ö–ê–ù–ê–õ–´ (${mixedChannels.length}):`);
    mixedChannels.forEach(c => {
      console.log(`   ‚Ä¢ ${c.channel.title} - –°:${c.analysis.signalCount} –ê:${c.analysis.analysisCount} –ù:${c.analysis.newsCount}`);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('\nüìù –ü–†–ò–ú–ï–†–´ –°–û–û–ë–©–ï–ù–ò–ô:');
    console.log('====================');
    
    channelAnalysis.forEach((channel, index) => {
      if (channel.sampleMessages.length > 0) {
        console.log(`\n${index + 1}. ${channel.channel.title}:`);
        channel.sampleMessages.forEach((msg, msgIndex) => {
          console.log(`   ${msgIndex + 1}. ${msg.text.substring(0, 100)}...`);
        });
      }
    });
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏:', error);
  } finally {
    await manager.stop();
  }
}

function analyzeChannelContent(messages) {
  let signalCount = 0;
  let analysisCount = 0;
  let newsCount = 0;
  
  const signalKeywords = [
    'BUY', 'SELL', 'LONG', 'SHORT', '–í–•–û–î', '–í–´–•–û–î', '–°–¢–û–ü', '–¢–ï–ô–ö',
    '–ø–æ–∫—É–ø–∫–∞', '–ø—Ä–æ–¥–∞–∂–∞', '–æ—Ç–∫—Ä—ã—Ç—å', '–∑–∞–∫—Ä—ã—Ç—å', '–ø–æ–∑–∏—Ü–∏—è', '—Å–∏–≥–Ω–∞–ª',
    'BTC', 'ETH', 'USDT', '—Ü–µ–Ω–∞', '–∫—É—Ä—Å', '–≥—Ä–∞—Ñ–∏–∫', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑'
  ];
  
  const analysisKeywords = [
    '–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–≥–Ω–æ–∑', '—Ç—Ä–µ–Ω–¥', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ', '—Ñ–∏–±–æ–Ω–∞—á—á–∏',
    'RSI', 'MACD', 'Bollinger', '—É—Ä–æ–≤–µ–Ω—å', '–∑–æ–Ω–∞', '–ø–∞—Ç—Ç–µ—Ä–Ω', '—Ñ–æ—Ä–º–∞—Ü–∏—è',
    '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π', '–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '–ª–æ–≥–∏–∫–∞', '–ø—Ä–∏—á–∏–Ω–∞'
  ];
  
  const newsKeywords = [
    '–Ω–æ–≤–æ—Å—Ç—å', '–Ω–æ–≤–æ—Å—Ç–∏', '—Å–æ–±—ã—Ç–∏–µ', '—Å–æ–±—ã—Ç–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
    '—Ä–µ–ª–∏–∑', '–∑–∞–ø—É—Å–∫', '–ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è', '–ª–∏—Å—Ç–∏–Ω–≥', '–¥–µ–ª–∏—Å—Ç–∏–Ω–≥',
    '—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∑–∞–∫–æ–Ω', '–∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ', '–∑–∞–ø—Ä–µ—Ç', '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
  ];
  
  messages.forEach(msg => {
    const text = msg.text.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
    const hasSignals = signalKeywords.some(keyword => text.includes(keyword.toLowerCase()));
    if (hasSignals) signalCount++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    const hasAnalysis = analysisKeywords.some(keyword => text.includes(keyword.toLowerCase()));
    if (hasAnalysis) analysisCount++;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
    const hasNews = newsKeywords.some(keyword => text.includes(keyword.toLowerCase()));
    if (hasNews) newsCount++;
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  let primaryType = '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π';
  
  if (signalCount > analysisCount && signalCount > newsCount) {
    primaryType = '–°–∏–≥–Ω–∞–ª—ã';
  } else if (analysisCount > signalCount && analysisCount > newsCount) {
    primaryType = '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞';
  } else if (newsCount > signalCount && newsCount > analysisCount) {
    primaryType = '–ù–æ–≤–æ—Å—Ç–∏';
  } else if (signalCount > 0 && analysisCount > 0) {
    primaryType = '–°–º–µ—à–∞–Ω–Ω—ã–π';
  }
  
  return {
    primaryType,
    signalCount,
    analysisCount,
    newsCount,
    totalMessages: messages.length
  };
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
  analyzeCryptoChannels().catch(console.error);
}

module.exports = { analyzeCryptoChannels };
