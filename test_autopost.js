const { Database } = require('./core/database');
const { ContentParser } = require('./parsers/content-parser');
const { LLMRewriter } = require('./llm/llm-rewriter');
const { ChannelManager } = require('./core/channel-manager');

async function testAutopost() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    const db = new Database();
    await db.init();
    
    const parser = new ContentParser();
    await parser.init();
    
    const llm = new LLMRewriter();
    
    const channelManager = new ChannelManager();
    await channelManager.init(parser.client);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    const activeChannels = await db.getActiveChannels();
    console.log(`üì∫ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${activeChannels.length}`);
    
    for (let channel of activeChannels) {
      console.log(`\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª: ${channel.channel_name}`);
      
      try {
        if (channel.posts_today >= 10) {
          console.log(`‚è≠Ô∏è –õ–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (${channel.posts_today}/10)`);
          continue;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        console.log('üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...');
        const content = await generateContent(llm, channel.style);
        
        // –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
        console.log('üì§ –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª...');
        const result = await channelManager.postToChannel(
          channel.channel_id, 
          content, 
          channel.style
        );
        
        if (result.success) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤
          await db.updateChannelPostsToday(channel.id, channel.posts_today + 1);
          console.log(`‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª ${channel.channel_name}`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${result.error}`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞ ${channel.channel_name}:`, error.message);
      }
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

async function generateContent(llm, style) {
  // –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
  const testContent = `
üöÄ ContentBot - –ù–µ–π—Ä–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ!

üî• –ß—Ç–æ —è —É–º–µ—é:
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ–¥—É Telegram –∫–∞–Ω–∞–ª—ã
‚Ä¢ –ü–∞—Ä—Å—é —Ç–æ–ø–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é —á–µ—Ä–µ–∑ –ò–ò  
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
‚Ä¢ –ü–æ—Å—Ç—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é 24/7

üí° –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞!

‚ú® –°–æ–≥–ª–∞—Å–µ–Ω? –°—Ç–∞–≤—å ‚ù§Ô∏è
  `;
  
  try {
    const rewritten = await llm.rewriteContent(testContent, style);
    return rewritten;
  } catch (error) {
    console.log('‚ö†Ô∏è LLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    return testContent;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAutopost().then(() => {
  process.exit(0);
}).catch(err => {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err);
  process.exit(1);
});
