require('dotenv').config();
const { MTProtoClient } = require('../telegram_parser/dist/mtproto/client');
const { Api } = require('telegram');
const axios = require('axios');

class TelegramAnalyticsPlatform {
  constructor() {
    this.mt = MTProtoClient.get();
    this.client = this.mt.getClient();
    
    // Cloud.ru API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞–∫ –≤ IKAR)
    this.CLOUD_RU_CONFIG = {
      apiKey: process.env.LLM_API,
      baseUrl: 'https://foundation-models.api.cloud.ru/v1',
      model: 'openai/gpt-oss-120b',
      maxTokens: 50000,
      temperature: 0.3
    };
  }

  async init() {
    try {
      await this.client.connect();
      console.log('‚úÖ Telegram Analytics Platform –∑–∞–ø—É—â–µ–Ω–∞!');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  // 1. SENTIMENT ANALYSIS - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∑–∞–ø–∞–¥–Ω–æ—Å—Ç–∏/–ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
  async analyzeSentiment(channelId, channelName) {
    try {
      console.log(`üéØ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      const messages = await this.getChannelMessages(channelId, 100);
      if (messages.length === 0) return null;

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const combinedText = messages
        .map(msg => msg.text)
        .join('\n\n')
        .substring(0, 15000); // –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤

      console.log(`üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π...`);

      const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —ç—Ç–æ–≥–æ Telegram –∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.

–ö–û–ù–¢–ï–ù–¢:
${combinedText}

–û—Ü–µ–Ω–∏ –ø–æ —à–∫–∞–ª–µ –æ—Ç -100 –¥–æ +100:
- -100: –ö—Ä–∞–π–Ω–µ –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π
- -50: –£–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π  
- 0: –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π
- +50: –£–º–µ—Ä–µ–Ω–Ω–æ –ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π
- +100: –ö—Ä–∞–π–Ω–µ –ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π

–¢–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã
2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã
3. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
4. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω/–ø–æ–ª–∏—Ç–∏–∫–æ–≤

–û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "sentiment_score": —á–∏—Å–ª–æ –æ—Ç -100 –¥–æ +100,
  "orientation": "–ø—Ä–æ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–ø—Ä–æ–∑–∞–ø–∞–¥–Ω—ã–π",
  "confidence": "–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è",
  "key_topics": ["—Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "key_phrases": ["—Ñ—Ä–∞–∑–∞1", "—Ñ—Ä–∞–∑–∞2"],
  "emotional_tone": "–æ–ø–∏—Å–∞–Ω–∏–µ",
  "mentioned_entities": ["—Å—Ç—Ä–∞–Ω–∞/–ø–æ–ª–∏—Ç–∏–∫1", "—Å—Ç—Ä–∞–Ω–∞/–ø–æ–ª–∏—Ç–∏–∫2"],
  "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏"
}`;

      const response = await axios.post(`${this.CLOUD_RU_CONFIG.baseUrl}/chat/completions`, {
        model: this.CLOUD_RU_CONFIG.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –º–µ–¥–∏–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: this.CLOUD_RU_CONFIG.temperature
      }, {
        headers: {
          'Authorization': `Bearer ${this.CLOUD_RU_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });

      const analysis = JSON.parse(response.data.choices[0].message.content);
      
      return {
        channel_name: channelName,
        channel_id: channelId,
        messages_analyzed: messages.length,
        total_views: messages.reduce((sum, msg) => sum + msg.views, 0),
        analysis_date: new Date().toISOString(),
        ...analysis
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ sentiment analysis:', error);
      return null;
    }
  }

  // 2. UNIQUENESS CALCULATOR - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  async calculateUniqueness(channelId, channelName, topic) {
    try {
      console.log(`üîç –ê–Ω–∞–ª–∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ "${channelName}" –≤ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}"`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–Ω–∞–ª–∞
      const channelMessages = await this.getChannelMessages(channelId, 50);
      if (channelMessages.length === 0) return null;

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≤ —Ç–æ–π –∂–µ —Ç–µ–º–∞—Ç–∏–∫–µ
      const competitorChannels = await this.findSimilarChannels(topic);
      let competitorContent = [];
      
      for (let competitor of competitorChannels.slice(0, 3)) {
        const competitorMessages = await this.getChannelMessages(competitor.id, 30);
        competitorContent = competitorContent.concat(competitorMessages);
      }

      console.log(`üìä –°—Ä–∞–≤–Ω–∏–≤–∞—é —Å ${competitorContent.length} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ LLM
      const channelTexts = channelMessages.map(m => m.text).join('\n');
      const competitorTexts = competitorContent.map(m => m.text).join('\n');

      const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏ –≤ —Ç–µ–º–∞—Ç–∏–∫–µ "${topic}".

–ö–û–ù–¢–ï–ù–¢ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú–û–ì–û –ö–ê–ù–ê–õ–ê:
${channelTexts.substring(0, 8000)}

–ö–û–ù–¢–ï–ù–¢ –ö–û–ù–ö–£–†–ï–ù–¢–û–í:
${competitorTexts.substring(0, 8000)}

–û—Ü–µ–Ω–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º (0-100%):
1. –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–º
2. –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∞—á–∏
3. –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
4. –°—Ç–∏–ª—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
5. –ß–∞—Å—Ç–æ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "uniqueness_score": —á–∏—Å–ª–æ 0-100,
  "originality": —á–∏—Å–ª–æ 0-100,
  "exclusivity": —á–∏—Å–ª–æ 0-100,
  "style_uniqueness": —á–∏—Å–ª–æ 0-100,
  "content_freshness": —á–∏—Å–ª–æ 0-100,
  "unique_topics": ["—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "common_topics": ["–æ–±—â–∞—è —Ç–µ–º–∞1", "—Ç–µ–º–∞2"],
  "differentiation": "—á—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç –æ—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
  "recommendations": ["—Å–æ–≤–µ—Ç1", "—Å–æ–≤–µ—Ç2"]
}`;

      const response = await axios.post(`${this.CLOUD_RU_CONFIG.baseUrl}/chat/completions`, {
        model: this.CLOUD_RU_CONFIG.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–∞–Ω–∞–ª–∏–∑—É –∏ –º–µ–¥–∏–∞-–º–µ—Ç—Ä–∏–∫–∞–º."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: this.CLOUD_RU_CONFIG.temperature
      }, {
        headers: {
          'Authorization': `Bearer ${this.CLOUD_RU_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });

      const uniquenessAnalysis = JSON.parse(response.data.choices[0].message.content);
      
      return {
        channel_name: channelName,
        channel_id: channelId,
        topic: topic,
        competitors_analyzed: competitorChannels.length,
        analysis_date: new Date().toISOString(),
        ...uniquenessAnalysis
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏:', error);
      return null;
    }
  }

  // 3. ENTITY EXTRACTION - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
  async extractEntities(channelId, channelName) {
    try {
      console.log(`üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ "${channelName}"`);
      
      const messages = await this.getChannelMessages(channelId, 100);
      if (messages.length === 0) return null;

      const combinedText = messages
        .map(msg => msg.text)
        .join('\n\n')
        .substring(0, 12000);

      const prompt = `
–ò–∑–≤–ª–µ–∫–∏ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤—Å–µ —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:

${combinedText}

–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–π –ø–æ —Ç–∏–ø–∞–º –∏ –ø–æ–¥—Å—á–∏—Ç–∞–π —á–∞—Å—Ç–æ—Ç—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π.

–û—Ç–≤–µ—Ç –≤ JSON:
{
  "people": [{"name": "–∏–º—è", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "organizations": [{"name": "–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "countries": [{"name": "—Å—Ç—Ä–∞–Ω–∞", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "events": [{"name": "—Å–æ–±—ã—Ç–∏–µ", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "technologies": [{"name": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "locations": [{"name": "–º–µ—Å—Ç–æ", "count": —á–∏—Å–ª–æ, "context": "–∫–æ–Ω—Ç–µ–∫—Å—Ç"}],
  "sentiment_by_entity": {"—Å—É—â–Ω–æ—Å—Ç—å": "–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"},
  "key_relationships": ["—Å–≤—è–∑—å –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏"],
  "trending_entities": ["–Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º—ã–µ"]
}`;

      const response = await axios.post(`${this.CLOUD_RU_CONFIG.baseUrl}/chat/completions`, {
        model: this.CLOUD_RU_CONFIG.model,
        messages: [
          {
            role: "system",
            content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–∫—Å—Ç–∞."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        max_tokens: 2000,
        temperature: 0.2
      }, {
        headers: {
          'Authorization': `Bearer ${this.CLOUD_RU_CONFIG.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });

      const entities = JSON.parse(response.data.choices[0].message.content);
      
      return {
        channel_name: channelName,
        channel_id: channelId,
        messages_analyzed: messages.length,
        extraction_date: new Date().toISOString(),
        ...entities
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π:', error);
      return null;
    }
  }

  // 4. CHANNEL EXPLORER - –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
  async exploreChannels(query, filters = {}) {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${query}"`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
      const allChannels = await this.getAllChannels();
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–ø—Ä–æ—Å—É
      const relevantChannels = [];
      
      for (let channel of allChannels.slice(0, 20)) { // –õ–∏–º–∏—Ç –¥–ª—è –¥–µ–º–æ
        try {
          const messages = await this.getChannelMessages(channel.id, 20);
          if (messages.length === 0) continue;

          const channelText = messages.map(m => m.text).join(' ');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ LLM
          const relevanceScore = await this.calculateRelevance(channelText, query);
          
          if (relevanceScore > 0.6) {
            relevantChannels.push({
              ...channel,
              relevance_score: relevanceScore,
              recent_messages: messages.length,
              avg_views: Math.round(messages.reduce((sum, m) => sum + m.views, 0) / messages.length)
            });
          }
        } catch (error) {
          console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–Ω–∞–ª ${channel.title}: ${error.message}`);
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      relevantChannels.sort((a, b) => b.relevance_score - a.relevance_score);

      return {
        query: query,
        filters: filters,
        found_channels: relevantChannels.length,
        channels: relevantChannels,
        search_date: new Date().toISOString()
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:', error);
      return null;
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async getChannelMessages(channelId, limit = 50) {
    try {
      const messages = await this.client.invoke(
        new Api.messages.GetHistory({
          peer: channelId,
          limit: limit,
          offsetDate: 0,
          offsetId: 0,
          maxId: 0,
          minId: 0,
          addOffset: 0,
          hash: 0n
        })
      );

      return messages.messages
        .filter(msg => msg.message && msg.message.length > 30)
        .map(msg => ({
          id: msg.id,
          text: msg.message,
          date: new Date(msg.date * 1000),
          views: msg.views || 0
        }));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞ ${channelId}:`, error);
      return [];
    }
  }

  async getAllChannels() {
    try {
      const dialogs = await this.client.invoke(
        new Api.messages.GetDialogs({
          offsetDate: 0,
          offsetId: 0,
          offsetPeer: new Api.InputPeerEmpty(),
          limit: 1000,
          hash: 0n
        })
      );

      return dialogs.chats
        .filter(chat => chat.title && chat.broadcast)
        .map(channel => ({
          id: channel.id,
          title: channel.title,
          username: channel.username,
          participants: channel.participantsCount || 0
        }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤:', error);
      return [];
    }
  }

  async findSimilarChannels(topic) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ
    const allChannels = await this.getAllChannels();
    return allChannels.filter(ch => 
      ch.title.toLowerCase().includes(topic.toLowerCase())
    ).slice(0, 5);
  }

  async calculateRelevance(text, query) {
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const queryWords = query.toLowerCase().split(' ');
    const textWords = text.toLowerCase().split(' ');
    
    let matches = 0;
    for (let word of queryWords) {
      if (textWords.includes(word)) matches++;
    }
    
    return matches / queryWords.length;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  async saveAnalysis(data, filename) {
    try {
      const fs = require('fs').promises;
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const fullFilename = `${filename}_${timestamp}.json`;
      
      await fs.writeFile(fullFilename, JSON.stringify(data, null, 2), 'utf8');
      console.log(`üíæ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${fullFilename}`);
      
      return fullFilename;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
      return null;
    }
  }

  async close() {
    if (this.client) {
      await this.client.disconnect();
      console.log('üõë Analytics Platform –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
  }
}

// –î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞
async function fullChannelAnalysis(channelId, channelName, topic) {
  const platform = new TelegramAnalyticsPlatform();
  
  try {
    await platform.init();
    
    console.log(`üöÄ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–ê–õ–ê "${channelName}"`);
    console.log('=' .repeat(60));
    
    // 1. Sentiment Analysis
    console.log('\n1Ô∏è‚É£ –ü–û–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó');
    const sentiment = await platform.analyzeSentiment(channelId, channelName);
    if (sentiment) {
      console.log(`üìä –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è: ${sentiment.orientation}`);
      console.log(`üìà –û—Ü–µ–Ω–∫–∞: ${sentiment.sentiment_score}/100`);
      console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${sentiment.confidence}`);
      await platform.saveAnalysis(sentiment, 'sentiment_analysis');
    }
    
    // 2. Uniqueness Analysis
    console.log('\n2Ô∏è‚É£ –ê–ù–ê–õ–ò–ó –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò');
    const uniqueness = await platform.calculateUniqueness(channelId, channelName, topic);
    if (uniqueness) {
      console.log(`‚ú® –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å: ${uniqueness.uniqueness_score}%`);
      console.log(`üé® –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${uniqueness.originality}%`);
      console.log(`üî• –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç—å: ${uniqueness.exclusivity}%`);
      await platform.saveAnalysis(uniqueness, 'uniqueness_analysis');
    }
    
    // 3. Entity Extraction
    console.log('\n3Ô∏è‚É£ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–£–©–ù–û–°–¢–ï–ô');
    const entities = await platform.extractEntities(channelId, channelName);
    if (entities) {
      console.log(`üë• –õ—é–¥–∏: ${entities.people?.length || 0}`);
      console.log(`üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${entities.organizations?.length || 0}`);
      console.log(`üåç –°—Ç—Ä–∞–Ω—ã: ${entities.countries?.length || 0}`);
      console.log(`üìÖ –°–æ–±—ã—Ç–∏—è: ${entities.events?.length || 0}`);
      await platform.saveAnalysis(entities, 'entities_analysis');
    }
    
    console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!');
    console.log(`üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞–Ω–∞–ª–∞: ${Math.round((sentiment?.sentiment_score + 50 + uniqueness?.uniqueness_score) / 2 || 75)}/100`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
  } finally {
    await platform.close();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç
module.exports = { TelegramAnalyticsPlatform, fullChannelAnalysis };

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –î–µ–º–æ: –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–∞ "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç"
  fullChannelAnalysis(-1001111348665, "–ú–∏–ª–∏—Ç–∞—Ä–∏—Å—Ç", "–≤–æ–µ–Ω–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞");
}
